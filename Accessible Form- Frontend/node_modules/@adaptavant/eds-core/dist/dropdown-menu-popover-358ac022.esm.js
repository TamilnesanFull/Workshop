'use client';
import { mergeRefs } from '@react-aria/utils';
import { forwardRef, useId, useMemo, useCallback } from 'react';
import { useDropdownContext } from './context-6e374e37.esm.js';
import { useMobileDropdownContext } from './mobile-context-75da3175.esm.js';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { v as visuallyHiddenStyles } from './visually-hidden-60af4b9e.esm.js';
import { useClickAway } from './use-click-away-a74e18f7.esm.js';
import { g as getDropdownMenuPopoverStyles } from './styles-c330e9dd.esm.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { B as Box } from './box-a5dda214.esm.js';
import { H as Heading } from './heading-8fb66234.esm.js';
import { Modal, ModalHeader, ModalContent } from './modal-682ec106.esm.js';
import { useIsViewportBelowOrEqual } from './use-viewport-below-or-equal-b1c12ed0.esm.js';
import { Popover } from './popover-55e45b10.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './styles-56e113a0.esm.js';
import './tw-c6a9a210.esm.js';
import './text-3fc88ad6.esm.js';

const MobilePopover = /*#__PURE__*/forwardRef(function MobilePopover({
  children,
  className,
  classNames = {},
  style = {},
  styles = {}
}, forwardedRef) {
  const id = useId();
  const mobilePopoverHeader = `mobile-popover-header-${id}`;
  const {
    popover,
    isMenuOpen,
    closeMenu
  } = useDropdownContext();
  const {
    popoverRef
  } = popover;
  const {
    closeButtonProps,
    title
  } = useMobileDropdownContext();
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getDropdownMenuPopoverStyles()
  });
  const getHeaderCloseButtonProps = () => {
    if (!closeButtonProps) return undefined;
    return {
      label: closeButtonProps.label ?? '',
      onClick: () => {
        var _closeButtonProps$onC;
        (_closeButtonProps$onC = closeButtonProps.onClick) === null || _closeButtonProps$onC === void 0 || _closeButtonProps$onC.call(closeButtonProps);
        closeMenu();
      }
    };
  };
  return /*#__PURE__*/jsx(Box, {
    className: styleProps('root').className,
    ref: mergeRefs(forwardedRef, popoverRef),
    style: {
      ...visuallyHiddenStyles,
      ...styleProps('root').style
    },
    children: /*#__PURE__*/jsxs(Modal, {
      classNames: {
        modalWrapper: styleProps('modalWrapper').className
      },
      onClose: closeMenu,
      open: isMenuOpen,
      role: "dialog",
      styles: {
        modalWrapper: styleProps('modalWrapper').style
      },
      titleId: mobilePopoverHeader,
      children: [/*#__PURE__*/jsx(ModalHeader, {
        className: styleProps('modalHeading').className,
        closeButtonProps: getHeaderCloseButtonProps(),
        style: styleProps('modalHeading').style,
        children: /*#__PURE__*/jsx(Heading, {
          as: "h5",
          className: styleProps('modalHeading').className,
          id: mobilePopoverHeader,
          children: title
        })
      }), /*#__PURE__*/jsx(ModalContent, {
        className: styleProps('modalContent').className,
        style: styleProps('modalContent').style,
        children: children
      })]
    })
  });
});

const DropdownMenuPopover = /*#__PURE__*/forwardRef(function DropdownMenuPopover({
  children,
  className = '',
  classNames = {},
  shouldUsePortal = true,
  style = {},
  styles = {},
  ...consumerProps
}, forwardedRef) {
  const {
    closeMenu,
    isMenuOpen,
    popover,
    popoverId
  } = useDropdownContext();
  const {
    popoverRef,
    referenceRef,
    getPopoverProps
  } = popover;
  const {
    togglePoint,
    mobileFriendly
  } = useMobileDropdownContext();
  const isResponsiveViewport = useIsViewportBelowOrEqual(togglePoint);
  const popoverProps = useMemo(() => getPopoverProps(), [getPopoverProps]);
  const memoizedRefs = useMemo(() => [popoverRef, referenceRef], [popoverRef, referenceRef]);

  // When the dropdown is opened, clicking outside should close it
  const handleClickOutside = useCallback(() => {
    if (isMenuOpen) closeMenu();
  }, [closeMenu, isMenuOpen]);
  useClickAway({
    refs: memoizedRefs,
    onClickAway: handleClickOutside,
    isDisabled: mobileFriendly && isResponsiveViewport
  });
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getDropdownMenuPopoverStyles()
  });
  if (isResponsiveViewport && mobileFriendly && isMenuOpen) {
    return /*#__PURE__*/jsx(MobilePopover, {
      className: className,
      classNames: classNames,
      style: style,
      styles: styles,
      ...consumerProps,
      children: children
    });
  }
  return /*#__PURE__*/jsx(Popover, {
    ...consumerProps,
    id: popoverId,
    ref: mergeRefs(forwardedRef, popoverProps.ref),
    role: "presentation",
    shouldUsePortal: shouldUsePortal,
    ...styleProps('root', isMenuOpen ? popoverProps.style : visuallyHiddenStyles),
    children: isMenuOpen ? children : null
  });
});
DropdownMenuPopover.displayName = 'DropdownMenuPopover';

export { DropdownMenuPopover };
