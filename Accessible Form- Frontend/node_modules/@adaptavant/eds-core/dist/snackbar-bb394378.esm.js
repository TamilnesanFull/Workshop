'use client';
import { useState, useEffect } from 'react';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { useTimeout } from './use-timeout-9e505916.esm.js';
import { SnackbarContent } from './snackbar-content-02f9232d.esm.js';
import { o as offsetStylesLookup, a as getSnackbarStyles } from './styles-d187c282.esm.js';
import { jsx } from 'react/jsx-runtime';
import { B as Box } from './box-a5dda214.esm.js';
import { m as mergeProps } from './merge-props-5c13cba9.esm.js';
import { useCreatePortal } from './create-portal-5c09fed2.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './tw-c6a9a210.esm.js';
import '@react-aria/utils';
import './cx-c5d68be6.esm.js';
import 'clsx';
import './merge-ids-c2d2d3d7.esm.js';

/** Snackbar component helps to display temporary notifications of actions, errors or other events.
 * @description This component extends the `SnackbarContent` component and has the ability to control the visibility, position & auto-hide features of the Snackbar.
 */
const Snackbar = ({
  className = '',
  classNames = {},
  styles = {},
  title,
  description,
  autoCloseDuration = 3000,
  variant,
  placement,
  open,
  offset,
  onClose,
  onCloseButtonClick,
  actionButton,
  ...consumerProps
}) => {
  const styleProps = getStyleProps({
    className,
    classNames,
    style: offsetStylesLookup({
      placement: placement,
      offset: offset
    }),
    styles,
    tw: getSnackbarStyles()
  });
  const createPortal = useCreatePortal();
  const [isOpen, setIsOpen] = useState(open);

  // Close the snackbar after the autoCloseDuration
  useTimeout(() => {
    setIsOpen(false);
    onClose();
  }, autoCloseDuration);

  // Sets the visibility based on the `open` prop
  useEffect(() => {
    setIsOpen(open);
  }, [open]);
  return isOpen && createPortal( /*#__PURE__*/jsx(Box, {
    ...mergeProps(consumerProps, styleProps('root')),
    children: /*#__PURE__*/jsx(SnackbarContent, {
      actionButton: actionButton,
      description: description,
      onCloseButtonClick: onCloseButtonClick,
      title: title,
      variant: variant
    })
  }));
};
Snackbar.displayName = 'Snackbar';

export { Snackbar };
