'use client';
import { createContext, useContext } from 'react';
import { c as composeId } from './compose-id-1f2e6139.esm.js';
import { useProvidedOrGeneratedId } from './use-provided-or-generated-id-70d42050.esm.js';

const TabsContext = /*#__PURE__*/createContext(undefined);
const TabsContextProvider = TabsContext.Provider;
function useTabsContext(value, disabled) {
  const context = useContext(TabsContext);
  const {
    tabItemId,
    tabContentId
  } = useGenerateA11yIds(value);
  if (!context) {
    throw new Error('useTabsContext must be used within a TabsContextProvider');
  }
  return {
    ...context,
    tabItemA11yProps: {
      id: tabItemId,
      role: 'tab',
      'aria-controls': tabContentId,
      'aria-selected': value === context.selectedValue ? true : false,
      'aria-disabled': disabled === true ? true : undefined,
      disabled: disabled === true ? true : undefined
    },
    tabContentA11yProps: {
      id: tabContentId,
      role: 'tabpanel',
      'aria-labelledby': tabItemId,
      tabIndex: value === context.selectedValue ? 0 : -1,
      'aria-hidden': value === context.selectedValue ? undefined : true
    },
    tabListA11yProps: {
      role: 'tablist',
      'aria-orientation': 'horizontal'
    }
  };
}

// Generates unique ids for tab items and tab contents using value provided
function useGenerateA11yIds(value) {
  const id = useProvidedOrGeneratedId(value);
  return {
    tabItemId: composeId('tab-item', id),
    tabContentId: composeId('tab-content', id)
  };
}

export { TabsContextProvider, useTabsContext };
