'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var index = require('./index-3bdbdb42.cjs.dev.js');
var styles = require('./styles-3379aae1.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
var box = require('./box-88b49271.cjs.dev.js');
var mergeProps = require('./merge-props-74bd38ff.cjs.dev.js');
var stack = require('./stack-b8f38fa7.cjs.dev.js');
var text = require('./text-b4d8b4ef.cjs.dev.js');
var loading = require('./loading-902bdbe2.cjs.dev.js');
var errorIcon = require('./error-icon-e17bfc88.cjs.dev.js');
var informationIcon = require('./information-icon-5527053a.cjs.dev.js');
var removeIcon = require('./remove-icon-ad27b88f.cjs.dev.js');
var checkIcon = require('./check-icon-e4316b72.cjs.dev.js');
require('./tw-merge-70bc959c.cjs.dev.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.dev.js');
require('./tw-cabb7e4c.cjs.dev.js');
require('react');
require('@react-aria/utils');
require('./cx-26784cbb.cjs.dev.js');
require('clsx');
require('./merge-ids-b19ec20e.cjs.dev.js');
require('./grow-your-brand-icon-6c89c797.cjs.dev.js');
require('./styles-32c512c4.cjs.dev.js');
require('./setmore-icon-45794869.cjs.dev.js');

/**
 * The SnackbarContent component can used as a standalone primitive to build a user feedback system.
 *
 */
const SnackbarContent = ({
  className = '',
  classNames = {},
  style = {},
  styles: styles$1 = {},
  variant,
  onCloseButtonClick,
  title,
  description,
  actionButton,
  ...consumerProps
}) => {
  const styleProps = index.getStyleProps({
    className,
    classNames,
    style,
    styles: styles$1,
    tw: styles.getSnackbarContentStyles()
  });
  return /*#__PURE__*/jsxRuntime.jsxs(box.Box, {
    "aria-atomic": "true",
    "aria-live": "off",
    role: "alert",
    tabIndex: 0,
    ...mergeProps.mergeProps(consumerProps, styleProps('root')),
    children: [/*#__PURE__*/jsxRuntime.jsx(AppearanceIndicator, {
      variant: variant
    }), /*#__PURE__*/jsxRuntime.jsxs(stack.Stack, {
      className: "flex-1",
      children: [/*#__PURE__*/jsxRuntime.jsx(text.Text, {
        ...styleProps('title'),
        children: title
      }), description ? /*#__PURE__*/jsxRuntime.jsx(text.Text, {
        ...styleProps('description'),
        children: description
      }) : null]
    }), actionButton ? /*#__PURE__*/jsxRuntime.jsx("button", {
      type: "button",
      ...styleProps('actionButton'),
      onClick: actionButton.onClick,
      children: actionButton.text
    }) : null, /*#__PURE__*/jsxRuntime.jsx("button", {
      "aria-label": "Close",
      onClick: onCloseButtonClick,
      type: "button",
      ...styleProps('closeButton'),
      children: /*#__PURE__*/jsxRuntime.jsx(removeIcon.RemoveIcon, {
        size: "16"
      })
    })]
  });
};
SnackbarContent.displayName = 'SnackbarContent';

/** Based on the appearance, we render a different icon */
const AppearanceIndicator = ({
  variant
}) => {
  switch (variant) {
    case 'info':
      return /*#__PURE__*/jsxRuntime.jsx(informationIcon.InformationIcon, {
        className: "fill-text-inverse shrink-0",
        size: "20"
      });
    case 'positive':
      return /*#__PURE__*/jsxRuntime.jsx(checkIcon.CheckIcon, {
        className: "fill-text-inverse-positive shrink-0",
        size: "20"
      });
    case 'critical':
      return /*#__PURE__*/jsxRuntime.jsx(errorIcon.ErrorIcon, {
        className: "fill-text-inverse-critical shrink-0",
        size: "20"
      });
    case 'loading':
      return /*#__PURE__*/jsxRuntime.jsx(loading.Loading, {
        className: "shrink-0",
        size: "20",
        tone: "inverse"
      });
    default:
      return null;
  }
};

exports.SnackbarContent = SnackbarContent;
