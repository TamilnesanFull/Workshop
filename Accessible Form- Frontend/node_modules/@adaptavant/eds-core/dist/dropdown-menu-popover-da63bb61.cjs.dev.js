'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('@react-aria/utils');
var React = require('react');
var context = require('./context-1e651be3.cjs.dev.js');
var mobile_context = require('./mobile-context-b7ac574c.cjs.dev.js');
var index = require('./index-3bdbdb42.cjs.dev.js');
var visuallyHidden = require('./visually-hidden-9e9bf258.cjs.dev.js');
var use_click_away = require('./use-click-away-d103f9ae.cjs.dev.js');
var styles = require('./styles-c7c13eb4.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
var box = require('./box-88b49271.cjs.dev.js');
var heading = require('./heading-2f0d515d.cjs.dev.js');
var modal = require('./modal-78110d8b.cjs.dev.js');
var use_viewport_below_or_equal = require('./use-viewport-below-or-equal-a63c017b.cjs.dev.js');
var popover = require('./popover-8c8f3261.cjs.dev.js');
require('./tw-merge-70bc959c.cjs.dev.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.dev.js');
require('./styles-554c7d0d.cjs.dev.js');
require('./tw-cabb7e4c.cjs.dev.js');
require('./text-b4d8b4ef.cjs.dev.js');

const MobilePopover = /*#__PURE__*/React.forwardRef(function MobilePopover({
  children,
  className,
  classNames = {},
  style = {},
  styles: styles$1 = {}
}, forwardedRef) {
  const id = React.useId();
  const mobilePopoverHeader = `mobile-popover-header-${id}`;
  const {
    popover,
    isMenuOpen,
    closeMenu
  } = context.useDropdownContext();
  const {
    popoverRef
  } = popover;
  const {
    closeButtonProps,
    title
  } = mobile_context.useMobileDropdownContext();
  const styleProps = index.getStyleProps({
    className,
    classNames,
    style,
    styles: styles$1,
    tw: styles.getDropdownMenuPopoverStyles()
  });
  const getHeaderCloseButtonProps = () => {
    if (!closeButtonProps) return undefined;
    return {
      label: closeButtonProps.label ?? '',
      onClick: () => {
        var _closeButtonProps$onC;
        (_closeButtonProps$onC = closeButtonProps.onClick) === null || _closeButtonProps$onC === void 0 || _closeButtonProps$onC.call(closeButtonProps);
        closeMenu();
      }
    };
  };
  return /*#__PURE__*/jsxRuntime.jsx(box.Box, {
    className: styleProps('root').className,
    ref: utils.mergeRefs(forwardedRef, popoverRef),
    style: {
      ...visuallyHidden.visuallyHiddenStyles,
      ...styleProps('root').style
    },
    children: /*#__PURE__*/jsxRuntime.jsxs(modal.Modal, {
      classNames: {
        modalWrapper: styleProps('modalWrapper').className
      },
      onClose: closeMenu,
      open: isMenuOpen,
      role: "dialog",
      styles: {
        modalWrapper: styleProps('modalWrapper').style
      },
      titleId: mobilePopoverHeader,
      children: [/*#__PURE__*/jsxRuntime.jsx(modal.ModalHeader, {
        className: styleProps('modalHeading').className,
        closeButtonProps: getHeaderCloseButtonProps(),
        style: styleProps('modalHeading').style,
        children: /*#__PURE__*/jsxRuntime.jsx(heading.Heading, {
          as: "h5",
          className: styleProps('modalHeading').className,
          id: mobilePopoverHeader,
          children: title
        })
      }), /*#__PURE__*/jsxRuntime.jsx(modal.ModalContent, {
        className: styleProps('modalContent').className,
        style: styleProps('modalContent').style,
        children: children
      })]
    })
  });
});

const DropdownMenuPopover = /*#__PURE__*/React.forwardRef(function DropdownMenuPopover({
  children,
  className = '',
  classNames = {},
  shouldUsePortal = true,
  style = {},
  styles: styles$1 = {},
  ...consumerProps
}, forwardedRef) {
  const {
    closeMenu,
    isMenuOpen,
    popover: popover$1,
    popoverId
  } = context.useDropdownContext();
  const {
    popoverRef,
    referenceRef,
    getPopoverProps
  } = popover$1;
  const {
    togglePoint,
    mobileFriendly
  } = mobile_context.useMobileDropdownContext();
  const isResponsiveViewport = use_viewport_below_or_equal.useIsViewportBelowOrEqual(togglePoint);
  const popoverProps = React.useMemo(() => getPopoverProps(), [getPopoverProps]);
  const memoizedRefs = React.useMemo(() => [popoverRef, referenceRef], [popoverRef, referenceRef]);

  // When the dropdown is opened, clicking outside should close it
  const handleClickOutside = React.useCallback(() => {
    if (isMenuOpen) closeMenu();
  }, [closeMenu, isMenuOpen]);
  use_click_away.useClickAway({
    refs: memoizedRefs,
    onClickAway: handleClickOutside,
    isDisabled: mobileFriendly && isResponsiveViewport
  });
  const styleProps = index.getStyleProps({
    className,
    classNames,
    style,
    styles: styles$1,
    tw: styles.getDropdownMenuPopoverStyles()
  });
  if (isResponsiveViewport && mobileFriendly && isMenuOpen) {
    return /*#__PURE__*/jsxRuntime.jsx(MobilePopover, {
      className: className,
      classNames: classNames,
      style: style,
      styles: styles$1,
      ...consumerProps,
      children: children
    });
  }
  return /*#__PURE__*/jsxRuntime.jsx(popover.Popover, {
    ...consumerProps,
    id: popoverId,
    ref: utils.mergeRefs(forwardedRef, popoverProps.ref),
    role: "presentation",
    shouldUsePortal: shouldUsePortal,
    ...styleProps('root', isMenuOpen ? popoverProps.style : visuallyHidden.visuallyHiddenStyles),
    children: isMenuOpen ? children : null
  });
});
DropdownMenuPopover.displayName = 'DropdownMenuPopover';

exports.DropdownMenuPopover = DropdownMenuPopover;
