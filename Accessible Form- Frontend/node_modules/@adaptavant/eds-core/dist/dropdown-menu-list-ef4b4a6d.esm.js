'use client';
import { mergeRefs } from '@react-aria/utils';
import { useRef, useCallback } from 'react';
import { useDropdownContext } from './context-6e374e37.esm.js';
import { useCachedChildren } from './use-cached-children-3db72c4a.esm.js';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { a as forwardRefWithGenericComponent } from './forward-ref-a0e1d5d1.esm.js';
import { m as mergeProps } from './merge-props-5c13cba9.esm.js';
import { b as getDropdownMenuListStyles } from './styles-c330e9dd.esm.js';
import { jsx } from 'react/jsx-runtime';
import { B as Box } from './box-a5dda214.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './cx-c5d68be6.esm.js';
import 'clsx';
import './merge-ids-c2d2d3d7.esm.js';
import './styles-56e113a0.esm.js';
import './tw-c6a9a210.esm.js';

const DropdownMenuList = forwardRefWithGenericComponent(function DropdownMenuList({
  children,
  className = '',
  classNames = {},
  options,
  style = {},
  styles = {},
  ...consumerProps
}, forwardedRef) {
  const {
    activeDescendantId,
    isMenuOpen,
    listId,
    triggerId
  } = useDropdownContext();

  // Ref to track if the component has already been initialized
  const isFirstRenderRef = useRef(true);

  // When the dropdown is opened, the menu list should be focused in order for
  // the keyboard navigation to work.
  const autoFocusOnOpen = useCallback(node => {
    if (node && isMenuOpen && isFirstRenderRef.current) {
      node.focus({
        preventScroll: true
      });
      isFirstRenderRef.current = false;
    }
  }, [isMenuOpen]);
  const {
    onKeyDown
  } = useKeydownNavigation();
  const cachedChildren = useCachedChildren({
    children,
    options
  });
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getDropdownMenuListStyles()
  });
  return /*#__PURE__*/jsx(Box, {
    ...mergeProps(consumerProps, {
      'aria-labelledby': triggerId
    }),
    "aria-activedescendant": activeDescendantId,
    id: listId,
    onKeyDown: onKeyDown,
    ref: mergeRefs(autoFocusOnOpen, forwardedRef),
    role: "menu",
    tabIndex: -1,
    ...styleProps('root'),
    children: cachedChildren
  });
});
function useKeydownNavigation() {
  const {
    clickSelectedItem,
    closeMenu,
    goToFirstMenuItem,
    goToLastMenuItem,
    goToNextMenuItem,
    goToPreviousMenuItem,
    updateDescendantSearchTerm
  } = useDropdownContext();
  const onKeyDown = useCallback(event => {
    switch (event.code) {
      case 'ArrowUp':
        event.preventDefault();
        goToPreviousMenuItem();
        break;
      case 'ArrowDown':
        event.preventDefault();
        goToNextMenuItem();
        break;
      case 'Home':
        event.preventDefault();
        goToFirstMenuItem();
        break;
      case 'End':
        event.preventDefault();
        goToLastMenuItem();
        break;
      case 'Escape':
        event.preventDefault();
        closeMenu();
        break;
      case 'Enter':
      case 'Space':
        event.preventDefault();
        clickSelectedItem();
        break;
      case 'Tab':
        // Don't prevent default
        closeMenu();
        break;
      default:
        // If the key is a letter, update the search term
        if (/^[a-zA-Z]{1}$/.test(event.key) &&
        // Bail if the user is holding a modifier key so they can use
        // keyboard shortcuts
        !event.metaKey && !event.ctrlKey) {
          event.preventDefault();
          updateDescendantSearchTerm(event.key);
        }
    }
  }, [clickSelectedItem, closeMenu, goToFirstMenuItem, goToLastMenuItem, goToNextMenuItem, goToPreviousMenuItem, updateDescendantSearchTerm]);
  return {
    onKeyDown
  };
}

export { DropdownMenuList };
