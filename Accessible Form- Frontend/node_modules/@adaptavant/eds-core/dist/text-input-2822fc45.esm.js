'use client';
import { mergeRefs } from '@react-aria/utils';
import { forwardRef } from 'react';
import { Z as ZeroWidthSpace } from './zero-width-space-1914c889.esm.js';
import { a as getTextInputStyles } from './styles-12c293a4.esm.js';
import { T as TextInputPrimitive } from './text-input-primitive-a129374e.esm.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { T as Text } from './text-3fc88ad6.esm.js';
import { useFieldContext, useInputA11yProps } from './context-2a1498a6.esm.js';
import { useCombinedFocusContainerInputStyles, FocusContainer } from './focus-container-9b45fd51.esm.js';
import './tw-c6a9a210.esm.js';
import './styles-267c9284.esm.js';
import './index-dd10a77e.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './box-a5dda214.esm.js';

/**
 * TextInput
 *
 * @description
 * The TextInput component provides a way for inputting text.
 * This component must be nested within a Field or InlineField.
 */
const TextInput = /*#__PURE__*/forwardRef(function TextInput({
  adornmentEnd,
  adornmentStart,
  className = '',
  classNames = {},
  focusContainerRef,
  style = {},
  styles = {},
  ...consumerProps
}, forwardedRef) {
  const {
    isDisabled,
    isInvalid,
    isRequired,
    size,
    variant
  } = useFieldContext();
  const a11yProps = useInputA11yProps({
    isDisabled,
    isInvalid,
    isRequired
  });
  const styleProps = useCombinedFocusContainerInputStyles({
    className,
    classNames,
    isDisabled,
    isInvalid,
    style,
    styles,
    tw: getTextInputStyles({
      hasAdornmentEnd: Boolean(adornmentEnd),
      hasAdornmentStart: Boolean(adornmentStart),
      size,
      isDisabled
    })
  });
  return /*#__PURE__*/jsx(FocusContainer, {
    adornmentEnd: adornmentEnd ? /*#__PURE__*/jsxs(Text, {
      ...styleProps('adornmentEnd'),
      children: [/*#__PURE__*/jsx(ZeroWidthSpace, {}), adornmentEnd]
    }) : undefined,
    adornmentStart: adornmentStart ? /*#__PURE__*/jsxs(Text, {
      ...styleProps('adornmentStart'),
      children: [/*#__PURE__*/jsx(ZeroWidthSpace, {}), adornmentStart]
    }) : undefined,
    classNames: {
      focusIndicator: {
        ...styleProps('focusIndicator')
      }.className
    },
    isDisabled: isDisabled,
    isGhost: variant === 'subtle',
    isInvalid: isInvalid,
    ref: focusContainerRef,
    styles: {
      focusIndicator: {
        ...styleProps('focusIndicator').style
      }
    },
    children: ({
      ref
    }) => /*#__PURE__*/jsx(TextInputPrimitive, {
      ...consumerProps,
      ...a11yProps,
      ref: mergeRefs(ref, forwardedRef),
      size: size,
      ...styleProps('root')
    })
  });
});
TextInput.displayName = 'TextInput';

export { TextInput };
