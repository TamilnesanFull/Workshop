'use client';
import { DropdownProvider } from './context-6e374e37.esm.js';
import { useDropdownContextValues } from './use-dropdown-context-values-349b04a0.esm.js';
import { usePopulateDescendantNodes } from './use-populate-descendant-nodes-9523f130.esm.js';
import { MobileDropdownProvider } from './mobile-context-75da3175.esm.js';
import { M as MOBILE_TOGGLE_POINT } from './utils-0956ef0f.esm.js';
import { DropdownMenuProvider } from './context-bbc9b8ce.esm.js';
import { useDropdownMenuTriggerProps } from './dropdown-menu-trigger-b077d88f.esm.js';
import { jsx } from 'react/jsx-runtime';
import { useIsViewportBelowOrEqual } from './use-viewport-below-or-equal-b1c12ed0.esm.js';

function DropdownMenu({
  children,
  isDisabled = false,
  popoverMatchReferenceWidth = false,
  popoverMaxHeight = 356,
  popoverMaxWidth = 400,
  popoverOffset = 4,
  popoverPlacement = 'bottom-start',
  strategy = 'absolute',
  mobilePopover
}) {
  const dropdownContext = useDropdownContextValues({
    popoverMatchReferenceWidth,
    popoverMaxHeight,
    popoverMaxWidth,
    popoverOffset,
    popoverPlacement,
    strategy
  });
  const {
    isMenuOpen,
    dispatch,
    popover
  } = dropdownContext;
  const {
    mobileFriendly = true,
    titleForMobile = '',
    closeButtonPropsForMobile = undefined,
    togglePoint = MOBILE_TOGGLE_POINT
  } = mobilePopover ?? {};
  const {
    triggerProps
  } = useDropdownMenuTriggerProps(dropdownContext, isDisabled);
  const isResponsiveViewport = useIsViewportBelowOrEqual(togglePoint);
  usePopulateDescendantNodes({
    isMenuOpen,
    children,
    dispatch,
    popoverRef: popover.popoverRef,
    selectors: '[role="menuitem"]',
    isMobile: isResponsiveViewport
  });
  return /*#__PURE__*/jsx(DropdownProvider, {
    value: dropdownContext,
    children: /*#__PURE__*/jsx(MobileDropdownProvider, {
      value: {
        mobileFriendly,
        closeButtonProps: closeButtonPropsForMobile,
        togglePoint,
        title: titleForMobile
      },
      children: /*#__PURE__*/jsx(DropdownMenuProvider, {
        value: {
          isDisabled
        },
        children: typeof children === 'function' ? children({
          isMenuOpen,
          triggerProps
        }) : children
      })
    })
  });
}
DropdownMenu.displayName = 'DropdownMenu';

export { DropdownMenu };
