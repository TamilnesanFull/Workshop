'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var button = require('./button-c6c568ca.cjs.prod.js');
var index = require('./index-7955fb8e.cjs.prod.js');
var tooltip = require('./tooltip-4a365d61.cjs.prod.js');
var styles = require('./styles-4d7be1cb.cjs.prod.js');
var styles$1 = require('./styles-3c34b522.cjs.prod.js');
var tw = require('./tw-9929267e.cjs.prod.js');
var jsxRuntime = require('react/jsx-runtime');
var box = require('./box-e39057bd.cjs.prod.js');
var mergeProps = require('./merge-props-60701ce8.cjs.prod.js');
var setmoreIcon = require('./setmore-icon-24e17637.cjs.prod.js');
require('./tw-merge-885aa7a8.cjs.prod.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.prod.js');
require('react');
require('@react-aria/utils');
require('./cx-86353291.cjs.prod.js');
require('clsx');
require('./merge-ids-2d47bd24.cjs.prod.js');
require('./styles-30814c9d.cjs.prod.js');

const getGetProStyles = ({
  isRounded,
  size,
  isExpanded
}) => {
  return {
    root: tw.tw`
			${styles.buttonBaseStyles}
			${getProBaseStyles}
			${getProGapStylesLookup[size]}
			${isExpanded ? styles.buttonSizeStylesLookup[size] : styles$1.iconButtonSizeStylesLookup[size]} 
			${isRounded ? `rounded-full` : `rounded-8px`}
			group/get-pro
		`,
    iconAfterAnimation: tw.tw`
			group-focus/get-pro:animate-getpro-slide-in
			group-hover/get-pro:animate-getpro-slide-in
			fill-positive
			translate-y-full
		`,
    iconBeforeAnimation: tw.tw`
			absolute 
			group-focus/get-pro:animate-getpro-slide-up
			group-hover/get-pro:animate-getpro-slide-up
			left-0 
			fill-positive
			top-0 
		`,
    iconWrapper: tw.tw`
			${isExpanded ? `-ms-1` : ``}
			leading-none
			overflow-hidden 
			relative 
		`,
    label: tw.tw``
  };
};
const getProBaseStyles = tw.tw`
		active:bg-positive-secondary-pressed
		aria-expanded:bg-positive-secondary-pressed
		bg-positive-secondary
		hover:bg-positive-secondary-hover
		text-positive-secondary
`;
const getProGapStylesLookup = {
  large: tw.tw`gap-2`,
  small: tw.tw`gap-0.5`,
  standard: tw.tw`gap-1`
};

/**
 * GetPro
 *
 * @description
 * GetPro is a visual indicator, acts as a trigger to switch to "Paid" plans.
 */

const GetPro = ({
  className = '',
  classNames = {},
  isExpanded = false,
  isRounded = false,
  label = 'Get Pro',
  size = 'standard',
  style = {},
  styles = {},
  ...consumerProps
}) => {
  const styleProps = index.getStyleProps({
    className,
    style,
    classNames,
    styles,
    tw: getGetProStyles({
      isRounded,
      size,
      isExpanded
    })
  });
  if (isExpanded) {
    return /*#__PURE__*/jsxRuntime.jsxs(box.Box, {
      as: "button",
      ...styleProps('root'),
      ...consumerProps,
      children: [/*#__PURE__*/jsxRuntime.jsxs(box.Box, {
        ...styleProps('iconWrapper'),
        children: [/*#__PURE__*/jsxRuntime.jsx(setmoreIcon.SetmoreIcon, {
          ...styleProps('iconAfterAnimation'),
          size: button.buttonSizeToIconSize[size]
        }), /*#__PURE__*/jsxRuntime.jsx(setmoreIcon.SetmoreIcon, {
          ...styleProps('iconBeforeAnimation'),
          size: button.buttonSizeToIconSize[size]
        })]
      }), /*#__PURE__*/jsxRuntime.jsx(box.Box, {
        as: "span",
        role: "text",
        ...styleProps('label'),
        children: label
      })]
    });
  }
  return /*#__PURE__*/jsxRuntime.jsx(tooltip.Tooltip, {
    content: label,
    placement: "bottom",
    children: ({
      triggerProps
    }) => {
      return /*#__PURE__*/jsxRuntime.jsx(box.Box, {
        "aria-label": label,
        as: "button",
        ...styleProps('root'),
        ...mergeProps.mergeProps(triggerProps, consumerProps),
        children: /*#__PURE__*/jsxRuntime.jsxs(box.Box, {
          ...styleProps('iconWrapper'),
          children: [/*#__PURE__*/jsxRuntime.jsx(setmoreIcon.SetmoreIcon, {
            ...styleProps('iconAfterAnimation'),
            size: button.buttonSizeToIconSize[size]
          }), /*#__PURE__*/jsxRuntime.jsx(setmoreIcon.SetmoreIcon, {
            ...styleProps('iconBeforeAnimation'),
            size: button.buttonSizeToIconSize[size]
          })]
        })
      });
    }
  });
};

exports.GetPro = GetPro;
