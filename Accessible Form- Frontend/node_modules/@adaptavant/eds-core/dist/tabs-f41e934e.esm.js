'use client';
import { useState, useCallback } from 'react';
import { TabsContextProvider } from './context-d6dd3744.esm.js';
import { b as getTabsStyles } from './styles-33ab6633.esm.js';
import { jsx } from 'react/jsx-runtime';
import { B as Box } from './box-a5dda214.esm.js';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import './tw-c6a9a210.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';

/**
 * Tabs component represents a set of tabs that allows users to switch between different content views.
 */
function Tabs({
  children,
  className = '',
  classNames = {},
  defaultValue,
  onSelectedValueChange,
  selectedValue,
  style = {},
  styles = {},
  size = 'standard',
  ...consumerProps
}) {
  const [internalSelectedValue, setInternalSelectedValue] = useState(defaultValue);
  const [selectedElement, setSelectedElement] = useState(null);
  const handleControlledAndUnControlledSelectedValueChange = useCallback(value => {
    // If defaultValue is provided, it should be treated as uncontrolled. So we should update the internal state.
    if (defaultValue) {
      setInternalSelectedValue(value);
      // If selectedValue and onSelectedValueChange are provided, it should be treated as controlled. So we should call the consumer's setter.
    } else if (selectedValue && onSelectedValueChange) {
      onSelectedValueChange(value);
    }
  }, [defaultValue, selectedValue, onSelectedValueChange]);
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getTabsStyles()
  });
  return /*#__PURE__*/jsx(TabsContextProvider, {
    value: {
      selectedValue: selectedValue || internalSelectedValue,
      onSelectedValueChange: handleControlledAndUnControlledSelectedValueChange,
      selectedElement,
      onSelectedElementChange: setSelectedElement,
      size
    },
    children: /*#__PURE__*/jsx(Box, {
      ...styleProps('root'),
      ...consumerProps,
      children: children
    })
  });
}
Tabs.displayName = 'Tabs';

export { Tabs };
