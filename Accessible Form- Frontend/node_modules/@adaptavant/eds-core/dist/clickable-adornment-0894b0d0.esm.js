'use client';
import { forwardRef } from 'react';
import { useFormControlRef } from './context-a53e025d.esm.js';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { jsx } from 'react/jsx-runtime';
import { B as Box } from './box-a5dda214.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';

const getClickableAdornmentStyles = () => ({
  root: `
			cursor-pointer
			text-tertiary
		`
});

/**
 * ClickableAdornment
 *
 * @description component to use inside of adornment slots that will focus the
 * form control when clicked.
 */
const ClickableAdornment = /*#__PURE__*/forwardRef(function ClickableAdornment({
  as = 'span',
  children,
  className = '',
  classNames = {},
  onClick,
  style = {},
  styles = {},
  ...consumerProps
}, forwardedRef) {
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getClickableAdornmentStyles()
  });
  const formControlRef = useFormControlRef();
  function handleClick(event) {
    if (onClick) {
      onClick(event);
    }
    if (!formControlRef.current) {
      throw new Error('Ref returned from useFormControlRef not attached to component');
    }
    formControlRef.current.focus();
  }
  return /*#__PURE__*/jsx(Box, {
    ...consumerProps,
    "aria-hidden": true,
    as: as,
    onClick: handleClick,
    ref: forwardedRef,
    ...styleProps('root'),
    children: children
  });
});
ClickableAdornment.displayName = 'ClickableAdornment';

export { ClickableAdornment };
