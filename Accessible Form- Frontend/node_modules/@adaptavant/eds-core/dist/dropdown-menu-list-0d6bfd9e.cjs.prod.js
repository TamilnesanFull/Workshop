'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('@react-aria/utils');
var React = require('react');
var context = require('./context-38cb595b.cjs.prod.js');
var use_cached_children = require('./use-cached-children-8f8d3c8d.cjs.prod.js');
var index = require('./index-7955fb8e.cjs.prod.js');
var forwardRef = require('./forward-ref-0e64c63e.cjs.prod.js');
var mergeProps = require('./merge-props-60701ce8.cjs.prod.js');
var styles = require('./styles-62d461f5.cjs.prod.js');
var jsxRuntime = require('react/jsx-runtime');
var box = require('./box-e39057bd.cjs.prod.js');
require('./tw-merge-885aa7a8.cjs.prod.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.prod.js');
require('./cx-86353291.cjs.prod.js');
require('clsx');
require('./merge-ids-2d47bd24.cjs.prod.js');
require('./styles-4d7be1cb.cjs.prod.js');
require('./tw-9929267e.cjs.prod.js');

const DropdownMenuList = forwardRef.forwardRefWithGenericComponent(function DropdownMenuList({
  children,
  className = '',
  classNames = {},
  options,
  style = {},
  styles: styles$1 = {},
  ...consumerProps
}, forwardedRef) {
  const {
    activeDescendantId,
    isMenuOpen,
    listId,
    triggerId
  } = context.useDropdownContext();

  // Ref to track if the component has already been initialized
  const isFirstRenderRef = React.useRef(true);

  // When the dropdown is opened, the menu list should be focused in order for
  // the keyboard navigation to work.
  const autoFocusOnOpen = React.useCallback(node => {
    if (node && isMenuOpen && isFirstRenderRef.current) {
      node.focus({
        preventScroll: true
      });
      isFirstRenderRef.current = false;
    }
  }, [isMenuOpen]);
  const {
    onKeyDown
  } = useKeydownNavigation();
  const cachedChildren = use_cached_children.useCachedChildren({
    children,
    options
  });
  const styleProps = index.getStyleProps({
    className,
    classNames,
    style,
    styles: styles$1,
    tw: styles.getDropdownMenuListStyles()
  });
  return /*#__PURE__*/jsxRuntime.jsx(box.Box, {
    ...mergeProps.mergeProps(consumerProps, {
      'aria-labelledby': triggerId
    }),
    "aria-activedescendant": activeDescendantId,
    id: listId,
    onKeyDown: onKeyDown,
    ref: utils.mergeRefs(autoFocusOnOpen, forwardedRef),
    role: "menu",
    tabIndex: -1,
    ...styleProps('root'),
    children: cachedChildren
  });
});
function useKeydownNavigation() {
  const {
    clickSelectedItem,
    closeMenu,
    goToFirstMenuItem,
    goToLastMenuItem,
    goToNextMenuItem,
    goToPreviousMenuItem,
    updateDescendantSearchTerm
  } = context.useDropdownContext();
  const onKeyDown = React.useCallback(event => {
    switch (event.code) {
      case 'ArrowUp':
        event.preventDefault();
        goToPreviousMenuItem();
        break;
      case 'ArrowDown':
        event.preventDefault();
        goToNextMenuItem();
        break;
      case 'Home':
        event.preventDefault();
        goToFirstMenuItem();
        break;
      case 'End':
        event.preventDefault();
        goToLastMenuItem();
        break;
      case 'Escape':
        event.preventDefault();
        closeMenu();
        break;
      case 'Enter':
      case 'Space':
        event.preventDefault();
        clickSelectedItem();
        break;
      case 'Tab':
        // Don't prevent default
        closeMenu();
        break;
      default:
        // If the key is a letter, update the search term
        if (/^[a-zA-Z]{1}$/.test(event.key) &&
        // Bail if the user is holding a modifier key so they can use
        // keyboard shortcuts
        !event.metaKey && !event.ctrlKey) {
          event.preventDefault();
          updateDescendantSearchTerm(event.key);
        }
    }
  }, [clickSelectedItem, closeMenu, goToFirstMenuItem, goToLastMenuItem, goToNextMenuItem, goToPreviousMenuItem, updateDescendantSearchTerm]);
  return {
    onKeyDown
  };
}

exports.DropdownMenuList = DropdownMenuList;
