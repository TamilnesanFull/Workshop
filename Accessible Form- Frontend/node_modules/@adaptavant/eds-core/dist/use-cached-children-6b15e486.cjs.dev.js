'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var emery = require('emery');
var React = require('react');

/**
 * A simplified version of `useCachedChildren` adapted from
 `react-aria-components`.
 *
 * @see https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/src/Collection.tsx#L663
 */
function useCachedChildren({
  children,
  options
}) {
  const cache = React.useMemo(() => new WeakMap(), []);
  return React.useMemo(() => {
    if (typeof children === 'function') {
      emery.assert(Array.isArray(options), 'When `children` is a function, `options` must be an array of objects.');
      const result = [];
      options.forEach(option => {
        let rendered = cache.get(option);
        if (!rendered) {
          rendered = children(option);
          const key = rendered.props.id ?? option.key ?? option.id;
          emery.assert(key != null, 'Each item must have a unique `id` or `key` property.' + 'Ensure each object passed to `options` includes one of these, ' + 'or that each child returned from the function has a unique `id` prop.');

          // Verify that the child is a valid React element before cloning
          emery.assert( /*#__PURE__*/React.isValidElement(rendered), 'The `children` function must return a valid ReactElement.');
          rendered = /*#__PURE__*/React.cloneElement(rendered, {
            key
          });
          cache.set(option, rendered);
        }
        result.push(rendered);
      });
      return result;
    } else {
      // If children is not a function, return it directly without modification
      return children;
    }
  }, [cache, children, options]);
}

exports.useCachedChildren = useCachedChildren;
