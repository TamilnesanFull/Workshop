'use client';
import { useFocusManager } from '@react-aria/focus';
import { useRef, useCallback, useEffect } from 'react';
import { useTabsContext } from './context-d6dd3744.esm.js';
import { a as getTabItemStyles } from './styles-33ab6633.esm.js';
import { jsx } from 'react/jsx-runtime';
import { m as mergeProps } from './merge-props-5c13cba9.esm.js';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import './tw-c6a9a210.esm.js';
import '@react-aria/utils';
import './cx-c5d68be6.esm.js';
import 'clsx';
import './merge-ids-c2d2d3d7.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';

/**
 * Represents an individual tab item within the tabs component
 */
function TabItem({
  children,
  className = '',
  classNames = {},
  disabled,
  style = {},
  styles = {},
  value,
  ...consumerProps
}) {
  const {
    size
  } = useTabsContext();
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getTabItemStyles({
      size
    })
  });
  const isMounted = useRef(false);
  const tabItemRef = useRef(null);
  const focusManager = useFocusManager();
  const {
    selectedValue,
    onSelectedValueChange,
    tabItemA11yProps,
    onSelectedElementChange
  } = useTabsContext(value, disabled);
  const onKeyDown = e => {
    switch (e.key) {
      case 'ArrowRight':
        focusManager.focusNext({
          wrap: true
        });
        break;
      case 'ArrowLeft':
        focusManager.focusPrevious({
          wrap: true
        });
        break;
    }
  };
  const scrollIntoView = useCallback(node => {
    if (node && selectedValue === value) {
      node.scrollIntoView({
        inline: 'center',
        block: 'nearest',
        behavior: 'smooth'
      });
    }
  }, [selectedValue, value]);
  useEffect(() => {
    if (selectedValue === value && onSelectedElementChange) {
      onSelectedElementChange(tabItemRef.current);
    }
  }, [onSelectedElementChange, selectedValue, value]);

  // Bypass the scrollIntoView on initial hydration using isMounted ref.
  useEffect(() => {
    if (isMounted.current) {
      scrollIntoView(tabItemRef.current);
    }
    isMounted.current = true;
  }, [scrollIntoView]);
  return /*#__PURE__*/jsx("button", {
    ...mergeProps(consumerProps, tabItemA11yProps),
    onClick: () => {
      onSelectedValueChange && onSelectedValueChange(value);
    },
    onKeyDown: onKeyDown,
    ref: tabItemRef,
    ...styleProps('root'),
    tabIndex: selectedValue === value ? 0 : -1 // Tabindex for tab item is handled from the component instead of the context (tabItemAllyProps), as we don't  want to restrict the tabbing when used as a custom component
    ,
    children: children
  });
}
TabItem.displayName = 'TabItem';

export { TabItem };
