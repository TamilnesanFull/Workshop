'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('@react-aria/utils');
var React = require('react');
var tw = require('./tw-9929267e.cjs.prod.js');
var styles = require('./styles-3786e407.cjs.prod.js');
var jsxRuntime = require('react/jsx-runtime');
var box = require('./box-e39057bd.cjs.prod.js');
var context = require('./context-008fcad0.cjs.prod.js');
var focus_container = require('./focus-container-be948f3e.cjs.prod.js');
require('./index-7955fb8e.cjs.prod.js');
require('./tw-merge-885aa7a8.cjs.prod.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.prod.js');

const getTextareaStyles = ({
  size,
  isDisabled
}) => ({
  root: tw.tw`
		${textareaPaddingStylesLookup['withoutAdornment'][size]}
		${styles.typography[size]}
		${isDisabled ? 'cursor-default' : ''}
		aria-disabled:text-disabled-secondary
		aria-disabled:placeholder:text-disabled
		flex
		placeholder:text-secondary
		resize-none
		scroll-pb-2
		text-primary
		w-full
	`
});
const textareaPaddingStylesLookup = {
  withAdornment: {
    standard: tw.tw`p-1.5`,
    large: tw.tw`p-2`
  },
  withoutAdornment: {
    standard: tw.tw`p-2`,
    large: tw.tw`p-3`
  }
};

/**
 * Textarea
 *
 * @description Textarea lets the user input multi-line plain-text.
 */

const Textarea = /*#__PURE__*/React.forwardRef(function Textarea({
  className = '',
  classNames = {},
  rows = 3,
  style = {},
  styles = {},
  onKeyDown,
  ...consumerProps
}, forwardedRef) {
  const {
    isDisabled,
    isInvalid,
    isRequired,
    size,
    variant
  } = context.useFieldContext();
  const a11yProps = context.useInputA11yProps({
    isDisabled,
    isInvalid,
    isRequired
  });
  const styleProps = focus_container.useCombinedFocusContainerInputStyles({
    className,
    classNames,
    isDisabled,
    isInvalid,
    style,
    styles,
    tw: getTextareaStyles({
      isInvalid,
      size,
      isDisabled
    })
  });
  const handleKeyDown = React.useCallback(event => {
    if (isDisabled && event.key !== 'Tab') {
      event.preventDefault();
      return;
    }
    onKeyDown === null || onKeyDown === void 0 || onKeyDown(event);
  }, [isDisabled, onKeyDown]);
  return /*#__PURE__*/jsxRuntime.jsx(focus_container.FocusContainer, {
    classNames: {
      focusIndicator: {
        ...styleProps('focusIndicator')
      }.className
    },
    isDisabled: isDisabled,
    isGhost: variant === 'subtle',
    isInvalid: isInvalid,
    styles: {
      focusIndicator: {
        ...styleProps('focusIndicator').style
      }
    },
    children: ({
      ref
    }) => /*#__PURE__*/jsxRuntime.jsx(box.Box, {
      ...a11yProps,
      ...consumerProps,
      as: "textarea",
      autoComplete: isDisabled ? 'off' : undefined,
      onKeyDown: handleKeyDown,
      ref: utils.mergeRefs(ref, forwardedRef),
      rows: rows,
      ...styleProps('root')
    })
  });
});
Textarea.displayName = 'Textarea';

exports.Textarea = Textarea;
