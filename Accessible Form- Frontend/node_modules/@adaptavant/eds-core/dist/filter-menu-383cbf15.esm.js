'use client';
import { DropdownProvider } from './context-6e374e37.esm.js';
import { useDropdownContextValues } from './use-dropdown-context-values-349b04a0.esm.js';
import { usePopulateDescendantNodes } from './use-populate-descendant-nodes-9523f130.esm.js';
import { useFilterMenuTriggerProps } from './filter-menu-trigger-26b9e1d5.esm.js';
import { jsx } from 'react/jsx-runtime';

function FilterMenu({
  children,
  popoverMatchReferenceWidth = false,
  popoverMaxHeight = 356,
  popoverMaxWidth = 400,
  popoverOffset = 4,
  popoverPlacement = 'bottom-start',
  strategy = 'absolute'
}) {
  const dropdownContext = useDropdownContextValues({
    popoverMatchReferenceWidth,
    popoverMaxHeight,
    popoverMaxWidth,
    popoverOffset,
    popoverPlacement,
    strategy
  });
  const {
    isMenuOpen,
    dispatch,
    popover
  } = dropdownContext;
  const {
    triggerProps
  } = useFilterMenuTriggerProps(dropdownContext);
  const descendantNodeSelector = '[role="option"]';
  usePopulateDescendantNodes({
    isMenuOpen,
    children,
    dispatch,
    popoverRef: popover.popoverRef,
    selectors: descendantNodeSelector
  });
  return /*#__PURE__*/jsx(DropdownProvider, {
    value: dropdownContext,
    children: typeof children === 'function' ? children({
      isMenuOpen,
      triggerProps
    }) : children
  });
}
FilterMenu.displayName = 'FilterMenu';

export { FilterMenu };
