'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('@react-aria/utils');
var React = require('react');
var dropdownDownIcon = require('./dropdown-down-icon-e861b656.cjs.dev.js');
var dropdownUpIcon = require('./dropdown-up-icon-9612d99c.cjs.dev.js');
var context = require('./context-1e651be3.cjs.dev.js');
var index = require('./index-3bdbdb42.cjs.dev.js');
var mergeProps = require('./merge-props-74bd38ff.cjs.dev.js');
var context$1 = require('./context-f2e4ca6a.cjs.dev.js');
var styles = require('./styles-c7c13eb4.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
var button = require('./button-4b229f71.cjs.dev.js');
require('./styles-32c512c4.cjs.dev.js');
require('./tw-cabb7e4c.cjs.dev.js');
require('./tw-merge-70bc959c.cjs.dev.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.dev.js');
require('./cx-26784cbb.cjs.dev.js');
require('clsx');
require('./merge-ids-b19ec20e.cjs.dev.js');
require('./styles-554c7d0d.cjs.dev.js');

const DropdownMenuTrigger = /*#__PURE__*/React.forwardRef(function DropdownMenuTrigger({
  className = '',
  classNames = {},
  iconEnd,
  size = 'standard',
  style = {},
  styles: styles$1 = {},
  variant = 'neutralSecondary',
  ...consumerProps
}, forwardedRef) {
  const context$2 = context.useDropdownContext();
  const {
    isDisabled
  } = context$1.useDropdownMenu();
  const {
    triggerProps
  } = useDropdownMenuTriggerProps(context$2, isDisabled);
  const defaultIconEnd = context$2.isMenuOpen ? dropdownUpIcon.DropdownUpIcon : dropdownDownIcon.DropdownDownIcon;
  const styleProps = index.getStyleProps({
    className,
    classNames,
    style,
    styles: styles$1,
    tw: styles.getDropdownMenuTriggerStyles({
      size,
      variant
    })
  });
  return /*#__PURE__*/jsxRuntime.jsx(button.Button, {
    ...mergeProps.mergeProps(consumerProps, triggerProps),
    iconEnd: iconEnd ? iconEnd : defaultIconEnd,
    isDisabled: isDisabled,
    ref: utils.mergeRefs(triggerProps.ref, forwardedRef),
    size: size,
    variant: variant,
    ...styleProps('root')
  });
});
DropdownMenuTrigger.displayName = 'DropdownMenuTrigger';
function useDropdownMenuTriggerProps({
  descendantNodes,
  goToFirstMenuItem,
  goToLastMenuItem,
  isMenuOpen,
  listId,
  openMenu,
  popover,
  toggleMenu,
  triggerId
}, isDisabled) {
  const [lastKeyPressed, setLastKeyPressed] = React.useState();
  React.useEffect(() => {
    if (!isMenuOpen || !descendantNodes || !lastKeyPressed) return;
    if (lastKeyPressed === 'ArrowUp') {
      goToLastMenuItem();
    } else {
      goToFirstMenuItem();
    }
    setLastKeyPressed(undefined);
  }, [descendantNodes, goToFirstMenuItem, goToLastMenuItem, isMenuOpen, lastKeyPressed]);
  const onKeyDown = React.useCallback(event => {
    if (!supportedKeys.includes(event.code)) return;
    event.preventDefault();
    setLastKeyPressed(event.code);
    openMenu();
  }, [openMenu]);
  return {
    triggerProps: {
      ...popover.getReferenceProps(),
      'aria-controls': listId,
      'aria-expanded': isMenuOpen,
      'aria-haspopup': true,
      'aria-disabled': isDisabled || undefined,
      id: triggerId,
      onClick: isDisabled ? undefined : toggleMenu,
      onKeyDown: isDisabled ? undefined : onKeyDown
    }
  };
}
const supportedKeys = ['ArrowDown', 'ArrowUp', 'Enter', 'Space'];

exports.DropdownMenuTrigger = DropdownMenuTrigger;
exports.useDropdownMenuTriggerProps = useDropdownMenuTriggerProps;
