'use client';
import { mergeRefs } from '@react-aria/utils';
import { forwardRef, useCallback } from 'react';
import { t as tw } from './tw-c6a9a210.esm.js';
import { t as typography } from './styles-267c9284.esm.js';
import { jsx } from 'react/jsx-runtime';
import { B as Box } from './box-a5dda214.esm.js';
import { useFieldContext, useInputA11yProps } from './context-2a1498a6.esm.js';
import { useCombinedFocusContainerInputStyles, FocusContainer } from './focus-container-9b45fd51.esm.js';
import './index-dd10a77e.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';

const getTextareaStyles = ({
  size,
  isDisabled
}) => ({
  root: tw`
		${textareaPaddingStylesLookup['withoutAdornment'][size]}
		${typography[size]}
		${isDisabled ? 'cursor-default' : ''}
		aria-disabled:text-disabled-secondary
		aria-disabled:placeholder:text-disabled
		flex
		placeholder:text-secondary
		resize-none
		scroll-pb-2
		text-primary
		w-full
	`
});
const textareaPaddingStylesLookup = {
  withAdornment: {
    standard: tw`p-1.5`,
    large: tw`p-2`
  },
  withoutAdornment: {
    standard: tw`p-2`,
    large: tw`p-3`
  }
};

/**
 * Textarea
 *
 * @description Textarea lets the user input multi-line plain-text.
 */

const Textarea = /*#__PURE__*/forwardRef(function Textarea({
  className = '',
  classNames = {},
  rows = 3,
  style = {},
  styles = {},
  onKeyDown,
  ...consumerProps
}, forwardedRef) {
  const {
    isDisabled,
    isInvalid,
    isRequired,
    size,
    variant
  } = useFieldContext();
  const a11yProps = useInputA11yProps({
    isDisabled,
    isInvalid,
    isRequired
  });
  const styleProps = useCombinedFocusContainerInputStyles({
    className,
    classNames,
    isDisabled,
    isInvalid,
    style,
    styles,
    tw: getTextareaStyles({
      isInvalid,
      size,
      isDisabled
    })
  });
  const handleKeyDown = useCallback(event => {
    if (isDisabled && event.key !== 'Tab') {
      event.preventDefault();
      return;
    }
    onKeyDown === null || onKeyDown === void 0 || onKeyDown(event);
  }, [isDisabled, onKeyDown]);
  return /*#__PURE__*/jsx(FocusContainer, {
    classNames: {
      focusIndicator: {
        ...styleProps('focusIndicator')
      }.className
    },
    isDisabled: isDisabled,
    isGhost: variant === 'subtle',
    isInvalid: isInvalid,
    styles: {
      focusIndicator: {
        ...styleProps('focusIndicator').style
      }
    },
    children: ({
      ref
    }) => /*#__PURE__*/jsx(Box, {
      ...a11yProps,
      ...consumerProps,
      as: "textarea",
      autoComplete: isDisabled ? 'off' : undefined,
      onKeyDown: handleKeyDown,
      ref: mergeRefs(ref, forwardedRef),
      rows: rows,
      ...styleProps('root')
    })
  });
});
Textarea.displayName = 'Textarea';

export { Textarea };
