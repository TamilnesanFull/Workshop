'use client';
import { Children } from 'react';
import { M as MOBILE_TOGGLE_POINT } from './utils-0956ef0f.esm.js';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { useIsViewportBelowOrEqual } from './use-viewport-below-or-equal-b1c12ed0.esm.js';
import { D as DialogContent, a as DialogFooter, b as DialogHeader } from './dialog-header-3dfee2e0.esm.js';
import { v as validateChildren } from './utils-c98f0558.esm.js';
import { ModalProvider, useModalContext } from './context-c7a64b19.esm.js';
import { t as tw } from './tw-c6a9a210.esm.js';
import { jsx } from 'react/jsx-runtime';
import { Sheet } from './sheet-d2ba52fa.esm.js';
import { Dialog } from './dialog-8a157f47.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './styles-015cb1bf.esm.js';
import './box-a5dda214.esm.js';
import './icon-button-c905d5af.esm.js';
import './button-22306f71.esm.js';
import './use-button-36a8da62.esm.js';
import './styles-6927e7c9.esm.js';
import './styles-56e113a0.esm.js';
import './loading-7c0b35b6.esm.js';
import './grow-your-brand-icon-b4a6e8da.esm.js';
import './styles-53001919.esm.js';
import './setmore-icon-0a46ffb4.esm.js';
import './translations-1012abc4.esm.js';
import './config-e49cd2d8.esm.js';
import './remove-icon-2073e50f.esm.js';

// ------------------------------ Modal Wrapper ---------------------------------------

const getModalStyles = () => ({
  modalWrapper: tw``,
  root: tw``
});

/**
 * Modal
 *
 * @description
 * A modal component that prevents interaction with the rest of the application.
 * Modal component renders its children (ModalTitle, ModalContent, ModalFooter) nodes in front of a backdrop component.
 * Offers important features:
 * - It properly manages focus; moves inside modal, and keeping it there until the modal is closed.
 * - It disables scrolling of the page content while open.
 * - It render with Portal by default to avoid Stacking issues.
 * - Ensure Modal never touch edge of screen (16px space is reserved).
 * - Manages the appropriate ARIA roles.
 * - Creates a backdrop, for disabling interaction below the modal.
 */

function Modal({
  children,
  className = '',
  classNames = {},
  mobileFriendly = true,
  size = 640,
  style = {},
  styles = {},
  togglePoint = MOBILE_TOGGLE_POINT,
  ...consumerProps
}) {
  const isResponsiveViewport = useIsViewportBelowOrEqual(togglePoint);
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getModalStyles()
  });
  validateChildren(Children.toArray(children), [ModalHeader, ModalContent, ModalFooter]);
  const shouldUseSheet = mobileFriendly && isResponsiveViewport;
  return /*#__PURE__*/jsx(ModalProvider, {
    value: {
      mobileFriendly,
      togglePoint
    },
    children: shouldUseSheet ? /*#__PURE__*/jsx(Sheet, {
      ...consumerProps,
      classNames: {
        sheetWrapper: styleProps('modalWrapper').className
      },
      ...styleProps('root'),
      children: children
    }) : /*#__PURE__*/jsx(Dialog, {
      ...consumerProps,
      classNames: {
        dialogWrapper: styleProps('modalWrapper').className
      },
      ...styleProps('root'),
      style: {
        ...style,
        width: `${size}px`
      } // Override width with size prop
      ,
      children: children
    })
  });
}
Modal.displayName = 'Modal';
const ModalContent = DialogContent;
ModalContent.displayName = 'ModalContent';
const ModalFooter = DialogFooter;
ModalFooter.displayName = 'ModalFooter';
function ModalHeader({
  children,
  closeButtonProps,
  ...consumerProps
}) {
  const {
    mobileFriendly,
    togglePoint
  } = useModalContext();
  const isResponsiveViewport = useIsViewportBelowOrEqual(togglePoint);
  const updatedCloseButtonProps = mobileFriendly && isResponsiveViewport ? closeButtonProps ? {
    ...closeButtonProps,
    size: 'large'
  } : undefined : closeButtonProps;
  return /*#__PURE__*/jsx(DialogHeader, {
    ...consumerProps,
    closeButtonProps: updatedCloseButtonProps,
    children: children
  });
}
ModalHeader.displayName = 'ModalHeader';

export { Modal, ModalContent, ModalFooter, ModalHeader };
