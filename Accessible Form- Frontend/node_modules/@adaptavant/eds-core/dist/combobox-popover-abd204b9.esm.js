'use client';
import { mergeRefs } from '@react-aria/utils';
import { forwardRef, useCallback, useMemo } from 'react';
import { useDropdownContext } from './context-6e374e37.esm.js';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { v as visuallyHiddenStyles } from './visually-hidden-60af4b9e.esm.js';
import { useClickAway } from './use-click-away-a74e18f7.esm.js';
import { jsx } from 'react/jsx-runtime';
import { Popover } from './popover-55e45b10.esm.js';
import { useFieldContext } from './context-2a1498a6.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';

const ComboboxPopover = /*#__PURE__*/forwardRef(function ComboboxPopover(props, forwardedRef) {
  const {
    popoverProps
  } = useComboboxPopover(props, forwardedRef);
  return /*#__PURE__*/jsx(Popover, {
    ...popoverProps
  });
});
ComboboxPopover.displayName = 'ComboboxPopover';
function useComboboxPopover({
  children,
  className = '',
  classNames = {},
  shouldUsePortal = true,
  style = {},
  styles = {},
  ...consumerProps
}, forwardedRef) {
  const {
    closeMenu,
    isMenuOpen,
    popover,
    popoverId
  } = useDropdownContext();
  const {
    labelRef
  } = useFieldContext();

  // When the dropdown is opened, clicking outside should close it
  const handleClickOutside = useCallback(() => {
    if (isMenuOpen) closeMenu();
  }, [closeMenu, isMenuOpen]);
  const {
    popoverRef,
    referenceRef,
    getPopoverProps
  } = popover;
  const popoverProps = useMemo(() => getPopoverProps(), [getPopoverProps]);
  const memoizedRefs = useMemo(() => [labelRef, popoverRef, referenceRef], [labelRef, popoverRef, referenceRef]);
  useClickAway({
    refs: memoizedRefs,
    onClickAway: handleClickOutside
  });
  const styleProps = useMemo(() => getStyleProps({
    className,
    classNames,
    style,
    styles
  }), [className, classNames, style, styles]);
  return {
    popoverProps: useMemo(() => {
      return {
        ...consumerProps,
        children: isMenuOpen ? children : null,
        id: popoverId,
        ref: mergeRefs(forwardedRef, popoverProps.ref),
        role: 'presentation',
        shouldUsePortal,
        ...styleProps('root',
        // Only apply styles when the menu is open, otherwise hide it
        isMenuOpen ? popoverProps.style : visuallyHiddenStyles)
      };
    }, [children, consumerProps, forwardedRef, isMenuOpen, popoverId, popoverProps.ref, popoverProps.style, shouldUsePortal, styleProps])
  };
}

export { ComboboxPopover, useComboboxPopover };
