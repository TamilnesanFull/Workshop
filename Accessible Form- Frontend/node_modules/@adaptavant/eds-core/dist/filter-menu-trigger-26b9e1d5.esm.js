'use client';
import { mergeRefs } from '@react-aria/utils';
import { useId, useCallback, Fragment, useState, useEffect } from 'react';
import { useDropdownContext } from './context-6e374e37.esm.js';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { a as forwardRefWithGenericComponent } from './forward-ref-a0e1d5d1.esm.js';
import { m as mergeProps } from './merge-props-5c13cba9.esm.js';
import { a as getFilterMenuTriggerStyles } from './styles-56119827.esm.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { D as DropdownUpIcon } from './dropdown-up-icon-07da5d49.esm.js';
import { D as DropdownDownIcon } from './dropdown-down-icon-372942b0.esm.js';
import { B as Box } from './box-a5dda214.esm.js';
import { useFieldContext, useInputA11yProps } from './context-2a1498a6.esm.js';
import { FocusContainer } from './focus-container-9b45fd51.esm.js';
import { Button } from './button-22306f71.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './cx-c5d68be6.esm.js';
import 'clsx';
import './merge-ids-c2d2d3d7.esm.js';
import './styles-267c9284.esm.js';
import './tw-c6a9a210.esm.js';
import './styles-53001919.esm.js';

const FilterMenuTrigger = forwardRefWithGenericComponent(function FilterMenuTrigger({
  children,
  className = '',
  classNames = {},
  iconEnd,
  placeholder,
  style = {},
  styles = {},
  ...consumerProps
}, forwardedRef) {
  const {
    isDisabled,
    isInvalid,
    size,
    variant
  } = useFieldContext();
  const context = useDropdownContext();
  const {
    triggerProps
  } = useFilterMenuTriggerProps(context);
  const contentLabel = useId();
  const defaultIconEnd = context.isMenuOpen ? DropdownUpIcon : DropdownDownIcon;
  const ChildrenOrPlaceholder = useCallback(() => {
    if (children) return children;
    return (
      /*#__PURE__*/
      // We want to inherit the font size here, so we're using Box
      // instead of Text, as Text comes with a default font size.
      jsx(Box, {
        as: "span",
        className: "text-secondary group-aria-disabled:text-disabled",
        children: placeholder
      })
    );
  }, [children, placeholder]);
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getFilterMenuTriggerStyles({
      size
    })
  });
  const rootStyles = styleProps('root');
  const labelStyles = styleProps('label');
  const labelTrackStyles = styleProps('labelTrack');
  const chevronStyles = styleProps('chevron');
  const triggerStyleProps = {
    ...rootStyles,
    classNames: {
      iconEnd: chevronStyles.className,
      label: labelStyles.className,
      labelTrack: labelTrackStyles.className
    },
    styles: {
      iconEnd: chevronStyles.style,
      label: labelStyles.style,
      labelTrack: labelTrackStyles.style
    }
  };
  return /*#__PURE__*/jsx(FocusContainer, {
    isDisabled: isDisabled,
    isGhost: variant === 'subtle',
    isInvalid: isInvalid,
    ...styleProps('focusContainer'),
    classNames: {
      focusIndicator: {
        ...styleProps('focusIndicator')
      }.className
    },
    styles: {
      focusIndicator: {
        ...styleProps('focusIndicator').style
      }
    },
    children: () => /*#__PURE__*/jsxs(Fragment, {
      children: [/*#__PURE__*/jsxs(Box, {
        as: "span",
        className: "sr-only",
        id: contentLabel,
        children: [', ', /*#__PURE__*/jsx(ChildrenOrPlaceholder, {})]
      }), /*#__PURE__*/jsx(Button, {
        ...mergeProps(consumerProps, triggerProps, {
          /*
           * Although `triggerProps` includes `aria-labelledby`, we must
           * append `contentLabel` from this component, not present in
           * `triggerProps`. `mergeProps` automatically combines
           * `aria-labelledby` attributes for us.
           */
          'aria-labelledby': contentLabel
        }),
        iconEnd: iconEnd ? iconEnd : defaultIconEnd,
        isDisabled: isDisabled,
        ref: mergeRefs(triggerProps.ref, forwardedRef),
        size: size,
        variant: "neutralSecondary",
        ...triggerStyleProps,
        children: /*#__PURE__*/jsx(ChildrenOrPlaceholder, {})
      })]
    })
  });
});
function useFilterMenuTriggerProps({
  descendantNodes,
  goToFirstMenuItem,
  goToLastMenuItem,
  isMenuOpen,
  openMenu,
  popover,
  popoverId,
  toggleMenu,
  triggerId
}) {
  const {
    isDisabled,
    isInvalid,
    isRequired,
    labelId
  } = useFieldContext();
  const a11yProps = useInputA11yProps({
    id: triggerId,
    isDisabled,
    isInvalid,
    isRequired
  });
  const [lastKeyPressed, setLastKeyPressed] = useState();
  useEffect(() => {
    if (!isMenuOpen || !descendantNodes || !lastKeyPressed) return;
    if (lastKeyPressed === 'ArrowUp') {
      goToLastMenuItem();
    } else {
      goToFirstMenuItem();
    }
    setLastKeyPressed(undefined);
  }, [descendantNodes, goToFirstMenuItem, goToLastMenuItem, isMenuOpen, lastKeyPressed]);
  const onKeyDown = useCallback(event => {
    if (!supportedKeys.includes(event.code)) return;
    event.preventDefault();
    setLastKeyPressed(event.code);
    openMenu();
  }, [openMenu]);
  return {
    triggerProps: {
      ...popover.getReferenceProps(),
      ...a11yProps,
      'aria-controls': popoverId,
      'aria-expanded': isMenuOpen,
      'aria-haspopup': 'listbox',
      'aria-labelledby': labelId,
      onClick: isDisabled ? undefined : toggleMenu,
      onKeyDown: isDisabled ? undefined : onKeyDown
    }
  };
}
const supportedKeys = ['ArrowDown', 'ArrowUp', 'Enter', 'Space'];

export { FilterMenuTrigger, useFilterMenuTriggerProps };
