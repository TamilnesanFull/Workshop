'use strict';

var React = require('react');
var index = require('./index-3bdbdb42.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');

const getTextStyles = ({
  fontWeight,
  lineClamp,
  tabularNumbers,
  textAlign,
  textTransform,
  tone,
  typography
}) => ({
  root: `
		${fontWeight ? fontWeightMap[fontWeight] : ''}
		${lineClamp ? lineClampMap[lineClamp === true ? '1' : lineClamp] : ''}
		${tabularNumbers ? 'tabular-nums' : ''}
		${textAlign ? textAlignMap[textAlign] : ''}
		${textTransform ? textTransformMap[textTransform] : ''}
		${tone ? toneMap[tone] : ''}
		${typography ? typographyMap[typography] : ''}
		where:block
	`
});
const fontWeightMap = {
  regular: 'font-regular',
  strong: 'font-strong',
  stronger: 'font-stronger'
};
const lineClampMap = {
  '1': 'line-clamp-1',
  '2': 'line-clamp-2',
  '3': 'line-clamp-3',
  '4': 'line-clamp-4'
};
const textAlignMap = {
  start: 'text-start',
  center: 'text-center',
  end: 'text-end'
};
const toneMap = {
  accent: 'text-accent',
  'accent-hover': 'text-accent-hover',
  'accent-pressed': 'text-accent-pressed',
  caution: 'text-caution',
  'caution-secondary': 'text-caution-secondary',
  critical: 'text-critical',
  'critical-onPrimary': 'text-critical-onPrimary',
  'critical-secondary': 'text-critical-secondary',
  disabled: 'text-disabled',
  'disabled-secondary': 'text-disabled-secondary',
  inverse: 'text-inverse',
  'inverse-accent': 'text-inverse-accent',
  'inverse-caution': 'text-inverse-caution',
  'inverse-critical': 'text-inverse-critical',
  'inverse-positive': 'text-inverse-positive',
  'inverse-secondary': 'text-inverse-secondary',
  link: 'text-link',
  'link-hover': 'text-link-hover',
  'link-pressed': 'text-link-pressed',
  onPrimary: 'text-onPrimary',
  'onPrimary-disabled': 'text-onPrimary-disabled',
  positive: 'text-positive',
  'positive-secondary': 'text-positive-secondary',
  primary: 'text-primary',
  secondary: 'text-secondary',
  'secondary-hover': 'text-secondary-hover',
  tertiary: 'text-tertiary'
};
const textTransformMap = {
  capitalize: 'capitalize',
  lowercase: 'lowercase',
  none: 'normal-case',
  uppercase: 'uppercase'
};
const typographyMap = {
  'body.1': 'text-body-20',
  'body.2': 'text-body-16',
  'body.3': 'text-body-14',
  'body.4': 'text-body-12',
  'body.5': 'text-body-10',
  'body.6': 'text-body-8',
  'heading.1': 'text-heading-32',
  'heading.2': 'text-heading-28',
  'heading.3': 'text-heading-24',
  'heading.4': 'text-heading-18',
  'heading.5': 'text-heading-16',
  'heading.6': 'text-heading-14'
};

/**
 * Text
 *
 * @description
 * A primitive typographic component for constrained text styles.
 */

const Text = /*#__PURE__*/React.forwardRef(function Text({
  as,
  className = '',
  classNames = {},
  fontWeight,
  lineClamp,
  style = {},
  styles = {},
  tabularNumbers,
  textAlign,
  textTransform,
  tone,
  typography = 'body.2',
  ...consumerProps
}, forwardedRef) {
  const styleProps = index.getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getTextStyles({
      fontWeight,
      lineClamp,
      tabularNumbers,
      textAlign,
      textTransform,
      tone,
      typography
    })
  });
  const RootEl = as || 'span';
  return /*#__PURE__*/jsxRuntime.jsx(RootEl, {
    ...consumerProps,
    ref: forwardedRef,
    ...styleProps('root'),
    "data-eds-component": true
  });
});
Text.displayName = 'Text';

exports.Text = Text;
