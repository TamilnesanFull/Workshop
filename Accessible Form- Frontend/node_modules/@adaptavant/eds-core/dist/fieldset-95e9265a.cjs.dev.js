'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var index = require('./index-3bdbdb42.cjs.dev.js');
var composeId = require('./compose-id-8f0cde18.cjs.dev.js');
var use_provided_or_generated_id = require('./use-provided-or-generated-id-2bfa8150.cjs.dev.js');
var context = require('./context-9bdca1e6.cjs.dev.js');
var tw = require('./tw-cabb7e4c.cjs.dev.js');
var styles = require('./styles-3e350289.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
var stack = require('./stack-b8f38fa7.cjs.dev.js');
var text = require('./text-b4d8b4ef.cjs.dev.js');
var box = require('./box-88b49271.cjs.dev.js');
var fieldErrorMessage = require('./field-error-message-009c1fca.cjs.dev.js');
require('./tw-merge-70bc959c.cjs.dev.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.dev.js');
require('./error-icon-e17bfc88.cjs.dev.js');
require('./styles-32c512c4.cjs.dev.js');
require('./track-1da464e0.cjs.dev.js');
require('./align-child-to-text-b4992541.cjs.dev.js');

const getFieldsetStyles = ({
  isDisabled,
  orientation
}) => ({
  root: tw.tw`
		${verticalSpaceClasses.gap}
		items-stretch
		text-primary
	`,
  description: tw.tw`
		${isDisabled ? 'text-disabled' : 'text-secondary'}
		${styles.typography['large']}
		`,
  legend: tw.tw`
		${isDisabled ? 'text-disabled' : ''}
		${styles.typography['large']}
		${verticalSpaceClasses.marginBottom}
		font-strong
	`,
  wrapper: tw.tw`
		${orientation === 'horizontal' ? 'flex-row' : 'flex-col'}
		${verticalSpaceClasses.gap}
		flex
		flex-wrap
		gap-x-4
		items-start
	`,
  errorTrack: tw.tw`
		w-full
	`,
  errorIcon: tw.tw``,
  errorMessage: tw.tw`
		${styles.typography['large']}
	`
});

/**
 * The `<legend>` element doesn't participate in `<fieldset>`â€™s flex layout,
 * so we need to use margin instead to create vertical space between the legend
 * and the wrapper.
 * These classes are grouped together in an object to ensure they're always
 * using the same vertical space.
 */
const verticalSpaceClasses = {
  gap: tw.tw`gap-y-2`,
  marginBottom: tw.tw`mb-2`
};

/**
 * Fieldset
 *
 * @description Used to group a set of checkboxes or radio buttons.
 */

const Fieldset = /*#__PURE__*/React.forwardRef(function Fieldset({
  children,
  className = '',
  classNames = {},
  description,
  errorMessage,
  id: idProp,
  isDisabled = false,
  /**
   * @todo we should add some text or an asterisk (that can be overridden) to
   * indicate when a Fieldset is required.
   */
  isRequired = false,
  legend,
  orientation = 'vertical',
  style = {},
  styles = {},
  ...consumerProps
}, forwardedRef) {
  const isInvalid = Boolean(errorMessage);
  const {
    descriptionId,
    errorMessageId,
    fieldsetId,
    labelId
  } = useFieldsetIds(idProp);
  const parts = index.useComponentStyleParts({
    className,
    classNames,
    style,
    styles,
    tw: getFieldsetStyles({
      isDisabled,
      isInvalid,
      orientation
    })
  }, ['root', 'description', 'legend', 'errorMessage', 'errorTrack', 'errorIcon', 'errorMessage', 'wrapper']);
  const fieldErrorMessageStyleProps = {
    ...parts.errorTrack,
    classNames: {
      errorIcon: parts.errorIcon.className,
      errorMessage: parts.errorMessage.className
    },
    styles: {
      errorIcon: parts.errorIcon.style,
      errorMessage: parts.errorMessage.style
    }
  };
  return /*#__PURE__*/jsxRuntime.jsx(context.FieldsetContextProvider, {
    value: {
      description,
      descriptionId,
      isDisabled,
      isInvalid,
      isRequired,
      errorMessage,
      errorMessageId
    },
    children: /*#__PURE__*/jsxRuntime.jsxs(stack.Stack, {
      ...consumerProps,
      as: "fieldset",
      id: fieldsetId,
      ref: forwardedRef,
      ...parts.root,
      children: [/*#__PURE__*/jsxRuntime.jsx(text.Text, {
        as: "legend",
        id: labelId,
        ...parts.legend,
        children: legend
      }), description ? /*#__PURE__*/jsxRuntime.jsx(text.Text, {
        id: descriptionId,
        ...parts.description,
        children: description
      }) : null, /*#__PURE__*/jsxRuntime.jsxs(box.Box, {
        ...parts.wrapper,
        children: [children, errorMessage ? /*#__PURE__*/jsxRuntime.jsx(fieldErrorMessage.FieldErrorMessage, {
          id: errorMessageId,
          isDisabled: isDisabled,
          size: "standard",
          ...fieldErrorMessageStyleProps,
          children: errorMessage
        }) : null]
      })]
    })
  });
});
Fieldset.displayName = 'Fieldset';

/**
 * useFieldsetIds
 *
 * @description generates unique ids for the subcomponents of the control group.
 */
function useFieldsetIds(idProp) {
  const id = use_provided_or_generated_id.useProvidedOrGeneratedId(idProp);
  return {
    fieldsetId: id,
    descriptionId: composeId.composeId(id, 'description'),
    labelId: composeId.composeId(id, 'label'),
    errorMessageId: composeId.composeId(id, 'error-message')
  };
}

exports.Fieldset = Fieldset;
