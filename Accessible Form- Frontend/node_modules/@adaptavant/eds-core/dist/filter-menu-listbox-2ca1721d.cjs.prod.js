'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var context = require('./context-38cb595b.cjs.prod.js');
var forwardRef = require('./forward-ref-0e64c63e.cjs.prod.js');
var combobox_listbox = require('./combobox-listbox-5f139b72.cjs.prod.js');
var jsxRuntime = require('react/jsx-runtime');
var listbox = require('./listbox-98182f67.cjs.prod.js');

const FilterMenuListbox = forwardRef.forwardRefWithGenericComponent(function FilterMenuListbox(props, forwardedRef) {
  const {
    listboxProps,
    noResultsFallback
  } = combobox_listbox.useComboboxListbox(props, forwardedRef);
  const {
    descendantNodes,
    dispatch,
    isMenuOpen
  } = context.useDropdownContext();

  // Ref to track if the component has already been initialized
  const isFirstRenderRef = React.useRef(true);

  /**
   * Sets the active descendant in the dropdown when the menu is open.
   * Finds the selected option within the popover and dispatches an action
   * to update the context with the index and ID of the active option.
   */
  React.useEffect(() => {
    if (!isMenuOpen || !descendantNodes || !isFirstRenderRef.current) {
      return;
    }
    const options = Array.from(descendantNodes);
    const activeOption = options.find(option => option.getAttribute('aria-selected') === 'true');
    if (activeOption) {
      dispatch({
        type: 'SET_ACTIVE_DESCENDANT_INDEX',
        payload: {
          activeIndex: options.indexOf(activeOption),
          activeId: activeOption.id
        }
      });
    }
    isFirstRenderRef.current = false;
  }, [descendantNodes, dispatch, isMenuOpen]);
  return /*#__PURE__*/jsxRuntime.jsxs(React.Fragment, {
    children: [/*#__PURE__*/jsxRuntime.jsx(listbox.Listbox, {
      ...listboxProps
    }), noResultsFallback]
  });
});

exports.FilterMenuListbox = FilterMenuListbox;
