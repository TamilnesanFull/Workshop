import { Box } from '@adaptavant/eds-core';
import { useCallback, useMemo } from 'react';
import { isString } from 'lodash';
import { t as tw } from './tw-c6a9a210.esm.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { c as cx } from './cx-c5d68be6.esm.js';

const getColorSwatchesStyles = () => ({
  root: tw`
    grid w-fit
  `
});
const swatchRingSizeStyles = {
  20: tw`h-7 w-7`,
  24: tw`h-8 w-8`,
  28: tw`h-9 w-9`,
  32: tw`h-10 w-10`,
  36: tw`h-11 w-11`,
  40: tw`h-12 w-12`
};
const swatchSizeStyles = {
  20: tw`h-5 w-5`,
  24: tw`h-6 w-6`,
  28: tw`h-7 w-7`,
  32: tw`h-8 w-8`,
  36: tw`h-9 w-9`,
  40: tw`h-10 w-10`
};
const getColorSwatchStyles = ({
  size
}) => ({
  root: tw`
    cursor-pointer
  `,
  radio: tw`
    sr-only
    peer/color-swatch
  `,
  swatchRing: tw`
		${swatchRingSizeStyles[size]}
		border-2
		border-solid
		border-transparent
    flex
		items-center
		justify-center
    peer-aria-disabled/color-swatch:border-input-disabled
    peer-checked/color-swatch:border-input-active
    peer-checked/color-swatch:hover:border-input-active-hover
		peer-focus-visible/color-swatch:border-input-active
    peer-focus-visible/color-swatch:hover:border-input-active-hover
    peer-hover/color-swatch:border-input-hover
    rounded-full
  `,
  swatch: tw`
    ${swatchSizeStyles[size]}
    rounded-full
  `
});

const getAriaLabel = (background, ariaLabelPrefix) => {
  if (!isString(ariaLabelPrefix)) {
    return background;
  }
  return `${ariaLabelPrefix.trim()} ${background}`;
};
const ColorSwatch = ({
  ariaLabelPrefix,
  background,
  className,
  classNames = {},
  onChange,
  size = '32',
  style = {},
  styles = {},
  value,
  inputName,
  ...consumerProps
}) => {
  const handleChange = useCallback(event => {
    if (onChange) {
      onChange(event.target.value);
    }
  }, [onChange]);
  const styleProps = getStyleProps({
    style,
    styles,
    className,
    classNames,
    tw: getColorSwatchStyles({
      size
    })
  });
  return /*#__PURE__*/jsxs(Box, {
    as: "label",
    ...styleProps('root'),
    children: [/*#__PURE__*/jsx(Box, {
      ...consumerProps,
      "aria-checked": value === background,
      "aria-label": getAriaLabel(background, ariaLabelPrefix),
      as: "input",
      checked: value === background,
      name: inputName,
      onChange: handleChange,
      type: "radio",
      value: background,
      ...styleProps('radio')
    }), /*#__PURE__*/jsx(Box, {
      ...styleProps('swatchRing'),
      children: /*#__PURE__*/jsx(Box, {
        ...styleProps('swatch', {
          background
        })
      })
    })]
  });
};

const ColorSwatches = ({
  value,
  rows: gridRows = 1,
  colors,
  onChange,
  inputName,
  style = {},
  className,
  styles = {},
  ariaLabelPrefix,
  size = '32',
  classNames = {},
  customLastSwatch,
  customFirstSwatch,
  ...consumerProps
}) => {
  const totalNumberOfColors = useMemo(() => {
    const customSwatchesCount = (customFirstSwatch ? 1 : 0) + (customLastSwatch ? 1 : 0);
    return Object.keys(colors).length + customSwatchesCount;
  }, [colors, customFirstSwatch, customLastSwatch]);
  const gridColumns = useMemo(() => {
    if (!totalNumberOfColors) return 0;
    const reducedGridRows = Math.max(1, gridRows);
    const numberOfGridColumns = totalNumberOfColors / reducedGridRows;
    return Math.ceil(numberOfGridColumns);
  }, [totalNumberOfColors, gridRows]);
  const styleProps = getStyleProps({
    style,
    styles,
    className,
    classNames,
    tw: getColorSwatchesStyles()
  });
  return /*#__PURE__*/jsxs(Box, {
    role: "radiogroup",
    ...styleProps('root', {
      gridTemplateRows: `repeat(${gridRows}, auto)`,
      gridTemplateColumns: `repeat(${gridColumns}, auto)`
    }),
    ...consumerProps,
    children: [customFirstSwatch ? customFirstSwatch : null, colors.map(color => /*#__PURE__*/jsx(ColorSwatch, {
      ariaLabelPrefix: ariaLabelPrefix,
      background: color,
      inputName: inputName,
      onChange: onChange,
      size: size,
      value: value
    }, color)), customLastSwatch ? customLastSwatch : null]
  });
};

const LoadingStyles = tw`animate-spin stroke-[3px]`;
const LoadingStyles2 = tw`stroke-[2px]`;

/**
 * StyleHolder
 *
 * @description This component is only for holding styles that
 * were removed from EDS but are still being used in the consumer codebase.
 * Adding classNames here helps to tailwind to purge those styles.
 */

function StyleHolder() {
  return /*#__PURE__*/jsx("div", {
    className: cx(LoadingStyles, LoadingStyles2)
  });
}

export { ColorSwatch as C, StyleHolder as S, ColorSwatches as a };
