'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');

/**
 * Manages state and logic for filtering options based on user input.
 *
 * Simplifies filtering data on search terms, managing search state, optimising
 * performance with `useDeferredValue` for input responsiveness, and handling
 * search inputs.
 */
function useFilteredOptions({
  initialOptions,
  onValueChange: controlledOnChange,
  searchFunction,
  value: controlledValue
}) {
  const isControlled = controlledValue !== undefined;
  const [uncontrolledSearchTerm, setUncontrolledSearchTerm] = React.useState('');
  const searchTerm = isControlled ? controlledValue : uncontrolledSearchTerm;
  const deferredSearchTerm = React.useDeferredValue(searchTerm);
  const updateSearchTerm = React.useCallback(newValue => {
    if (isControlled) {
      if (controlledOnChange) {
        controlledOnChange(newValue);
      }
    } else {
      setUncontrolledSearchTerm(newValue);
    }
  }, [isControlled, controlledOnChange]);
  return {
    /**
     * Currently filtered options matching the search term.
     */
    filteredOptions: React.useMemo(() => searchFunction({
      options: initialOptions,
      searchTerm: deferredSearchTerm
    }), [deferredSearchTerm, initialOptions, searchFunction]),
    /**
     * Prop getter function to be spread onto the search input component.
     */
    getSearchInputProps: React.useCallback(() => ({
      onClear: () => {
        updateSearchTerm('');
      },
      onChange: event => {
        updateSearchTerm(event.target.value);
      },
      value: searchTerm
    }), [searchTerm, updateSearchTerm]),
    /**
     * Indicates whether the displayed options are based on the latest search
     * term or a deferred version.
     */
    isStale: searchTerm !== deferredSearchTerm,
    searchTerm: searchTerm
  };
}

exports.useFilteredOptions = useFilteredOptions;
