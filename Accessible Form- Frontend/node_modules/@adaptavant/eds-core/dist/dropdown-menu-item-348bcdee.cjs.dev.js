'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('@react-aria/utils');
var React = require('react');
var context = require('./context-1e651be3.cjs.dev.js');
var use_dropdown_item_id = require('./use-dropdown-item-id-96d41692.cjs.dev.js');
var useScrollIntoView = require('./use-scroll-into-view-071db300.cjs.dev.js');
var index = require('./index-3bdbdb42.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
var menu_item = require('./menu-item-9ab00f33.cjs.dev.js');
require('./utils-1d447d37.cjs.dev.js');
require('./tw-merge-70bc959c.cjs.dev.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.dev.js');

/**
 * Item to be rendered inside of a DropdownMenuList.
 */
const DropdownMenuItem = /*#__PURE__*/React.forwardRef(function DropdownMenuItem({
  children,
  className = '',
  classNames = {},
  id: idProp,
  isDisabled = false,
  onClick,
  style = {},
  styles = {},
  ...consumerProps
}, forwardedRef) {
  const {
    activeDescendantId,
    closeMenu
  } = context.useDropdownContext();
  const id = use_dropdown_item_id.useDropdownItemId(idProp);
  const isHighlighted = id === activeDescendantId;

  // Ensure the active descendant is visible in long lists with overflow.
  // Without this, the active item may not be visible on the screen.
  const scrollIntoView = useScrollIntoView.useScrollIntoView(isHighlighted);
  const handleOnClick = React.useCallback(event => {
    const shouldCloseMenu = typeof onClick === 'function' ? onClick(event) : undefined;
    if (shouldCloseMenu !== false) {
      closeMenu();
    }
  }, [closeMenu, onClick]);
  const styleProps = index.getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: {
      root: '',
      center: '',
      railStart: '',
      railEnd: ''
    }
  });
  const menuItemTrackStyleProps = {
    className: styleProps('root').className,
    classNames: {
      center: styleProps('center').className,
      railStart: styleProps('railStart').className,
      railEnd: styleProps('railEnd').className
    },
    style: styleProps('root').style,
    styles: {
      center: styleProps('center').style,
      railStart: styleProps('railStart').style,
      railEnd: styleProps('railEnd').style
    }
  };
  return /*#__PURE__*/jsxRuntime.jsx(menu_item.MenuItem, {
    ...consumerProps,
    id: id,
    isDisabled: isDisabled,
    isHighlighted: isHighlighted,
    onClick: isDisabled ? undefined : handleOnClick,
    ref: utils.mergeRefs(scrollIntoView, forwardedRef),
    role: "menuitem",
    tabIndex: -1,
    ...menuItemTrackStyleProps,
    children: children
  });
});

exports.DropdownMenuItem = DropdownMenuItem;
