'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var index = require('./index-3bdbdb42.cjs.dev.js');
var focus = require('@react-aria/focus');
var utils = require('@react-aria/utils');
var visuallyHidden = require('./visually-hidden-9e9bf258.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
var context = require('./context-fb7f9049.cjs.dev.js');
var use_click_away = require('./use-click-away-d103f9ae.cjs.dev.js');
var popover = require('./popover-8c8f3261.cjs.dev.js');
var styles = require('./styles-b5db22e5.cjs.dev.js');
var composeId = require('./compose-id-8f0cde18.cjs.dev.js');
var box = require('./box-88b49271.cjs.dev.js');
var dropdownUpIcon = require('./dropdown-up-icon-9612d99c.cjs.dev.js');
var dropdownDownIcon = require('./dropdown-down-icon-e861b656.cjs.dev.js');
var focus_container = require('./focus-container-f89af8ff.cjs.dev.js');
var button = require('./button-4b229f71.cjs.dev.js');
var styles$1 = require('./styles-3e350289.cjs.dev.js');
var tw = require('./tw-cabb7e4c.cjs.dev.js');
var styles$2 = require('./styles-590374a3.cjs.dev.js');
require('./tw-merge-70bc959c.cjs.dev.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.dev.js');
require('./styles-32c512c4.cjs.dev.js');

const DatePickerContext = /*#__PURE__*/React.createContext(undefined);
const DatePickerProvider = DatePickerContext.Provider;

// Use this hook to access the context
const useDatePickerContext = () => {
  const context = React.useContext(DatePickerContext);
  if (!context) {
    throw new Error('useDatePickerContext must be used within a DatePickerProvider');
  }
  return context;
};

const DatePickerPopover = /*#__PURE__*/React.forwardRef(function DatePickerPopover({
  children
}, forwardedRef) {
  const {
    labelId
  } = context.useFieldContext();
  const {
    isOpen,
    triggerId,
    popoverId,
    close,
    popover: popover$1,
    styleProps
  } = useDatePickerContext();
  const {
    getPopoverProps,
    popoverRef,
    referenceRef
  } = popover$1;
  const popoverProps = React.useMemo(() => getPopoverProps(), [getPopoverProps]);
  const memoizedRefs = React.useMemo(() => [popoverRef, referenceRef], [popoverRef, referenceRef]);
  use_click_away.useClickAway({
    refs: memoizedRefs,
    onClickAway: () => close(),
    isDisabled: !isOpen // Disable when popover is closed
  });
  const handleKeyDown = event => {
    if (event.key === 'Escape') close();
  };
  if (!isOpen) return null;
  return /*#__PURE__*/jsxRuntime.jsx(focus.FocusScope, {
    contain: true,
    restoreFocus: true,
    children: /*#__PURE__*/jsxRuntime.jsx(popover.Popover
    // ARIA dialog and alertdialog nodes should have an accessible name
    // See: https://dequeuniversity.com/rules/axe/4.4/aria-dialog-name
    , {
      "aria-labelledby": `${labelId} ${triggerId}`,
      id: popoverId,
      onKeyDownCapture: handleKeyDown,
      ref: utils.mergeRefs(forwardedRef, popoverProps.ref),
      role: "dialog",
      tabIndex: -1,
      ...styleProps('popover', isOpen ? popoverProps.style : visuallyHidden.visuallyHiddenStyles),
      children: typeof children === 'function' ? children({
        close
      }) : children
    })
  });
});

function useDatePickerTriggerProps({
  forwardedRef
} = {}) {
  const {
    isInvalid,
    isRequired,
    isDisabled,
    labelId
  } = context.useFieldContext();
  const a11yProps = context.useInputA11yProps({
    isDisabled,
    isInvalid,
    isRequired
  });
  const {
    isOpen,
    setIsOpen,
    triggerId,
    popoverId,
    popover: {
      getReferenceProps
    }
  } = useDatePickerContext();
  const popoverRefProps = getReferenceProps();
  const toggleOpen = () => setIsOpen(prev => !prev);
  return {
    triggerProps: {
      ...a11yProps,
      'aria-controls': popoverId,
      'aria-expanded': isOpen,
      'aria-haspopup': true,
      'aria-labelledby': `${labelId} ${triggerId}`,
      ...popoverRefProps,
      onClick: isDisabled ? undefined : toggleOpen,
      ref: utils.mergeRefs(popoverRefProps.ref, forwardedRef)
    }
  };
}
const useDatePickerContextValues = ({
  styleProps
}) => {
  const [isOpen, setIsOpen] = React.useState(false);
  const id = utils.useId();
  const triggerId = composeId.composeId(id, 'content');
  const popoverId = composeId.composeId(id, 'popover');
  const popover$1 = popover.usePopover({
    matchReferenceWidth: false,
    offset: 4,
    placement: 'bottom-start',
    maxWidth: 'fit-content'
  });
  const open = React.useCallback(() => setIsOpen(true), [setIsOpen]);
  const close = React.useCallback(() => setIsOpen(false), [setIsOpen]);
  return {
    isOpen,
    setIsOpen,
    triggerId,
    popoverId,
    popover: popover$1,
    open,
    close,
    styleProps
  };
};

const DatePickerTrigger = /*#__PURE__*/React.forwardRef(function DatePickerTrigger({
  className = '',
  classNames = {},
  style = {},
  styles: styles$1 = {},
  formattedValue,
  placeholder,
  ...consumerProps
}, forwardedRef) {
  const {
    isDisabled,
    isInvalid,
    size,
    variant
  } = context.useFieldContext();
  const context$1 = useDatePickerContext();
  const {
    isOpen,
    triggerId,
    styleProps
  } = context$1;
  const {
    triggerProps
  } = useDatePickerTriggerProps({
    forwardedRef
  });
  const focusContainerRef = React.useRef(null);
  const focusContainerStyleProps = focus_container.useCombinedFocusContainerInputStyles({
    className,
    classNames,
    isDisabled,
    isInvalid,
    style,
    styles: styles$1,
    tw: styles.getTextInputStyles({
      hasAdornmentEnd: false,
      hasAdornmentStart: false,
      isDisabled,
      size
    })
  });
  const triggerStyleProps = {
    className: styleProps('trigger').className,
    style: styleProps('trigger').style,
    classNames: {
      label: styleProps('triggerLabel').className,
      iconEnd: styleProps('triggerChevron').className
    },
    styles: {
      label: styleProps('triggerLabel').style,
      iconEnd: styleProps('triggerChevron').style
    }
  };
  const ValueOrPlaceholder = React.useCallback(() => {
    if (formattedValue) return formattedValue;
    return /*#__PURE__*/jsxRuntime.jsx(box.Box, {
      as: "span",
      className: "text-secondary group-aria-disabled:text-disabled",
      children: placeholder
    });
  }, [formattedValue, placeholder]);
  return /*#__PURE__*/jsxRuntime.jsx(focus_container.FocusContainer, {
    className: "inline-flex",
    classNames: {
      focusIndicator: focusContainerStyleProps('focusIndicator').className
    },
    isDisabled: isDisabled,
    isGhost: variant === 'subtle',
    isInvalid: isInvalid,
    ref: focusContainerRef,
    styles: {
      focusIndicator: {
        ...focusContainerStyleProps('focusIndicator').style
      }
    },
    children: ({
      ref
    }) => /*#__PURE__*/jsxRuntime.jsxs(React.Fragment, {
      children: [/*#__PURE__*/jsxRuntime.jsxs(box.Box, {
        className: "sr-only",
        id: triggerId,
        children: [', ', formattedValue || placeholder]
      }), /*#__PURE__*/jsxRuntime.jsx(button.Button, {
        ...utils.mergeProps(consumerProps, triggerProps),
        iconEnd: isOpen ? dropdownUpIcon.DropdownUpIcon : dropdownDownIcon.DropdownDownIcon,
        isDisabled: isDisabled,
        ref: utils.mergeRefs(ref, triggerProps.ref),
        size: size,
        variant: "neutralSecondary",
        ...triggerStyleProps,
        children: /*#__PURE__*/jsxRuntime.jsx(ValueOrPlaceholder, {})
      })]
    })
  });
});

const getDatePickerStyles = ({
  size
}) => ({
  root: tw.tw``,
  triggerChevron: tw.tw`
		fill-secondary
		group-aria-disabled:fill-tertiary
		me-0
	`,
  popover: tw.tw`
		flex
		items-center
		px-3
		py-3.5
	`,
  trigger: tw.tw`
		${styles$1.typography[size]}
		${styles$2.inlinePaddingStylesLookup[size]}
		aria-disabled:bg-neutral-disabled
		aria-disabled:text-disabled-secondary
		hover:bg-canvas
		border-none
		peer
		rounded-6px
	`,
  triggerLabel: tw.tw`
		font-regular
	`
});

/**
 * DatePicker
 *
 * @description A component that allows users to select a date by opening a calendar in a popover when the trigger is pressed.
 *
 * @example
 * <DatePicker
 *  placeholder="Enter a date"
 *  formattedValue={selectedDate.toDateString()}
 *  calendar={<Calendar {...calendarProps} />}
 * />
 *
 * @see https://earth.anywhere.co/components/date-picker
 */
const DatePicker = /*#__PURE__*/React.forwardRef(function DatePicker({
  className = '',
  classNames = {},
  style = {},
  styles = {},
  calendar,
  placeholder,
  trigger,
  formattedValue,
  ...consumerProps
}, forwardedRef) {
  const {
    size
  } = context.useFieldContext();

  // Styles
  const styleProps = index.getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getDatePickerStyles({
      size
    })
  });
  const context$1 = useDatePickerContextValues({
    styleProps
  });
  return /*#__PURE__*/jsxRuntime.jsx(DatePickerProvider, {
    value: context$1,
    children: /*#__PURE__*/jsxRuntime.jsxs(box.Box, {
      ...consumerProps,
      ...styleProps('root'),
      children: [/*#__PURE__*/jsxRuntime.jsx(DatePickerTriggerWrapper, {
        formattedValue: formattedValue,
        placeholder: placeholder,
        ref: forwardedRef,
        trigger: trigger
      }), /*#__PURE__*/jsxRuntime.jsx(DatePickerPopover, {
        ...styleProps('popover'),
        children: calendar
      })]
    })
  });
});
const DatePickerTriggerWrapper = /*#__PURE__*/React.forwardRef(function DatePickerTriggerWrapper({
  trigger,
  formattedValue,
  placeholder
}, forwardedRef) {
  const {
    isOpen
  } = useDatePickerContext();
  const {
    triggerProps
  } = useDatePickerTriggerProps({
    forwardedRef
  });
  if (trigger) {
    return trigger({
      triggerProps,
      isOpen,
      placeholder
    });
  }
  return /*#__PURE__*/jsxRuntime.jsx(DatePickerTrigger, {
    formattedValue: formattedValue,
    placeholder: placeholder,
    ref: forwardedRef
  });
});

exports.DatePicker = DatePicker;
