import { forwardRef, Fragment } from 'react';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { buttonSizeToIconSize } from './button-22306f71.esm.js';
import { useButton } from './use-button-36a8da62.esm.js';
import { g as getIconButtonStyles } from './styles-6927e7c9.esm.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import { B as Box } from './box-a5dda214.esm.js';
import { L as Loading } from './loading-7c0b35b6.esm.js';
import { useTranslations } from './translations-1012abc4.esm.js';
import { useBrandStyles } from './config-e49cd2d8.esm.js';

/**
 * Icon Button
 *
 * @description
 * Use an IconButton when you need to provide an action for a user to take in a
 * compact space.
 */

const IconButton = /*#__PURE__*/forwardRef(function IconButton(props, forwardedRef) {
  const {
    button: translations
  } = useTranslations();
  const {
    'aria-label': ariaLabel,
    className = '',
    classNames = {},
    icon: Icon,
    isDisabled = false,
    isLoading = false,
    isPressed,
    loadingLabel = translations.loadingLabel,
    onClick,
    size = 'standard',
    style = {},
    styles = {},
    type = 'button',
    variant = 'accentPrimary',
    ...consumerProps
  } = props;
  const {
    buttonProps
  } = useButton({
    isDisabled,
    isLoading,
    isPressed,
    onClick
  }, forwardedRef);
  const config = useBrandStyles();
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getIconButtonStyles({
      ...config,
      isDisabled,
      isLoading,
      isPressed: Boolean(isPressed),
      size,
      variant
    })
  });
  return /*#__PURE__*/jsxs(Box, {
    ...consumerProps,
    ...buttonProps,
    "aria-label": ariaLabel,
    as: "button",
    type: type,
    ...styleProps('root'),
    children: [/*#__PURE__*/jsx(Icon, {
      size: buttonSizeToIconSize[size],
      ...styleProps('icon')
    }), /*#__PURE__*/jsx(Box, {
      "aria-live": "assertive",
      as: "span",
      ...styleProps('loadingWrapper'),
      children: isLoading ? /*#__PURE__*/jsxs(Fragment, {
        children: [/*#__PURE__*/jsx(Box, {
          as: "span",
          className: "sr-only",
          children: loadingLabel
        }), /*#__PURE__*/jsx(Loading, {
          size: buttonSizeToIconSize[size],
          tone: "neutralPrimary",
          ...styleProps('loading')
        })]
      }) : null
    })]
  });
});
IconButton.displayName = 'IconButton';

export { IconButton as I };
