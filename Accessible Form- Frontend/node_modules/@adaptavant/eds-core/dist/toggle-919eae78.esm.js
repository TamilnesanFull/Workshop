'use client';
import { forwardRef } from 'react';
import { u as useComponentStyleParts } from './index-dd10a77e.esm.js';
import { c as composeId } from './compose-id-1f2e6139.esm.js';
import { m as mergeIds } from './merge-ids-c2d2d3d7.esm.js';
import { useProvidedOrGeneratedId } from './use-provided-or-generated-id-70d42050.esm.js';
import { g as getToggleStyles } from './styles-5ca722fa.esm.js';
import { TogglePrimitive } from './toggle-primitive-434362c4.esm.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import { S as Stack } from './stack-090617c5.esm.js';
import { S as Spacer } from './spacer-ef658955.esm.js';
import { T as Text } from './text-3fc88ad6.esm.js';
import { useControlInputState, useControlA11yProps } from './context-af60a359.esm.js';
import { Track } from './track-26dc4fe4.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './styles-267c9284.esm.js';
import './tw-c6a9a210.esm.js';
import './box-a5dda214.esm.js';

/**
 * Toggle
 *
 * @description
 * Toggle is a UI element that allows the user to select option to
 * switch on or off.
 */

const Toggle = /*#__PURE__*/forwardRef(function Toggle({
  'aria-describedby': ariaDescribedByProp,
  checked,
  className = '',
  classNames = {},
  description,
  id: idProp,
  isDisabled: isDisabledProp = false,
  label,
  name,
  onBlur,
  onChange,
  onClick,
  size = 'standard',
  style = {},
  styles = {},
  value,
  ...consumerProps
}, forwardedRef) {
  const {
    isDisabled
  } = useControlInputState({
    isDisabled: isDisabledProp,
    isInvalid: false,
    isRequired: false
  });
  const a11yProps = useControlA11yProps({
    isDisabled
  });
  const {
    descriptionId,
    inputId
  } = useToggleIds(idProp);
  const ariaDescribedBy = mergeIds(a11yProps === null || a11yProps === void 0 ? void 0 : a11yProps['aria-describedby'], ariaDescribedByProp, description ? descriptionId : undefined);
  const parts = useComponentStyleParts({
    className,
    classNames,
    style,
    styles,
    tw: getToggleStyles({
      isDisabled,
      size
    })
  }, ['root', 'label', 'description', 'descriptionTrack', 'descriptionSpacer', 'togglePrimitiveRoot', 'togglePrimitiveInput', 'togglePrimitiveControl', 'togglePrimitiveIcon']);
  const togglePrimitiveStyleProps = {
    ...parts.togglePrimitiveRoot,
    classNames: {
      input: parts.togglePrimitiveInput.className,
      control: parts.togglePrimitiveControl.className,
      icon: parts.togglePrimitiveIcon.className
    },
    styles: {
      input: parts.togglePrimitiveInput.style,
      control: parts.togglePrimitiveControl.style,
      icon: parts.togglePrimitiveIcon.style
    }
  };
  return /*#__PURE__*/jsxs(Stack, {
    ...parts.root,
    children: [/*#__PURE__*/jsx(Track, {
      as: "label",
      htmlFor: inputId,
      railStart: /*#__PURE__*/jsx(TogglePrimitive, {
        ...consumerProps,
        ...a11yProps,
        "aria-describedby": ariaDescribedBy,
        checked: checked,
        id: inputId,
        isDisabled: isDisabled,
        name: name,
        onBlur: onBlur,
        onChange: onChange,
        onClick: onClick,
        ref: forwardedRef,
        size: size,
        value: value,
        ...togglePrimitiveStyleProps
      }),
      verticalAlign: "top",
      ...parts.label,
      children: label
    }), description ? /*#__PURE__*/jsx(Track, {
      as: "span",
      railStart: /*#__PURE__*/jsx(Spacer, {
        ...parts.descriptionSpacer
      }),
      ...parts.descriptionTrack,
      children: /*#__PURE__*/jsx(Text, {
        id: descriptionId,
        ...parts.description,
        children: description
      })
    }) : null]
  });
});
Toggle.displayName = 'Toggle';
function useToggleIds(id) {
  const inputId = useProvidedOrGeneratedId(id);
  return {
    inputId,
    descriptionId: composeId(inputId, 'description')
  };
}

export { Toggle };
