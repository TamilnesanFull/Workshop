'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var context = require('./context-5ef4d108.cjs.prod.js');
var jsxRuntime = require('react/jsx-runtime');
var forwardRef = require('./forward-ref-0e64c63e.cjs.prod.js');
var fieldset = require('./fieldset-fc13e470.cjs.prod.js');
require('react');

/**
 * RadioGroup
 *
 * @description Use a RadioGroup to control a group of radio buttons.
 */

const RadioGroup = forwardRef.forwardRefWithGenericComponent(function RadioGroup({
  children,
  isDisabled,
  name,
  onChange,
  size = 'standard',
  value,
  ...consumerProps
}, forwardedRef) {
  const context$1 = context.useRadioGroupState({
    isDisabled,
    name,
    onChange,
    size,
    value
  });

  /**
   * If isDisabled is a function, the user is probably trying to disable individual
   * radio buttons. In this case, we don't want to disable the entire fieldset.
   */
  const isFieldsetDisabled = typeof isDisabled === 'function' ? false : isDisabled;
  return /*#__PURE__*/jsxRuntime.jsx(context.RadioGroupContextProvider, {
    value: context$1,
    children: /*#__PURE__*/jsxRuntime.jsx(fieldset.Fieldset, {
      ...consumerProps,
      isDisabled: isFieldsetDisabled,
      ref: forwardedRef,
      children: children
    })
  });
});

exports.RadioGroup = RadioGroup;
