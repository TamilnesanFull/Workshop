'use client';
import { mergeRefs } from '@react-aria/utils';
import { forwardRef, useCallback, useMemo, useRef } from 'react';
import { useDropdownContext } from './context-6e374e37.esm.js';
import { useMobileDropdownContext } from './mobile-context-75da3175.esm.js';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { v as visuallyHiddenStyles } from './visually-hidden-60af4b9e.esm.js';
import { useClickAway } from './use-click-away-a74e18f7.esm.js';
import { useIsViewportBelowOrEqual } from './use-viewport-below-or-equal-b1c12ed0.esm.js';
import { a as getSelectMenuPopoverStyles } from './styles-3dd5cb2b.esm.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { B as Box } from './box-a5dda214.esm.js';
import { H as Heading } from './heading-8fb66234.esm.js';
import { useFieldContext } from './context-2a1498a6.esm.js';
import { Modal, ModalHeader, ModalContent } from './modal-682ec106.esm.js';
import { Popover } from './popover-55e45b10.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './styles-267c9284.esm.js';
import './tw-c6a9a210.esm.js';
import './styles-56119827.esm.js';
import './text-3fc88ad6.esm.js';

const SelectMenuPopover = /*#__PURE__*/forwardRef(function SelectMenuPopover({
  children,
  className = '',
  classNames = {},
  shouldUsePortal = true,
  style = {},
  styles = {},
  ...consumerProps
}, forwardedRef) {
  const {
    closeMenu,
    isMenuOpen,
    popover,
    popoverId
  } = useDropdownContext();
  const {
    closeButtonProps,
    mobileFriendly = true,
    title,
    togglePoint
  } = useMobileDropdownContext();
  const {
    labelRef,
    label
  } = useFieldContext();
  const isResponsiveViewport = useIsViewportBelowOrEqual(togglePoint);

  // When the dropdown is opened, clicking outside should close it
  const handleClickOutside = useCallback(() => {
    if (isMenuOpen) closeMenu();
  }, [isMenuOpen, closeMenu]);
  const {
    popoverRef,
    referenceRef,
    getPopoverProps
  } = popover;
  const popoverProps = useMemo(() => getPopoverProps(), [getPopoverProps]);
  const memoizedRefs = useMemo(() => [labelRef, popoverRef, referenceRef], [labelRef, popoverRef, referenceRef]);
  useClickAway({
    refs: memoizedRefs,
    onClickAway: handleClickOutside,
    isDisabled: mobileFriendly && isResponsiveViewport
  });
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getSelectMenuPopoverStyles()
  });
  const localRef = useRef(null);
  if (mobileFriendly && isResponsiveViewport) {
    return /*#__PURE__*/jsx(Box, {
      ref: mergeRefs(forwardedRef, popoverRef, localRef),
      children: /*#__PURE__*/jsxs(Modal, {
        container: localRef.current,
        onClose: closeMenu,
        open: isMenuOpen,
        titleId: "select-header",
        ...styleProps('root'),
        classNames: {
          modalWrapper: styleProps('modalWrapper').className
        },
        styles: {
          modalWrapper: styleProps('modalWrapper').style
        },
        children: [/*#__PURE__*/jsx(ModalHeader, {
          closeButtonProps: closeButtonProps ? {
            label: closeButtonProps.label ?? '',
            onClick: () => {
              var _closeButtonProps$onC;
              (_closeButtonProps$onC = closeButtonProps.onClick) === null || _closeButtonProps$onC === void 0 || _closeButtonProps$onC.call(closeButtonProps);
              closeMenu();
            }
          } : undefined,
          children: /*#__PURE__*/jsx(Box, {
            className: "text-center",
            id: "select-header",
            children: /*#__PURE__*/jsx(Heading, {
              as: "h5",
              children: title ?? label
            })
          })
        }), /*#__PURE__*/jsx(ModalContent, {
          className: "overflow-hidden flex flex-col",
          children: children
        })]
      })
    });
  }
  return /*#__PURE__*/jsx(Popover, {
    ...consumerProps,
    id: popoverId,
    ref: mergeRefs(forwardedRef, popoverProps.ref),
    role: "presentation",
    shouldUsePortal: shouldUsePortal,
    ...styleProps('root', isMenuOpen ? popoverProps.style : visuallyHiddenStyles),
    children: isMenuOpen ? children : null
  });
});

export { SelectMenuPopover };
