'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('@react-aria/utils');
var React = require('react');
var context = require('./context-1e651be3.cjs.dev.js');
var mobile_context = require('./mobile-context-b7ac574c.cjs.dev.js');
var index = require('./index-3bdbdb42.cjs.dev.js');
var visuallyHidden = require('./visually-hidden-9e9bf258.cjs.dev.js');
var use_click_away = require('./use-click-away-d103f9ae.cjs.dev.js');
var use_viewport_below_or_equal = require('./use-viewport-below-or-equal-a63c017b.cjs.dev.js');
var styles = require('./styles-89d59f67.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
var box = require('./box-88b49271.cjs.dev.js');
var heading = require('./heading-2f0d515d.cjs.dev.js');
var context$1 = require('./context-fb7f9049.cjs.dev.js');
var modal = require('./modal-78110d8b.cjs.dev.js');
var popover = require('./popover-8c8f3261.cjs.dev.js');
require('./tw-merge-70bc959c.cjs.dev.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.dev.js');
require('./styles-3e350289.cjs.dev.js');
require('./tw-cabb7e4c.cjs.dev.js');
require('./styles-590374a3.cjs.dev.js');
require('./text-b4d8b4ef.cjs.dev.js');

const SelectMenuPopover = /*#__PURE__*/React.forwardRef(function SelectMenuPopover({
  children,
  className = '',
  classNames = {},
  shouldUsePortal = true,
  style = {},
  styles: styles$1 = {},
  ...consumerProps
}, forwardedRef) {
  const {
    closeMenu,
    isMenuOpen,
    popover: popover$1,
    popoverId
  } = context.useDropdownContext();
  const {
    closeButtonProps,
    mobileFriendly = true,
    title,
    togglePoint
  } = mobile_context.useMobileDropdownContext();
  const {
    labelRef,
    label
  } = context$1.useFieldContext();
  const isResponsiveViewport = use_viewport_below_or_equal.useIsViewportBelowOrEqual(togglePoint);

  // When the dropdown is opened, clicking outside should close it
  const handleClickOutside = React.useCallback(() => {
    if (isMenuOpen) closeMenu();
  }, [isMenuOpen, closeMenu]);
  const {
    popoverRef,
    referenceRef,
    getPopoverProps
  } = popover$1;
  const popoverProps = React.useMemo(() => getPopoverProps(), [getPopoverProps]);
  const memoizedRefs = React.useMemo(() => [labelRef, popoverRef, referenceRef], [labelRef, popoverRef, referenceRef]);
  use_click_away.useClickAway({
    refs: memoizedRefs,
    onClickAway: handleClickOutside,
    isDisabled: mobileFriendly && isResponsiveViewport
  });
  const styleProps = index.getStyleProps({
    className,
    classNames,
    style,
    styles: styles$1,
    tw: styles.getSelectMenuPopoverStyles()
  });
  const localRef = React.useRef(null);
  if (mobileFriendly && isResponsiveViewport) {
    return /*#__PURE__*/jsxRuntime.jsx(box.Box, {
      ref: utils.mergeRefs(forwardedRef, popoverRef, localRef),
      children: /*#__PURE__*/jsxRuntime.jsxs(modal.Modal, {
        container: localRef.current,
        onClose: closeMenu,
        open: isMenuOpen,
        titleId: "select-header",
        ...styleProps('root'),
        classNames: {
          modalWrapper: styleProps('modalWrapper').className
        },
        styles: {
          modalWrapper: styleProps('modalWrapper').style
        },
        children: [/*#__PURE__*/jsxRuntime.jsx(modal.ModalHeader, {
          closeButtonProps: closeButtonProps ? {
            label: closeButtonProps.label ?? '',
            onClick: () => {
              var _closeButtonProps$onC;
              (_closeButtonProps$onC = closeButtonProps.onClick) === null || _closeButtonProps$onC === void 0 || _closeButtonProps$onC.call(closeButtonProps);
              closeMenu();
            }
          } : undefined,
          children: /*#__PURE__*/jsxRuntime.jsx(box.Box, {
            className: "text-center",
            id: "select-header",
            children: /*#__PURE__*/jsxRuntime.jsx(heading.Heading, {
              as: "h5",
              children: title ?? label
            })
          })
        }), /*#__PURE__*/jsxRuntime.jsx(modal.ModalContent, {
          className: "overflow-hidden flex flex-col",
          children: children
        })]
      })
    });
  }
  return /*#__PURE__*/jsxRuntime.jsx(popover.Popover, {
    ...consumerProps,
    id: popoverId,
    ref: utils.mergeRefs(forwardedRef, popoverProps.ref),
    role: "presentation",
    shouldUsePortal: shouldUsePortal,
    ...styleProps('root', isMenuOpen ? popoverProps.style : visuallyHidden.visuallyHiddenStyles),
    children: isMenuOpen ? children : null
  });
});

exports.SelectMenuPopover = SelectMenuPopover;
