'use client';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { g as getSnackbarContentStyles } from './styles-d187c282.esm.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import { B as Box } from './box-a5dda214.esm.js';
import { m as mergeProps } from './merge-props-5c13cba9.esm.js';
import { S as Stack } from './stack-090617c5.esm.js';
import { T as Text } from './text-3fc88ad6.esm.js';
import { L as Loading } from './loading-7c0b35b6.esm.js';
import { E as ErrorIcon } from './error-icon-1fdb44d1.esm.js';
import { I as InformationIcon } from './information-icon-e696ea58.esm.js';
import { R as RemoveIcon } from './remove-icon-2073e50f.esm.js';
import { C as CheckIcon } from './check-icon-17dad0a3.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './tw-c6a9a210.esm.js';
import 'react';
import '@react-aria/utils';
import './cx-c5d68be6.esm.js';
import 'clsx';
import './merge-ids-c2d2d3d7.esm.js';
import './grow-your-brand-icon-b4a6e8da.esm.js';
import './styles-53001919.esm.js';
import './setmore-icon-0a46ffb4.esm.js';

/**
 * The SnackbarContent component can used as a standalone primitive to build a user feedback system.
 *
 */
const SnackbarContent = ({
  className = '',
  classNames = {},
  style = {},
  styles = {},
  variant,
  onCloseButtonClick,
  title,
  description,
  actionButton,
  ...consumerProps
}) => {
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getSnackbarContentStyles()
  });
  return /*#__PURE__*/jsxs(Box, {
    "aria-atomic": "true",
    "aria-live": "off",
    role: "alert",
    tabIndex: 0,
    ...mergeProps(consumerProps, styleProps('root')),
    children: [/*#__PURE__*/jsx(AppearanceIndicator, {
      variant: variant
    }), /*#__PURE__*/jsxs(Stack, {
      className: "flex-1",
      children: [/*#__PURE__*/jsx(Text, {
        ...styleProps('title'),
        children: title
      }), description ? /*#__PURE__*/jsx(Text, {
        ...styleProps('description'),
        children: description
      }) : null]
    }), actionButton ? /*#__PURE__*/jsx("button", {
      type: "button",
      ...styleProps('actionButton'),
      onClick: actionButton.onClick,
      children: actionButton.text
    }) : null, /*#__PURE__*/jsx("button", {
      "aria-label": "Close",
      onClick: onCloseButtonClick,
      type: "button",
      ...styleProps('closeButton'),
      children: /*#__PURE__*/jsx(RemoveIcon, {
        size: "16"
      })
    })]
  });
};
SnackbarContent.displayName = 'SnackbarContent';

/** Based on the appearance, we render a different icon */
const AppearanceIndicator = ({
  variant
}) => {
  switch (variant) {
    case 'info':
      return /*#__PURE__*/jsx(InformationIcon, {
        className: "fill-text-inverse shrink-0",
        size: "20"
      });
    case 'positive':
      return /*#__PURE__*/jsx(CheckIcon, {
        className: "fill-text-inverse-positive shrink-0",
        size: "20"
      });
    case 'critical':
      return /*#__PURE__*/jsx(ErrorIcon, {
        className: "fill-text-inverse-critical shrink-0",
        size: "20"
      });
    case 'loading':
      return /*#__PURE__*/jsx(Loading, {
        className: "shrink-0",
        size: "20",
        tone: "inverse"
      });
    default:
      return null;
  }
};

export { SnackbarContent };
