import { E as ErrorIcon } from './error-icon-1fdb44d1.esm.js';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { t as tw } from './tw-c6a9a210.esm.js';
import { t as typography } from './styles-267c9284.esm.js';
import { jsx } from 'react/jsx-runtime';
import { T as Text } from './text-3fc88ad6.esm.js';
import { Track } from './track-26dc4fe4.esm.js';
import { AlignChildToText } from './align-child-to-text-c6521616.esm.js';

const getFieldErrorMessageStyles = ({
  isDisabled,
  size
}) => ({
  root: tw`
		${typography[size]}
		gap-1
	`,
  errorIcon: tw`
		${isDisabled ? 'text-disabled' : 'text-critical'}
	`,
  errorMessage: tw`
		${typography[size]}
		${isDisabled ? 'text-disabled' : 'text-critical'}
	`
});

/**
 * ErrorMessage
 *
 * @description
 * A component that displays an error message.
 */

function FieldErrorMessage({
  children,
  className = '',
  classNames = {},
  id,
  isDisabled = false,
  size = 'standard',
  style = {},
  styles = {},
  shouldAnnounceOnMount = true,
  ...consumerProps
}) {
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getFieldErrorMessageStyles({
      isDisabled,
      size
    })
  });
  return /*#__PURE__*/jsx(Track, {
    ...consumerProps,
    railStart: /*#__PURE__*/jsx(AlignChildToText, {
      children: /*#__PURE__*/jsx(ErrorIcon, {
        size: "16",
        ...styleProps('errorIcon')
      })
    }),
    role: shouldAnnounceOnMount ? 'alert' : undefined,
    verticalAlign: "top",
    ...styleProps('root'),
    children: /*#__PURE__*/jsx(Text, {
      id: id,
      ...styleProps('errorMessage'),
      children: children
    })
  });
}
FieldErrorMessage.displayName = 'FieldErrorMessage';

export { FieldErrorMessage as F };
