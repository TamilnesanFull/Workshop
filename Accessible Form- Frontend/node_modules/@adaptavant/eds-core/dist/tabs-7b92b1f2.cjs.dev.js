'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var context = require('./context-1d4965bb.cjs.dev.js');
var styles = require('./styles-5c1faeec.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
var box = require('./box-88b49271.cjs.dev.js');
var index = require('./index-3bdbdb42.cjs.dev.js');
require('./tw-cabb7e4c.cjs.dev.js');
require('./tw-merge-70bc959c.cjs.dev.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.dev.js');

/**
 * Tabs component represents a set of tabs that allows users to switch between different content views.
 */
function Tabs({
  children,
  className = '',
  classNames = {},
  defaultValue,
  onSelectedValueChange,
  selectedValue,
  style = {},
  styles: styles$1 = {},
  size = 'standard',
  ...consumerProps
}) {
  const [internalSelectedValue, setInternalSelectedValue] = React.useState(defaultValue);
  const [selectedElement, setSelectedElement] = React.useState(null);
  const handleControlledAndUnControlledSelectedValueChange = React.useCallback(value => {
    // If defaultValue is provided, it should be treated as uncontrolled. So we should update the internal state.
    if (defaultValue) {
      setInternalSelectedValue(value);
      // If selectedValue and onSelectedValueChange are provided, it should be treated as controlled. So we should call the consumer's setter.
    } else if (selectedValue && onSelectedValueChange) {
      onSelectedValueChange(value);
    }
  }, [defaultValue, selectedValue, onSelectedValueChange]);
  const styleProps = index.getStyleProps({
    className,
    classNames,
    style,
    styles: styles$1,
    tw: styles.getTabsStyles()
  });
  return /*#__PURE__*/jsxRuntime.jsx(context.TabsContextProvider, {
    value: {
      selectedValue: selectedValue || internalSelectedValue,
      onSelectedValueChange: handleControlledAndUnControlledSelectedValueChange,
      selectedElement,
      onSelectedElementChange: setSelectedElement,
      size
    },
    children: /*#__PURE__*/jsxRuntime.jsx(box.Box, {
      ...styleProps('root'),
      ...consumerProps,
      children: children
    })
  });
}
Tabs.displayName = 'Tabs';

exports.Tabs = Tabs;
