'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var checkboxIndeterminateIcon = require('./checkbox-indeterminate-icon-b1f45d94.cjs.prod.js');
var index = require('./index-7955fb8e.cjs.prod.js');
var styles = require('./styles-9d8c2fa9.cjs.prod.js');
var jsxRuntime = require('react/jsx-runtime');
var box = require('./box-e39057bd.cjs.prod.js');
var align_child_to_text = require('./align-child-to-text-c75908d4.cjs.prod.js');
require('./styles-30814c9d.cjs.prod.js');
require('./tw-9929267e.cjs.prod.js');
require('./tw-merge-885aa7a8.cjs.prod.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.prod.js');
require('./styles-3786e407.cjs.prod.js');

const CheckboxPrimitive = /*#__PURE__*/React.forwardRef(function CheckboxPrimitive({
  checked,
  className = '',
  classNames = {},
  id,
  indeterminate = false,
  isDisabled = false,
  isInvalid = false,
  name,
  onBlur,
  onChange,
  onClick,
  size = 'standard',
  style = {},
  styles: styles$1 = {},
  ...consumerProps
}, forwardedRef) {
  const styleProps = index.getStyleProps({
    className,
    classNames,
    style,
    styles: styles$1,
    tw: styles.getCheckboxPrimitiveStyles({
      isDisabled,
      isInvalid,
      size
    })
  });
  const handleOnChange = useCancellableHandler(onChange, isDisabled);
  const handleOnClick = useCancellableHandler(onClick, isDisabled);

  // "indeterminate" can be set only via javascript. see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate_state_checkboxes
  const assignRef = node => {
    if (node) {
      node.indeterminate = indeterminate; // If node is not null, set the "indeterminate prop" to current value of indeterminate for checkbox.
    }
    if (typeof forwardedRef === 'function') {
      forwardedRef(node); //  If forwardedRef is a function, call the function with node as the argument.
    } else if (forwardedRef) {
      forwardedRef.current = node; // If forwardedRef is an object (typically a React ref object), set current property to node.
    }
  };
  return /*#__PURE__*/jsxRuntime.jsxs(align_child_to_text.AlignChildToText, {
    ...styleProps('root'),
    children: [/*#__PURE__*/jsxRuntime.jsx(box.Box, {
      ...consumerProps,
      "aria-disabled": isDisabled || undefined,
      "aria-invalid": isInvalid || undefined,
      as: "input",
      checked: checked,
      id: id,
      name: name,
      onBlur: onBlur,
      onChange: handleOnChange,
      onClick: handleOnClick,
      ref: assignRef,
      type: "checkbox",
      ...styleProps('input')
    }), /*#__PURE__*/jsxRuntime.jsx(box.Box, {
      as: "span",
      ...styleProps('control'),
      children: indeterminate ? /*#__PURE__*/jsxRuntime.jsx(checkboxIndeterminateIcon.CheckboxIndeterminateIcon, {
        ...styleProps('icon')
      }) : /*#__PURE__*/jsxRuntime.jsx(checkboxIndeterminateIcon.CheckboxCheckIcon, {
        ...styleProps('icon')
      })
    })]
  });
});
function useCancellableHandler(handler, isDisabled) {
  return React.useCallback(event => {
    if (isDisabled) {
      event.preventDefault();
      return;
    }
    if (typeof handler === 'function') {
      handler(event);
      return;
    }
  }, [handler, isDisabled]);
}

exports.CheckboxPrimitive = CheckboxPrimitive;
exports.useCancellableHandler = useCancellableHandler;
