'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var index = require('./index-7955fb8e.cjs.prod.js');
var use_timeout = require('./use-timeout-5313e527.cjs.prod.js');
var snackbar_content = require('./snackbar-content-8a20d828.cjs.prod.js');
var styles = require('./styles-5c8079e1.cjs.prod.js');
var jsxRuntime = require('react/jsx-runtime');
var box = require('./box-e39057bd.cjs.prod.js');
var mergeProps = require('./merge-props-60701ce8.cjs.prod.js');
var create_portal = require('./create-portal-2405e151.cjs.prod.js');
require('./tw-merge-885aa7a8.cjs.prod.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.prod.js');
require('./tw-9929267e.cjs.prod.js');
require('@react-aria/utils');
require('./cx-86353291.cjs.prod.js');
require('clsx');
require('./merge-ids-2d47bd24.cjs.prod.js');

/** Snackbar component helps to display temporary notifications of actions, errors or other events.
 * @description This component extends the `SnackbarContent` component and has the ability to control the visibility, position & auto-hide features of the Snackbar.
 */
const Snackbar = ({
  className = '',
  classNames = {},
  styles: styles$1 = {},
  title,
  description,
  autoCloseDuration = 3000,
  variant,
  placement,
  open,
  offset,
  onClose,
  onCloseButtonClick,
  actionButton,
  ...consumerProps
}) => {
  const styleProps = index.getStyleProps({
    className,
    classNames,
    style: styles.offsetStylesLookup({
      placement: placement,
      offset: offset
    }),
    styles: styles$1,
    tw: styles.getSnackbarStyles()
  });
  const createPortal = create_portal.useCreatePortal();
  const [isOpen, setIsOpen] = React.useState(open);

  // Close the snackbar after the autoCloseDuration
  use_timeout.useTimeout(() => {
    setIsOpen(false);
    onClose();
  }, autoCloseDuration);

  // Sets the visibility based on the `open` prop
  React.useEffect(() => {
    setIsOpen(open);
  }, [open]);
  return isOpen && createPortal( /*#__PURE__*/jsxRuntime.jsx(box.Box, {
    ...mergeProps.mergeProps(consumerProps, styleProps('root')),
    children: /*#__PURE__*/jsxRuntime.jsx(snackbar_content.SnackbarContent, {
      actionButton: actionButton,
      description: description,
      onCloseButtonClick: onCloseButtonClick,
      title: title,
      variant: variant
    })
  }));
};
Snackbar.displayName = 'Snackbar';

exports.Snackbar = Snackbar;
