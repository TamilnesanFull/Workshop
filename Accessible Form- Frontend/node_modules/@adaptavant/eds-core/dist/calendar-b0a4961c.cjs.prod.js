'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var dateFns = require('date-fns');
var React = require('react');
var reactDayPicker = require('react-day-picker');
var chevronRightIcon = require('./chevron-right-icon-2a45d98c.cjs.prod.js');
var index = require('./index-7955fb8e.cjs.prod.js');
var styles = require('./styles-4d7be1cb.cjs.prod.js');
var tw = require('./tw-9929267e.cjs.prod.js');
var jsxRuntime = require('react/jsx-runtime');
var box = require('./box-e39057bd.cjs.prod.js');
var iconButton = require('./icon-button-42ea08f2.cjs.prod.js');
var heading = require('./heading-6ba7ccd6.cjs.prod.js');
var text = require('./text-a5ab226e.cjs.prod.js');
var translations = require('./translations-4a8a2311.cjs.prod.js');
var track = require('./track-f65e0bbd.cjs.prod.js');
var config = require('./config-7c4ee3f2.cjs.prod.js');
require('./styles-30814c9d.cjs.prod.js');
require('./tw-merge-885aa7a8.cjs.prod.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.prod.js');
require('./button-c6c568ca.cjs.prod.js');
require('./use-button-c05d68a1.cjs.prod.js');
require('./styles-3c34b522.cjs.prod.js');
require('./loading-8f0b3165.cjs.prod.js');
require('./grow-your-brand-icon-cce9ad51.cjs.prod.js');
require('./setmore-icon-24e17637.cjs.prod.js');

const getCalendarStyles = () => ({
  root: tw.tw``,
  month: tw.tw`
		flex
		flex-col
		items-stretch
		-mb-1 #1
	`,
  // #1 account for the padding on the last row of table cells
  caption: tw.tw`
		w-full
	`,
  captionLabel: tw.tw`
		px-2
		text-heading-16
	`,
  captionYear: tw.tw`
		inline
		text-secondary
	`,
  nav: tw.tw`
		flex
		gap-1
		items-center
		ps-0.5
		pe-0.5
	`,
  navButtonPrevious: tw.tw``,
  navButtonNext: tw.tw``,
  table: tw.tw`
		border-collapse
	`,
  head: tw.tw``,
  headRow: tw.tw``,
  headCell: tw.tw`
		border-0
		text-center
	`,
  headCellContent: tw.tw`
		flex
		h-8
		items-center
		justify-center
		text-body-12
		text-secondary
		w-full
	`,
  row: tw.tw``
});
const getCalendarDayStyles = ({
  isDisabled,
  isOutside,
  isSelected,
  isToday
}) => ({
  root: tw.tw`
		border-none
	`,
  cellButtonWrapper: tw.tw`
		flex
		items-center
		justify-center
		px-1.5
		py-2
	`,
  cellButton: tw.tw`
		${styles.buttonBaseStyles}
		${function () {
    if (isSelected) return tw.tw`
				active:bg-accent-pressed
				bg-accent
				hover:bg-accent-hover
				text-onPrimary
			`;
    if (isDisabled) return tw.tw`
				${isToday ? 'bg-neutral-disabled' : 'bg-neutral'}
				cursor-default
				high-contrast:border-none
				text-disabled
		`;
    if (isOutside) return tw.tw`
				active:bg-neutral-pressed
				bg-neutral
				high-contrast:border-dashed
				hover:bg-neutral-hover
				hover:border-accent
				text-secondary
		`;
    return tw.tw`
				${isToday ? 'text-accent' : 'text-primary'}
				active:bg-neutral-pressed
				bg-neutral
				high-contrast:border-dashed
				hover:bg-neutral-hover
				hover:border-accent
				hover:text-accent-hover
			`;
  }()}
		focus-visible:focus-ring
		font-regular
		h-6
		relative
		rounded-6px
		w-6
	`,
  cellText: tw.tw`
			${isDisabled ? 'line-through' : ''}
			${isToday ? 'font-strong' : ''}
			-inset-1
			absolute
			flex
			items-center
			justify-center
			text-body-14
	`
});

function useCalendarStyles({
  className = '',
  classNames = {},
  style = {},
  styles = {}
}) {
  return index.getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getCalendarStyles()
  });
}
const CalendarStylesContext = /*#__PURE__*/React.createContext(undefined);
const CalendarStylesProvider = CalendarStylesContext.Provider;
function useCalendarStylesContext() {
  const context = React.useContext(CalendarStylesContext);
  if (context === undefined) {
    throw new Error('useCalendarStylesContext must be used within a CalendarStylesContext');
  }
  return context;
}

/**
 * @deprecated use `Calendar` from `@adaptavant/eds-core/experimental` instead.
 *
 * @description
 * A calendar component that allows users to select a single date.
 */

function Calendar({
  className = '',
  classNames = {},
  isDateUnavailable,
  isToday,
  locale,
  maxValue,
  minValue,
  onValueChange,
  onVisibleMonthChange,
  style = {},
  styles = {},
  value,
  visibleMonth,
  ...consumerProps
}) {
  const styleProps = useCalendarStyles({
    className,
    classNames,
    style,
    styles
  });
  const monthStyles = styleProps('month');
  const tableStyles = styleProps('table');
  const headRowStyles = styleProps('headRow');
  const headCellStyles = styleProps('headCell');
  const rowStyles = styleProps('row');
  return /*#__PURE__*/jsxRuntime.jsx(CalendarStylesProvider, {
    value: styleProps,
    children: /*#__PURE__*/jsxRuntime.jsx(reactDayPicker.DayPicker, {
      ...consumerProps,
      classNames: {
        month: monthStyles.className,
        table: tableStyles.className,
        head_row: headRowStyles.className,
        head_cell: headCellStyles.className,
        row: rowStyles.className,
        ...classNames
      },
      components: {
        Caption,
        Head,
        Row: props => Row({
          ...props,
          isToday
        })
      },
      disabled: isDateUnavailable,
      fixedWeeks: true,
      fromDate: minValue,
      locale: locale,
      mode: "single",
      month: visibleMonth,
      onMonthChange: onVisibleMonthChange,
      onSelect: onValueChange,
      selected: value,
      showOutsideDays: true,
      styles: {
        month: monthStyles.style,
        table: tableStyles.style,
        head_row: headRowStyles.style,
        head_cell: headCellStyles.style,
        row: rowStyles.style
      },
      toDate: maxValue,
      ...styleProps('root')
    })
  });
}
Calendar.displayName = 'Calendar';
function Caption({
  displayMonth,
  id
}) {
  const {
    goToMonth,
    nextMonth,
    previousMonth
  } = reactDayPicker.useNavigation();
  const {
    dir,
    locale
  } = reactDayPicker.useDayPicker();
  const [shouldAnnounceCaption, setShouldAnnounceCaption] = React.useState(false);
  const formattedDate = dateFns.format(displayMonth, 'MMMM yyyy', {
    locale
  });
  const {
    experimental_calendar: translations$1
  } = translations.useTranslations();
  const styleProps = useCalendarStylesContext();
  const nav = /*#__PURE__*/jsxRuntime.jsxs(box.Box, {
    ...styleProps('nav'),
    children: [/*#__PURE__*/jsxRuntime.jsx(iconButton.IconButton, {
      "aria-label": translations$1.previousMonthLabel,
      icon: dir === 'rtl' ? chevronRightIcon.ChevronRightIcon : chevronRightIcon.ChevronLeftIcon,
      isDisabled: !previousMonth,
      onClick: () => {
        if (previousMonth) {
          setShouldAnnounceCaption(true);
          goToMonth(previousMonth);
        }
      },
      size: "standard",
      variant: "neutralTertiary",
      ...styleProps('navButtonPrevious')
    }), /*#__PURE__*/jsxRuntime.jsx(iconButton.IconButton, {
      "aria-label": translations$1.nextMonthLabel,
      icon: dir === 'rtl' ? chevronRightIcon.ChevronLeftIcon : chevronRightIcon.ChevronRightIcon,
      isDisabled: !nextMonth,
      onClick: () => {
        if (nextMonth) {
          setShouldAnnounceCaption(true);
          goToMonth(nextMonth);
        }
      },
      size: "standard",
      variant: "neutralTertiary",
      ...styleProps('navButtonNext')
    }), /*#__PURE__*/jsxRuntime.jsx(box.Box, {
      "aria-live": "assertive",
      className: "sr-only",
      children: shouldAnnounceCaption ? formattedDate : null
    })]
  });
  return /*#__PURE__*/jsxRuntime.jsx(track.Track, {
    railEnd: nav,
    ...styleProps('caption'),
    children: /*#__PURE__*/jsxRuntime.jsxs(heading.Heading, {
      "aria-hidden": "true",
      as: "h3",
      id: id,
      ...styleProps('captionLabel'),
      children: [dateFns.format(displayMonth, 'MMMM', {
        locale
      }), ' ', /*#__PURE__*/jsxRuntime.jsx(text.Text, {
        ...styleProps('captionYear'),
        children: dateFns.format(displayMonth, 'yyyy', {
          locale
        })
      })]
    })
  });
}

/**
 * Generate a series of 7 days, starting from the week, to use for formatting
 * the weekday names (Monday, Tuesday, etc.).
 *
 * Not exported from react-day-picker, see original
 * @see https://github.com/gpbl/react-day-picker/blob/main/src/components/HeadRow/utils/getWeekdays.ts
 */
function getWeekdays( /** The date-fns locale object used to localize dates. */
locale, /** The index of the first day of the week (0 - Sunday). */
weekStartsOn, /** Use ISOWeek instead of locale/ */
ISOWeek) {
  const start = ISOWeek ? dateFns.startOfISOWeek(new Date()) : dateFns.startOfWeek(new Date(), {
    locale,
    weekStartsOn
  });
  const days = [];
  for (let i = 0; i < 7; i++) {
    const day = dateFns.addDays(start, i);
    days.push(day);
  }
  return days;
}

/** Render the table head. */
function Head() {
  const {
    formatters,
    ISOWeek,
    locale,
    weekStartsOn
  } = reactDayPicker.useDayPicker();
  const weekdays = getWeekdays(locale, weekStartsOn, ISOWeek);
  const styleProps = useCalendarStylesContext();
  return /*#__PURE__*/jsxRuntime.jsx(box.Box, {
    "aria-hidden": true,
    as: "thead",
    ...styleProps('head'),
    children: /*#__PURE__*/jsxRuntime.jsx(box.Box, {
      as: "tr",
      ...styleProps('headRow'),
      children: weekdays.map((day, index) => {
        var _formatters$formatWee;
        return /*#__PURE__*/jsxRuntime.jsx(box.Box, {
          as: "th",
          scope: "col",
          ...styleProps('headCell'),
          children: /*#__PURE__*/jsxRuntime.jsx(text.Text, {
            ...styleProps('headCellContent'),
            children: (_formatters$formatWee = formatters.formatWeekdayName(day, {
              locale
            })) === null || _formatters$formatWee === void 0 ? void 0 : _formatters$formatWee.toLocaleString().charAt(0)
          })
        }, index);
      })
    })
  });
}

/** Render a row in the calendar. */
function Row(props) {
  const {
    styles,
    classNames
  } = reactDayPicker.useDayPicker();
  return /*#__PURE__*/jsxRuntime.jsx("tr", {
    className: classNames.row,
    style: styles.row,
    children: props.dates.map(date => /*#__PURE__*/jsxRuntime.jsx(Day, {
      date: date,
      displayMonth: props.displayMonth,
      isToday: props.isToday
    }, dateFns.getUnixTime(date)))
  });
}

/**
 * The content of a day cell – as a button or span element according to its
 * modifiers.
 */
function Day(props) {
  var _props$isToday;
  const buttonRef = React.useRef(null);
  const {
    activeModifiers,
    buttonProps: {
      'aria-selected': ariaSelected,
      // @ts-expect-error: role is not in the types for buttonProps
      role: _unusedRoleProp,
      ...buttonProps
    },
    isHidden
  } = reactDayPicker.useDayRender(props.date, props.displayMonth, buttonRef);
  const config$1 = config.useBrandStyles();
  const styleProps = index.getStyleProps({
    className: '',
    classNames: {},
    style: {},
    styles: {},
    tw: getCalendarDayStyles({
      ...config$1,
      isDisabled: Boolean(activeModifiers.disabled),
      isOutside: Boolean(activeModifiers.outside),
      isSelected: Boolean(activeModifiers.selected),
      isToday: ((_props$isToday = props.isToday) === null || _props$isToday === void 0 ? void 0 : _props$isToday.call(props, props.date)) ?? Boolean(activeModifiers.today)
    })
  });
  const humanReadableDate = dateFns.format(props.date, 'EEEE, d LLLL yyyy');
  const isSelected = ariaSelected === true || ariaSelected === 'true';
  const [announcement, setAnnouncement] = React.useState('');
  React.useEffect(() => {
    if (isSelected) {
      setAnnouncement(`Selected date: ${humanReadableDate}`);
    }
  }, [isSelected, humanReadableDate]);
  return /*#__PURE__*/jsxRuntime.jsx(box.Box, {
    "aria-selected": ariaSelected,
    as: "td",
    ...styleProps('root'),
    children: isHidden ? null : /*#__PURE__*/jsxRuntime.jsx(box.Box, {
      as: "span",
      ...styleProps('cellButtonWrapper'),
      children: /*#__PURE__*/jsxRuntime.jsxs(box.Box, {
        ...buttonProps,
        "aria-label": `${humanReadableDate}${isSelected ? ' selected' : ''}`,
        as: "button",
        name: "day",
        ref: buttonRef,
        ...styleProps('cellButton'),
        children: [/*#__PURE__*/jsxRuntime.jsx(text.Text, {
          fontWeight: activeModifiers.today ? 'strong' : undefined,
          ...styleProps('cellText'),
          children: buttonProps.children
        }), /*#__PURE__*/jsxRuntime.jsx(box.Box, {
          "aria-live": "polite",
          as: "span",
          className: "sr-only",
          children: announcement
        })]
      })
    })
  });
}

exports.Calendar = Calendar;
exports.Day = Day;
exports.Row = Row;
exports.getWeekdays = getWeekdays;
