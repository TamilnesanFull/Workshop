'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var tw = require('./tw-9929267e.cjs.prod.js');
var jsxRuntime = require('react/jsx-runtime');
var text = require('./text-a5ab226e.cjs.prod.js');
var index = require('./index-7955fb8e.cjs.prod.js');
var track = require('./track-f65e0bbd.cjs.prod.js');
require('./tw-merge-885aa7a8.cjs.prod.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.prod.js');

const getBadgeStyles = ({
  tone,
  size
}) => ({
  root: tw.tw`
		${badgeBaseStyles}
		${badgeSizeStylesLookup[size]}
		${badgeToneStylesLookup[tone]}
		${labelToneStylesLookup[tone]}
 	`,
  label: tw.tw`
		 font-strong
		 line-clamp-1
		 px-0.5 
	     text-body-10 		
	`
});
const badgeBaseStyles = tw.tw`
	inline-flex
	items-center
	justify-center
	rounded-4px
`;
const badgeSizeStylesLookup = {
  standard: tw.tw`
		h-6
		px-1.5 
	`,
  small: tw.tw`
		h-4
		px-0.5 
	`
};
const labelToneStylesLookup = {
  caution: tw.tw`
		text-caution-secondary
	`,
  critical: tw.tw`
		text-critical-secondary 
	`,
  neutral: tw.tw`
		text-secondary
	`,
  positive: tw.tw`
		text-positive-secondary
	`
};
const badgeToneStylesLookup = {
  caution: tw.tw`
		bg-caution-secondary
	`,
  critical: tw.tw`
		bg-critical-secondary
	`,
  neutral: tw.tw`
		bg-neutral-secondary
	`,
  positive: tw.tw`
		bg-positive-secondary
	`
};

/**
 * Badge
 *
 * @description A badge component is a visual label or indicator used
 * to convey status or highlight content.
 */

const Badge = /*#__PURE__*/React.forwardRef(function Badge({
  children,
  className = '',
  classNames = {},
  iconStart: IconStart,
  style = {},
  styles = {},
  size = 'standard',
  tone = 'positive',
  ...consumerProps
}, forwardedRef) {
  const styleProps = index.getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getBadgeStyles({
      tone,
      size
    })
  });
  return /*#__PURE__*/jsxRuntime.jsx(track.Track, {
    ...consumerProps,
    as: "span",
    railStart: IconStart ? /*#__PURE__*/jsxRuntime.jsx(IconStart, {
      size: "16",
      ...styleProps('iconStart')
    }) : null,
    ref: forwardedRef,
    ...styleProps('root'),
    children: /*#__PURE__*/jsxRuntime.jsx(text.Text, {
      ...styleProps('label'),
      children: children
    })
  });
});
Badge.displayName = 'Badge';

exports.Badge = Badge;
