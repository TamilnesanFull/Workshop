'use client';
import { isAppleDevice } from '@react-aria/utils';
import { forwardRef, Fragment, useCallback, useMemo } from 'react';
import { useDropdownContext } from './context-6e374e37.esm.js';
import { m as mergeProps } from './merge-props-5c13cba9.esm.js';
import { LiveRegion, useKeydownNavigation } from './combobox-search-input-b1486eed.esm.js';
import { useCombobox } from './context-a9b03758.esm.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import { TextInput } from './text-input-2822fc45.esm.js';
import { useFieldContext } from './context-2a1498a6.esm.js';
import './cx-c5d68be6.esm.js';
import 'clsx';
import './merge-ids-c2d2d3d7.esm.js';

const TimePickerInput = /*#__PURE__*/forwardRef(function TimePickerInput(props, forwardedRef) {
  const {
    inputProps
  } = useTimePickerInput(props);
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(TextInput, {
      ...inputProps,
      ref: forwardedRef
    }), /*#__PURE__*/jsx(LiveRegion, {})]
  });
});
function useTimePickerInput(props) {
  const {
    onEnterInputHandler,
    ...restProps
  } = props;
  const {
    inputValue = '',
    // Set inputValue to an empty string to prevent uncontrolled to controlled input warning. More info: https://reactjs.org/link/uncontrolled-to-controlled
    menuTrigger,
    onInputChange,
    onSelectionChange
  } = useCombobox();
  const {
    activeDescendantId,
    activeDescendantIndex,
    isMenuOpen,
    listId,
    popover,
    openMenu,
    closeMenu,
    clearSelectedItem
  } = useDropdownContext();
  const {
    isDisabled
  } = useFieldContext();
  const NavigateToBlur = () => {
    if (activeDescendantIndex === -1) {
      onEnterInputHandler();
      if (isMenuOpen) closeMenu();
    }
  };
  const handleChange = useCallback(event => {
    if (!isMenuOpen) openMenu();
    if (onInputChange) onInputChange(event.target.value);
    if (event.target.value === '') {
      clearSelectedItem();
      if (onSelectionChange) {
        onSelectionChange(undefined);
      }
    }
  }, [clearSelectedItem, isMenuOpen, onInputChange, onSelectionChange, openMenu]);
  const handleFocus = useCallback(() => {
    if (menuTrigger === 'focus') openMenu();
  }, [menuTrigger, openMenu]);
  const referenceProps = popover.getReferenceProps();
  const handleKeyDown = useKeydownNavigation(NavigateToBlur);
  const isAppleDevice$1 = isAppleDevice();
  const a11yProps = useMemo(() => ({
    'aria-activedescendant': isAppleDevice$1 ? undefined : activeDescendantId,
    'aria-autocomplete': 'list',
    'aria-controls': listId,
    'aria-expanded': isMenuOpen,
    'aria-haspopup': 'listbox',
    autoComplete: 'off',
    autoCorrect: 'off',
    spellCheck: 'false',
    role: 'combobox'
  }), [activeDescendantId, isAppleDevice$1, isMenuOpen, listId]);
  const comboboxProps = useMemo(() => ({
    onKeyDown: isDisabled ? undefined : handleKeyDown,
    onChange: handleChange,
    onFocus: isDisabled ? undefined : handleFocus,
    value: inputValue
  }), [isDisabled, handleKeyDown, handleChange, handleFocus, inputValue]);
  return {
    inputProps: useMemo(() => ({
      ...mergeProps(restProps, a11yProps, comboboxProps),
      focusContainerRef: referenceProps.ref
    }), [restProps, a11yProps, comboboxProps, referenceProps.ref])
  };
}

export { TimePickerInput };
