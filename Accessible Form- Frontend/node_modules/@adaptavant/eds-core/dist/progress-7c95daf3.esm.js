'use client';
import { useMemo } from 'react';
import { u as useComponentStyleParts } from './index-dd10a77e.esm.js';
import { t as tw } from './tw-c6a9a210.esm.js';
import { jsx } from 'react/jsx-runtime';
import { B as Box } from './box-a5dda214.esm.js';
import { Track } from './track-26dc4fe4.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';

const getProgressStyles = () => ({
  root: tw`
		gap-2
	`,
  baseArea: tw`
		bg-canvas-tertiary
		h-[3px]
		rounded-12px
	`,
  filledArea: tw`
		[transition-timing-function:ease]
		bg-accent
		duration-300
		h-full
		rounded-12px
		transition-width
	`,
  adornmentStart: tw``,
  adornmentEnd: tw``
});

/**
 * Progress
 *
 * @description A Progress component that visually represents the completion percentage of a task or goal.
 * The width of the progress filled area is calculated by clamping the percentage between 0% and 100%
 *
 * @param value - The current progress value. Can be any number.
 * @param maxValue - The maximum possible value for the progress. Can be any number.
 *
 * @example
 * <Progress value={45} maxValue={100} />
 */

function Progress({
  adornmentEnd,
  adornmentStart,
  ariaLabelledBy,
  className = '',
  classNames = {},
  maxValue = 100,
  style = {},
  styles = {},
  value = 0,
  ...consumerProps
}) {
  const widthPercentage = useMemo(() => calculatePercentage(value, maxValue), [value, maxValue]);
  const parts = useComponentStyleParts({
    className,
    classNames,
    style,
    styles,
    tw: getProgressStyles()
  }, ['root', 'baseArea', 'filledArea', 'adornmentStart', 'adornmentEnd']);
  const progressStyleProps = {
    ...parts.root,
    classNames: {
      center: parts.baseArea.className,
      railEnd: parts.adornmentEnd.className,
      railStart: parts.adornmentStart.className
    },
    styles: {
      center: parts.baseArea.style,
      railEnd: parts.adornmentEnd.style,
      railStart: parts.adornmentStart.style
    }
  };
  return /*#__PURE__*/jsx(Track, {
    "aria-labelledby": ariaLabelledBy,
    "aria-valuemax": maxValue,
    "aria-valuemin": 0,
    "aria-valuenow": value,
    railEnd: adornmentEnd,
    railStart: adornmentStart,
    role: "progressbar",
    ...progressStyleProps,
    children: /*#__PURE__*/jsx(Box, {
      ...consumerProps,
      className: parts.filledArea.className,
      style: {
        ...parts.filledArea.style,
        width: `${widthPercentage}%`
      }
    })
  });
}

/**
 * Calculates the percentage of a value relative to a maximum value.
 *
 * If `maxValue` is less than or equal to 0, the function returns 0.
 * The result is clamped between 0 and 100 to ensure it’s within valid bounds.
 *
 * @param value - The current value.
 * @param maxValue - The maximum possible value.
 * @returns The calculated percentage, clamped between 0 and 100.
 */
const calculatePercentage = (value, maxValue) => {
  if (maxValue <= 0) {
    return 0; // If maxValue is 0 or negative, set the percentage to 0.
  }

  // Calculate the percentage, and ensure it’s between 0 and 100.
  const percentage = value / maxValue * 100;
  return Math.max(0, Math.min(percentage, 100));
};

export { Progress };
