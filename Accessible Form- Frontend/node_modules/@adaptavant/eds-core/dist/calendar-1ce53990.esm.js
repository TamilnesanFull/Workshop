'use client';
import { useFocusManager, FocusScope } from '@react-aria/focus';
import { getYear, getMonth, isSameMonth, isValid, format as format$1, startOfISOWeek, startOfWeek, addDays, getUnixTime, isSameDay, addYears } from 'date-fns';
import { useMemo, useState, useEffect, useId, useContext, createContext, Fragment, useRef } from 'react';
import { useDayPicker, useNavigation, DayPicker, useDayRender } from 'react-day-picker';
import { a as ChevronRightIcon, C as ChevronLeftIcon } from './chevron-right-icon-ae803e37.esm.js';
import { D as DropdownDownIcon } from './dropdown-down-icon-372942b0.esm.js';
import { D as DropdownUpIcon } from './dropdown-up-icon-07da5d49.esm.js';
import { G as GoTodayIcon } from './go-today-icon-f8ba059c.esm.js';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { c as composeId } from './compose-id-1f2e6139.esm.js';
import { b as buttonBaseStyles } from './styles-56e113a0.esm.js';
import { t as tw } from './tw-c6a9a210.esm.js';
import { zonedTimeToUtc, utcToZonedTime, format } from 'date-fns-tz';
import { t as twMerge } from './tw-merge-91a8b6ee.esm.js';
import * as locales from 'date-fns/locale';
import { jsx, jsxs } from 'react/jsx-runtime';
import { T as Text } from './text-3fc88ad6.esm.js';
import { H as Heading } from './heading-8fb66234.esm.js';
import { B as Box } from './box-a5dda214.esm.js';
import { I as IconButton } from './icon-button-c905d5af.esm.js';
import { Track } from './track-26dc4fe4.esm.js';
import { Button } from './button-22306f71.esm.js';
import { Tooltip } from './tooltip-43d67011.esm.js';
import './styles-53001919.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './use-button-36a8da62.esm.js';
import './styles-6927e7c9.esm.js';
import './loading-7c0b35b6.esm.js';
import './grow-your-brand-icon-b4a6e8da.esm.js';
import './setmore-icon-0a46ffb4.esm.js';
import './translations-1012abc4.esm.js';
import './config-e49cd2d8.esm.js';

/**
 * Uses react-day-picker hooks to provide month picker functionality.
 * @returns An object which contains the month picker state and methods.
 *
 */
function useMonthPicker() {
  const {
    locale
  } = useDayPicker();
  const focusManager = useFocusManager();

  // Get the month captions for the year navigation
  const monthLabels = useMemo(() => {
    return Array.from({
      length: 12
    }, (_, i) => {
      const date = new Date(0, i); // Set the year to 0 as default coz the months are always going to be the same. Alternative approach is to use new Date().getFullYear().
      return {
        short: date.toLocaleString(locale.code, {
          month: 'short'
        }),
        full: date.toLocaleString(locale.code, {
          month: 'long'
        })
      };
    });
  }, [locale]);

  // KeyDown Event Handler
  const onKeyDown = e => {
    switch (e.key) {
      case 'ArrowRight':
      case 'ArrowDown':
        focusManager.focusNext({
          wrap: true
        });
        break;
      case 'ArrowLeft':
      case 'ArrowUp':
        focusManager.focusPrevious({
          wrap: true
        });
        break;
    }
  };
  return {
    monthLabels,
    onKeyDown: onKeyDown
  };
}

/**
 * A Hook to determine the render states for a single month in a calendar UI.
 * @returns An object containing the render states for the month.
 */
function useMonthRender({
  monthIndex,
  monthLabel
}) {
  // ----------- Current Month -----------------
  const {
    today,
    fromDate,
    toDate
  } = useDayPicker();
  const {
    currentMonth
  } = useNavigation();
  const currentYear = getYear(currentMonth);
  let isCurrentMonth = false;
  if (currentYear === getYear(today) && monthIndex === getMonth(today)) isCurrentMonth = true;

  // ----------- Selected Month -----------------
  const {
    selectedMonth
  } = useCalendarContext();
  const renderedMonth = new Date(currentYear, monthIndex);
  let isSelected = false;
  if (renderedMonth && selectedMonth && isSameMonth(renderedMonth, selectedMonth)) isSelected = true;

  // ----------- Disabled Month -----------------
  const fromMonth = fromDate ? getMonth(fromDate) : undefined;
  const toMonth = toDate ? getMonth(toDate) : undefined;
  const fromYear = fromDate ? getYear(fromDate) : undefined;
  const toYear = toDate ? getYear(toDate) : undefined;
  let isDisabled = false;
  if (fromYear && fromMonth) if (currentYear === fromYear && monthIndex < fromMonth) isDisabled = true;
  if (toMonth && toYear) if (currentYear === toYear && monthIndex > toMonth) isDisabled = true;

  // ----------- Selected Month: Screen Reader Announcement -----------------
  const [selectedMonthAnnouncement, setSelectedMonthAnnouncement] = useState('');
  useEffect(() => {
    if (isSelected) {
      setSelectedMonthAnnouncement(`${monthLabel.full} ${currentYear} selected`);
    }
  }, [monthLabel, currentYear, isSelected]);
  return {
    isCurrentMonth,
    isSelected,
    isDisabled,
    selectedMonthAnnouncement
  };
}

/**
 * Hook to generate or retrieve a unique ID for the calendar month picker menu.
 *
 * @returns An object containing `menuId` & `triggerId`.
 */
function useMonthPickerId() {
  const id = useId();
  return {
    /**
     * ID used to associate the month picker menu with the trigger button.
     */
    menuId: composeId('menu', id),
    triggerId: composeId('trigger', id)
  };
}

const getCalendarStyles = ({
  size,
  monthView
}) => ({
  root: tw`
		relative
	`,
  caption: tw`
		mb-2
		w-full
	`,
  captionIconEnd: tw``,
  captionLabel: tw`
		${calendarCaptionTextStylesLookup[size]}
		font-stronger
		inline
		text-primary
	`,
  captionWrapper: tw`
		${calendarCaptionWrapperStylesMap[size]}	
	`,
  captionYear: tw`
		${calendarCaptionTextStylesLookup[size]}	
		font-stronger
		inline
		text-secondary
	`,
  nav: tw`
		flex
		gap-1
		items-center
	`,
  navButtonPrevious: tw`
		aria-disabled:cursor-not-allowed
	`,
  navButtonNext: tw`
		aria-disabled:cursor-not-allowed
	`,
  table: tw`
		border-collapse
	`,
  tableBody: tw`
		${size === 'standard' ? 'gap-2' : ''}
		flex
		flex-col
	`,
  head: tw``,
  headRow: tw`
		${rowStylesLookup[size]}
		${monthView ? 'invisible' : ''}
	`,
  headCell: tw`
		${headCellStyleMap[size]}
		[border:none]
		flex
		items-center
		justify-between
		text-center
	`,
  headCellContent: tw`
		text-body-12
		text-secondary
		w-full
	`,
  row: tw`
		${rowStylesLookup[size]}
		${monthView ? 'invisible' : ''}
	`,
  monthGrid: tw`
		${monthGridStylesLookup[size]}
		absolute
		bottom-0
		grid
		grid-cols-3
		h-[calc(100%-44px)]
		inset-x-0
		top-11 
		w-full
		z-10
	`
});
const getCalendarDayStyles = ({
  isDisabled,
  isOutside,
  isSelected,
  isToday,
  monthView,
  size
}) => ({
  cell: tw`
		[border:none]
		[font-size:0px]
		w-full
	`,
  cellButton: tw`
		${buttonBaseStyles}
		${cellButtonStylesLookup({
    size,
    isDisabled,
    isOutside,
    isSelected,
    isToday,
    isMonthView: monthView
  })}
		[border:none]
		focus-visible:focus-ring
		font-regular
		relative
		rounded-6px
		w-full
	`,
  cellText: tw`
		${cellTextStylesLookup[size]}
		${!isOutside && isToday ? 'font-strong' : ''}
		-inset-1
		absolute
		flex
		items-center
		justify-center
		capitalize
	`
});
const calendarCaptionWrapperStylesMap = {
  small: tw`px-2`,
  standard: tw`px-3`
};
const calendarCaptionTextStylesLookup = {
  small: tw`text-body-12`,
  standard: tw`text-body-16`
};
const rowStylesLookup = {
  small: tw`
		flex
		gap-1
		items-center
		justify-between
	`,
  standard: tw`
		flex
		gap-1.5
		items-center
		justify-between
	`
};
const headCellStyleMap = {
  small: tw`h-6 w-[22px]`,
  standard: tw`h-10 w-9`
};
const cellTextStylesLookup = {
  small: tw`text-body-12`,
  standard: tw`text-body-14`
};
const monthGridStylesLookup = {
  small: tw`px-2 gap-x-4 gap-y-5 grid-rows-[repeat(4,24px)]`,
  standard: tw`px-3.5 gap-x-5 gap-y-7 grid-rows-[repeat(4,36px)]`
};
const cellButtonStylesLookup = ({
  size,
  isDisabled,
  isSelected,
  isToday,
  isOutside
}) => {
  const commonStylesLookup = {
    small: tw`h-6 my-0.5 w-6`,
    standard: tw`h-9 my-0.5 w-9`
  };
  function conditionalStylesLookup() {
    if (isDisabled) {
      return tw`
				${isToday ? 'bg-neutral-disabled' : ''}
				aria-disabled:cursor-not-allowed
				text-disabled
			`;
    }
    if (isToday) {
      return tw`
				active:[box-shadow:0px_0px_0px_1.5px_var(--border-primary)]
				bg-inverse
				hover:[box-shadow:0px_0px_0px_1.5px_var(--border-hover)]
				hover:bg-inverse-hover
				text-onPrimary
			`;
    }
    if (isSelected) {
      return tw`
				[box-shadow:0px_0px_0px_1.5px_var(--border-primary)]
			`;
    }
    if (isOutside) {
      return tw`
				${size !== 'small' ? 'bg-neutral-secondary' : ''}
				hover:[box-shadow:0px_0px_0px_1.5px_var(--border-hover)]
				text-secondary
			`;
    }
    return tw`
			${size !== 'small' ? 'bg-neutral-secondary' : ''}
			active:[box-shadow:0px_0px_0px_1.5px_var(--border-primary)]
			hover:[box-shadow:0px_0px_0px_1.5px_var(--border-hover)]
			text-primary
		`;
  }
  return tw`
		${commonStylesLookup[size]}
		${conditionalStylesLookup()}
	`;
};

/**
 * Hook to generate values for Calendar component context.
 * @returns The values for the Calendar component context: size, labels, styleProps.
 */

function useCalendar({
  className = '',
  classNames = {},
  copyLabels,
  size,
  style = {},
  styles = {},
  onVisibleYearChange,
  hasMonthPicker
}) {
  const [monthView, setMonthView] = useState(false);
  const [selectedMonth, setSelectedMonth] = useState(undefined);
  const {
    menuId,
    triggerId
  } = useMonthPickerId();

  // A11y props to associate the trigger with the month picker menu.
  const monthPickerProps = {
    triggerProps: {
      'aria-haspopup': 'grid',
      'aria-expanded': monthView ? true : false,
      'aria-controls': menuId,
      id: triggerId
    },
    menuProps: {
      id: menuId,
      'aria-labelledby': triggerId
    }
  };
  return {
    labels: copyLabels,
    styleProps: getStyleProps({
      className,
      classNames,
      style,
      styles,
      tw: getCalendarStyles({
        size,
        monthView
      })
    }),
    size,
    monthView,
    setMonthView,
    selectedMonth,
    setSelectedMonth,
    monthPickerProps,
    onVisibleYearChange,
    hasMonthPicker
  };
}

/** Calendar context definition */

const CalendarContext = /*#__PURE__*/createContext(undefined);
const CalendarProvider = CalendarContext.Provider;

/**
 * Hook to access the Calendar component context.
 * @returns The values for the Calendar component context: size, labels, styleProps.
 */
function useCalendarContext() {
  const context = useContext(CalendarContext);
  if (context === undefined) {
    throw new Error('useCalendarContext must be used within a CalendarStylesContext');
  }
  return context;
}

/**
 * Hook to generate values for CalendarDay component styles.
 * @returns The values for the CalendarDay: styleProps.
 */

function useCalendarDayStyles({
  className = '',
  classNames = {},
  style = {},
  styles = {},
  isDisabled,
  isOutside,
  isSelected,
  isToday,
  size,
  ...config
}) {
  const {
    monthView
  } = useCalendarContext();
  return getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getCalendarDayStyles({
      ...config,
      size,
      isDisabled,
      isOutside,
      isSelected,
      isToday,
      monthView
    })
  });
}

/** Calendar day context definition */

const CalendarDayStylesContext = /*#__PURE__*/createContext(undefined);
const CalendarDayStylesProvider = CalendarDayStylesContext.Provider;

/**
 * Hook to access the CalendarDay component styles context.
 * @returns The values for the CalendarDay component styles: styleProps.
 */
function useCalendarDayStylesContext() {
  const context = useContext(CalendarDayStylesContext);
  if (context === undefined) {
    throw new Error('useCalendarDayStylesContext must be used within a CalendarDayStylesContext');
  }
  return context;
}

/**
 * Adjusts a date with the given time zone offset.
 *
 * @param date - The date to adjust.
 * @param tzIdentifier - The time zone identifier to adjust the date with.
 * If not provided, the system's time zone will be used.
 * @returns The adjusted date according to the provided time zone identifier.
 */
function adjustDateWithTimeZoneOffset(date, tzIdentifier) {
  const systemTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
  const utcAdjustedDate = zonedTimeToUtc(date, systemTimeZone);
  const zonedDate = utcToZonedTime(utcAdjustedDate, tzIdentifier);
  return zonedDate;
}

/**
 * Formats a date to a human-readable string.
 *
 * @param date - The date to format.
 * @param locale - The locale to format the date with.
 *
 * @returns The formatted date string.
 *
 * @example
 * ```tsx
 * humanReadableDate(new Date('2024-10-16'), 'en-US');
 * ```
 *
 * @output
 *
 * Tuesday, 16 October 2024
 *
 * */
function getHumanReadableDate(date, locale) {
  return format(date, 'EEEE, d LLLL yyyy', {
    locale
  });
}

/**
 * Merges class names and styles with multiple parameters.
 *
 * The properties from each parameter are combined, with the last parameter taking the highest precedence.
 *
 * @param styleProps - An array of objects containing `className` and `style` properties.
 *
 * @example
 * ```ts
 * const { className, style } = getMergedStyleProps(
 * 	{ className: 'class1', style: { color: 'red' } }, // Base styles
 * 	{ className: 'class2', style: { backgroundColor: 'blue' } }, // Internal custom styles
 * 	{ className: 'class3', style: { fontSize: '16px', margin: '10px' } } // Consumer styles
 * );
 * ```
 * @output
 *
 * ```ts
 * {
 * 	className: 'class1 class2 class3',
 * 	style: { color: 'red', backgroundColor: 'blue', fontSize: '16px', margin: '10px' }
 * };
 * ```
 *
 *
 * @returns
 * ```ts
 * {{ className: string; style: React.CSSProperties }}
 * ```
 */
function getMergedStyleProps(...styleProps) {
  let mergedClassName = '';
  let mergedStyle = {};
  if (styleProps.length === 0) {
    throw new Error('At least one parameter must be provided.');
  }
  for (let i = 0; i < styleProps.length; i++) {
    const props = styleProps[i];
    if (props) {
      // Merge class names using twMerge for conflict resolution
      mergedClassName = twMerge(mergedClassName, props.className);
      // Spread styles to merge without overwriting previous ones
      mergedStyle = {
        ...mergedStyle,
        ...props.style
      };
    }
  }
  return {
    className: mergedClassName,
    style: mergedStyle
  };
}
getMergedStyleProps({
  className: 'class1',
  style: {
    color: 'red'
  }
}, {
  className: 'class1',
  style: {
    color: 'red'
  }
}, {
  className: 'class1',
  style: {
    color: 'red'
  }
});

const defaultLanguage = 'en';

/**
 * Represents the mapping of supported language codes with their corresponding `date-fns` locale objects.
 *
 * This allows `date-fns` to format dates according to different locales.
 */
const supportedDateFnsLocales = {
  ar: locales.ar,
  bg: locales.bg,
  cs: locales.cs,
  da: locales.da,
  de: locales.de,
  el: locales.el,
  en: locales.enUS,
  es: locales.es,
  et: locales.et,
  fi: locales.fi,
  fr: locales.fr,
  he: locales.he,
  hr: locales.hr,
  hu: locales.hu,
  is: locales.is,
  it: locales.it,
  ja: locales.ja,
  ko: locales.ko,
  lt: locales.lt,
  lv: locales.lv,
  nl: locales.nl,
  // Norwegian isn't supported, default to enUS
  no: locales.enUS,
  pl: locales.pl,
  pt: locales.pt,
  ro: locales.ro,
  ru: locales.ru,
  sl: locales.sl,
  sq: locales.sq,
  sr: locales.sr,
  sv: locales.sv,
  tr: locales.tr,
  uk: locales.uk,
  zh: locales.zhCN
};

/**
 * @description
 * A calendar component that allows users to select a single date.
 */

function Calendar({
  className = '',
  classNames = {},
  copyLabels = {
    disabledDayLabel: 'No availability',
    disableMonthLabel: 'No availability',
    goTodayLabel: 'Today',
    nextMonthLabel: 'Next month',
    nextYearLabel: 'Next year',
    previousMonthLabel: 'Previous month',
    previousYearLabel: 'Previous year'
  },
  isDateUnavailable,
  localeCode = defaultLanguage,
  maxValue,
  minValue,
  onValueChange,
  onVisibleMonthChange,
  size = 'standard',
  style = {},
  styles = {},
  tzModifier = Intl.DateTimeFormat().resolvedOptions().timeZone,
  value,
  visibleMonth,
  onVisibleYearChange,
  initialFocus,
  hasMonthPicker = true,
  ...consumerProps
}) {
  const {
    styleProps,
    labels,
    monthView,
    setMonthView,
    selectedMonth,
    setSelectedMonth,
    monthPickerProps
  } = useCalendar({
    className,
    classNames,
    copyLabels,
    size,
    style,
    styles,
    onVisibleYearChange,
    hasMonthPicker
  });
  let today = new Date();
  const modifiedToday = adjustDateWithTimeZoneOffset(today, tzModifier);
  if (isValid(modifiedToday)) {
    today = modifiedToday;
  } else {
    // eslint-disable-next-line no-console
    console.error(`${tzModifier} doesn't seem to be valid. Falling back to system time.`);
  }
  const tableStyles = styleProps('table');
  const tableBodyStyles = styleProps('tableBody');
  const rowStyles = styleProps('row');

  // Map or Fallback locale object according to the localeCode
  const locale = supportedDateFnsLocales.hasOwnProperty(localeCode) ? supportedDateFnsLocales[localeCode] : supportedDateFnsLocales[defaultLanguage];
  return /*#__PURE__*/jsx(CalendarProvider, {
    value: {
      styleProps,
      labels,
      size,
      monthView,
      setMonthView,
      selectedMonth,
      setSelectedMonth,
      monthPickerProps,
      onVisibleYearChange,
      hasMonthPicker
    },
    children: /*#__PURE__*/jsx(DayPicker, {
      ...consumerProps,
      // Utilizing DayPicker's style API for elements that are not directly accessible
      classNames: {
        row: rowStyles.className,
        table: tableStyles.className,
        tbody: tableBodyStyles.className,
        ...classNames
      },
      components: {
        Caption: props => Caption({
          ...props
        }),
        Head,
        Row: props => Row({
          ...props
        })
      },
      disabled: isDateUnavailable,
      fixedWeeks: true,
      fromDate: minValue,
      initialFocus: initialFocus,
      locale: locale,
      mode: "single",
      month: visibleMonth,
      onMonthChange: onVisibleMonthChange,
      onSelect: onValueChange,
      selected: value,
      showOutsideDays: true
      // Utilizing DayPicker's style API for elements that are not directly accessible
      ,
      styles: {
        row: rowStyles.style,
        table: tableStyles.style,
        tbody: tableBodyStyles.style,
        ...styles
      },
      toDate: maxValue,
      today: today,
      ...styleProps('root')
    })
  });
}
Calendar.displayName = 'Calendar';
function Caption({
  displayMonth,
  id
}) {
  const {
    locale
  } = useDayPicker();
  const {
    hasMonthPicker
  } = useCalendarContext();
  const {
    styleProps,
    monthView,
    setMonthView,
    size,
    monthPickerProps: {
      triggerProps
    }
  } = useCalendarContext();
  const captionIconEndStyles = styleProps('captionIconEnd');
  const captionLabelStyles = styleProps('captionLabel');
  const displayMonthName = format$1(displayMonth, 'MMMM', {
    locale
  });
  const formattedDisplayMonthName = displayMonthName.charAt(0).toUpperCase() + displayMonthName.slice(1);
  return /*#__PURE__*/jsx(Track, {
    railEnd: /*#__PURE__*/jsx(Nav, {
      displayMonth: displayMonth
    }),
    ...styleProps('caption'),
    children: hasMonthPicker ? /*#__PURE__*/jsxs(Button, {
      classNames: {
        iconEnd: captionIconEndStyles.className,
        label: captionLabelStyles.className
      },
      iconEnd: monthView ? DropdownUpIcon : DropdownDownIcon,
      onClick: () => {
        setMonthView(!monthView);
      },
      size: size,
      styles: {
        iconEnd: captionIconEndStyles.style,
        label: captionLabelStyles.style
      },
      variant: "neutralTertiary",
      ...styleProps('captionWrapper'),
      ...triggerProps,
      children: [formattedDisplayMonthName, ' ', /*#__PURE__*/jsx(Text, {
        ...styleProps('captionYear'),
        children: format$1(displayMonth, 'yyyy', {
          locale
        })
      })]
    }) : /*#__PURE__*/jsxs(Heading, {
      "aria-hidden": "true",
      as: "h3",
      id: id,
      ...styleProps('captionWrapper'),
      children: [/*#__PURE__*/jsxs(Text, {
        ...styleProps('captionLabel'),
        children: [formattedDisplayMonthName, ' ']
      }), /*#__PURE__*/jsx(Text, {
        ...styleProps('captionYear'),
        children: format$1(displayMonth, 'yyyy', {
          locale
        })
      })]
    })
  });
}
function Nav({
  displayMonth
}) {
  const {
    styleProps,
    labels,
    size,
    monthView,
    setMonthView,
    onVisibleYearChange
  } = useCalendarContext();
  const {
    goToMonth,
    nextMonth,
    previousMonth,
    currentMonth
  } = useNavigation();
  const [shouldAnnounceCaption, setShouldAnnounceCaption] = useState(false);
  const {
    dir,
    locale,
    today
  } = useDayPicker();
  const formattedDate = format$1(displayMonth, 'MMMM yyyy', {
    locale
  });
  const isCurrentMonth = isSameMonth(today, currentMonth);
  const onGoTodayClick = () => {
    setShouldAnnounceCaption(true);
    goToMonth(today);
    setMonthView(false);
  };
  const onNextButtonClick = () => {
    if (nextMonth) {
      setShouldAnnounceCaption(true);
      if (monthView) {
        goToMonth(addYears(currentMonth, 1)); // go to next year
        onVisibleYearChange === null || onVisibleYearChange === void 0 || onVisibleYearChange(addYears(currentMonth, 1));
      } else {
        goToMonth(nextMonth);
      }
    }
  };
  const onPreviousButtonClick = () => {
    if (previousMonth) {
      setShouldAnnounceCaption(true);
      if (monthView) {
        goToMonth(addYears(currentMonth, -1)); // go to previous year
        onVisibleYearChange === null || onVisibleYearChange === void 0 || onVisibleYearChange(addYears(currentMonth, -1));
      } else {
        goToMonth(previousMonth);
      }
    }
  };
  return /*#__PURE__*/jsxs(Box, {
    ...styleProps('nav'),
    children: [isCurrentMonth ? null : /*#__PURE__*/jsx(Tooltip, {
      content: labels.goTodayLabel,
      placement: "bottom",
      children: ({
        triggerProps
      }) => /*#__PURE__*/jsx(IconButton, {
        "aria-label": labels.goTodayLabel,
        icon: GoTodayIcon,
        onClick: onGoTodayClick,
        size: size,
        variant: "neutralTertiary",
        ...styleProps('navButtonPrevious'),
        ...triggerProps
      })
    }), /*#__PURE__*/jsx(Tooltip, {
      content: monthView ? labels.previousYearLabel : labels.previousMonthLabel,
      placement: "bottom",
      children: ({
        triggerProps
      }) => /*#__PURE__*/jsx(IconButton, {
        "aria-label": monthView ? labels.previousYearLabel : labels.previousMonthLabel,
        icon: dir === 'rtl' ? ChevronRightIcon : ChevronLeftIcon,
        isDisabled: !previousMonth,
        onClick: onPreviousButtonClick,
        size: size,
        variant: "neutralTertiary",
        ...styleProps('navButtonPrevious'),
        ...triggerProps
      })
    }), /*#__PURE__*/jsx(Tooltip, {
      content: monthView ? labels.nextYearLabel : labels.nextMonthLabel,
      placement: "bottom",
      children: ({
        triggerProps
      }) => /*#__PURE__*/jsx(IconButton, {
        "aria-label": monthView ? labels.nextYearLabel : labels.nextMonthLabel,
        icon: dir === 'rtl' ? ChevronLeftIcon : ChevronRightIcon,
        isDisabled: !nextMonth,
        onClick: onNextButtonClick,
        size: size,
        variant: "neutralTertiary",
        ...styleProps('navButtonNext'),
        ...triggerProps
      })
    }), /*#__PURE__*/jsx(Box, {
      "aria-live": "assertive",
      className: "sr-only",
      children: shouldAnnounceCaption ? formattedDate : null
    })]
  });
}

/**
 * Generate a series of 7 days, starting from the week, to use for formatting
 * the weekday names (Monday, Tuesday, etc.).
 *
 * Not exported from react-day-picker, see original
 * @see https://github.com/gpbl/react-day-picker/blob/main/src/components/HeadRow/utils/getWeekdays.ts
 */
function getWeekdays( /** The date-fns locale object used to localize dates. */
locale, /** The index of the first day of the week (0 - Sunday). */
weekStartsOn, /** Use ISOWeek instead of locale/ */
ISOWeek) {
  const start = ISOWeek ? startOfISOWeek(new Date()) : startOfWeek(new Date(), {
    locale,
    weekStartsOn
  });
  const days = [];
  for (let i = 0; i < 7; i++) {
    const day = addDays(start, i);
    days.push(day);
  }
  return days;
}

/** Render the table head. */
function Head() {
  const {
    formatters,
    ISOWeek,
    locale,
    weekStartsOn
  } = useDayPicker();
  const weekdays = getWeekdays(locale, weekStartsOn, ISOWeek);
  const {
    styleProps,
    hasMonthPicker
  } = useCalendarContext();
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(Box, {
      "aria-hidden": true,
      as: "thead",
      ...styleProps('head'),
      children: /*#__PURE__*/jsx(Box, {
        as: "tr",
        ...styleProps('headRow'),
        children: weekdays.map((day, index) => {
          var _formatters$formatWee;
          return /*#__PURE__*/jsx(Box, {
            as: "th",
            scope: "col",
            ...styleProps('headCell'),
            children: /*#__PURE__*/jsx(Text, {
              ...styleProps('headCellContent'),
              children: (_formatters$formatWee = formatters.formatWeekdayName(day, {
                locale
              })) === null || _formatters$formatWee === void 0 ? void 0 : _formatters$formatWee.toLocaleString().charAt(0).toUpperCase()
            })
          }, index);
        })
      })
    }), hasMonthPicker ? /*#__PURE__*/jsx(MonthsGrid, {}) : null]
  });
}

/** Render a row in the calendar. */
function Row({
  ...props
}) {
  const {
    styles,
    classNames
  } = useDayPicker();
  return /*#__PURE__*/jsx("tr", {
    className: classNames.row,
    style: styles.row,
    children: props.dates.map(date => /*#__PURE__*/jsx(Day, {
      date: date,
      displayMonth: props.displayMonth
    }, getUnixTime(date)))
  });
}

/**
 * The content of a day cell – as a button or span element according to its
 * modifiers.
 */
function Day({
  date,
  displayMonth
}) {
  const buttonRef = useRef(null);
  const {
    today,
    locale
  } = useDayPicker();
  const {
    activeModifiers,
    buttonProps: {
      'aria-selected': ariaSelected,
      // @ts-expect-error: role is not in the types for buttonProps
      role: _unusedRoleProp,
      ...buttonProps
    },
    isHidden
  } = useDayRender(date, displayMonth, buttonRef);
  const {
    size,
    styleProps: consumerStyleProps
  } = useCalendarContext();
  const isCurrentDay = isSameDay(today, date);
  const isDisabled = !!activeModifiers.disabled;
  const styleProps = useCalendarDayStyles({
    isDisabled: isDisabled,
    isMonthView: false,
    isOutside: !!activeModifiers.outside,
    isSelected: !!activeModifiers.selected,
    isToday: isCurrentDay,
    size
  });
  const {
    labels
  } = useCalendarContext();
  const isSelected = ariaSelected === true || ariaSelected === 'true';
  const humanReadableDate = getHumanReadableDate(date, locale);
  return /*#__PURE__*/jsx(CalendarDayStylesProvider, {
    value: styleProps,
    children: /*#__PURE__*/jsx(Box, {
      "aria-selected": ariaSelected,
      as: "td",
      ...getMergedStyleProps(styleProps('cell'), consumerStyleProps('cell')),
      children: isHidden ? null : /*#__PURE__*/jsx(Box, {
        as: "span",
        children: isDisabled ? /*#__PURE__*/jsx(Tooltip, {
          content: labels.disabledDayLabel,
          placement: "bottom",
          children: ({
            triggerProps
          }) => /*#__PURE__*/jsx(Box, {
            ...triggerProps,
            children: /*#__PURE__*/jsx(DayCell, {
              ...buttonProps,
              "aria-disabled": "true",
              buttonRef: buttonRef,
              humanReadableDate: humanReadableDate,
              isSelected: isSelected,
              children: buttonProps.children
            })
          })
        }) : /*#__PURE__*/jsx(DayCell, {
          ...buttonProps,
          buttonRef: buttonRef,
          humanReadableDate: humanReadableDate,
          isSelected: isSelected,
          children: buttonProps.children
        })
      })
    })
  });
}
function DayCell({
  buttonRef,
  children,
  humanReadableDate,
  isSelected,
  ...restProps
}) {
  const {
    styleProps: consumerStyleProps
  } = useCalendarContext();
  const styleProps = useCalendarDayStylesContext();
  const [announcement, setAnnouncement] = useState('');
  useEffect(() => {
    if (isSelected) {
      setAnnouncement(`Selected date: ${humanReadableDate}`);
    }
  }, [isSelected, humanReadableDate]);
  return /*#__PURE__*/jsxs(Box, {
    ...restProps,
    "aria-label": `${humanReadableDate}${isSelected ? ' selected' : ''}`,
    as: "button",
    name: "day",
    ref: buttonRef,
    ...getMergedStyleProps(styleProps('cellButton'), consumerStyleProps('cellButton')),
    children: [/*#__PURE__*/jsx(Text, {
      ...getMergedStyleProps(styleProps('cellText'), consumerStyleProps('cellText')),
      children: children
    }), /*#__PURE__*/jsx(Box, {
      "aria-live": "polite",
      as: "span",
      className: "sr-only",
      children: announcement
    })]
  });
}

/**
 *  Renders a grid of months using the styles from the calendar context
 */
function MonthsGrid() {
  const {
    styleProps,
    monthPickerProps: {
      menuProps
    },
    monthView
  } = useCalendarContext();
  const {
    monthLabels
  } = useMonthPicker();
  return /*#__PURE__*/jsx(Box, {
    as: "tbody",
    ...menuProps,
    children: monthView ? /*#__PURE__*/jsx(Box, {
      as: "tr",
      children: /*#__PURE__*/jsx(Box, {
        as: "td",
        ...styleProps('monthGrid'),
        children: /*#__PURE__*/jsx(FocusScope, {
          children: monthLabels.map((monthLabel, monthIndex) => {
            return /*#__PURE__*/jsx(MonthCell, {
              monthIndex: monthIndex,
              monthLabel: monthLabel
            }, monthIndex);
          })
        })
      })
    }) : null
  });
}

/**
 * Renders individual month cells within a grid, allowing navigation and selection of months.
 * Handles focus management and keyboard navigation for accessibility.
 */
function MonthCell({
  monthIndex,
  monthLabel
}) {
  const {
    size,
    labels,
    setMonthView,
    setSelectedMonth,
    styleProps: consumerStyleProps
  } = useCalendarContext();
  const {
    goToMonth,
    currentMonth
  } = useNavigation();
  const {
    onKeyDown
  } = useMonthPicker();
  const currentYear = getYear(currentMonth);
  const {
    selectedMonthAnnouncement,
    isCurrentMonth,
    isSelected,
    isDisabled
  } = useMonthRender({
    monthLabel,
    monthIndex
  });
  const styleProps = useCalendarDayStyles({
    isDisabled,
    isMonthView: true,
    isOutside: false,
    // Months have no outside state.
    isSelected,
    isToday: isCurrentMonth,
    size
  });
  return isDisabled ? /*#__PURE__*/jsx(Tooltip, {
    content: labels.disableMonthLabel,
    placement: "bottom",
    children: ({
      triggerProps
    }) => /*#__PURE__*/jsx(Box, {
      ...getMergedStyleProps(styleProps('cell'), consumerStyleProps('cell')),
      ...triggerProps,
      children: /*#__PURE__*/jsx(Box, {
        "aria-disabled": "true",
        as: "button",
        disabled: true,
        name: "month",
        ...getMergedStyleProps(styleProps('cellButton'), consumerStyleProps('cellButton')),
        tabIndex: -1,
        children: /*#__PURE__*/jsx("span", {
          ...getMergedStyleProps(styleProps('cellText'), consumerStyleProps('cellText')),
          children: monthLabel.short
        })
      })
    })
  }) : /*#__PURE__*/jsx(Box, {
    ...getMergedStyleProps(styleProps('cell'), consumerStyleProps('cell')),
    children: /*#__PURE__*/jsxs(Box, {
      "aria-label": `${monthLabel.full} ${currentYear}`,
      as: "button",
      ...getMergedStyleProps(styleProps('cellButton'), consumerStyleProps('cellButton')),
      name: "month",
      onClick: () => {
        goToMonth(new Date(currentYear, monthIndex));
        setMonthView(false);
        setSelectedMonth(new Date(currentYear, monthIndex));
      },
      onKeyDown: onKeyDown,
      tabIndex: 0,
      children: [/*#__PURE__*/jsx(Box, {
        "aria-hidden": "true",
        as: "span",
        ...getMergedStyleProps(styleProps('cellText'), consumerStyleProps('cellText')),
        children: monthLabel.short
      }), selectedMonthAnnouncement ? /*#__PURE__*/jsx(Box, {
        "aria-live": "polite",
        as: "span",
        className: "sr-only",
        children: selectedMonthAnnouncement
      }) : /*#__PURE__*/jsxs(Box, {
        as: "span",
        children: [monthLabel.full, " ", currentYear]
      })]
    })
  });
}

export { Calendar, Day, MonthCell, Row, getWeekdays };
