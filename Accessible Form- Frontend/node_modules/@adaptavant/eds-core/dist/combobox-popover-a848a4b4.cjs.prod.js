'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('@react-aria/utils');
var React = require('react');
var context = require('./context-38cb595b.cjs.prod.js');
var index = require('./index-7955fb8e.cjs.prod.js');
var visuallyHidden = require('./visually-hidden-dbb08e35.cjs.prod.js');
var use_click_away = require('./use-click-away-3152695d.cjs.prod.js');
var jsxRuntime = require('react/jsx-runtime');
var popover = require('./popover-f1e8b1ac.cjs.prod.js');
var context$1 = require('./context-008fcad0.cjs.prod.js');
require('./tw-merge-885aa7a8.cjs.prod.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.prod.js');

const ComboboxPopover = /*#__PURE__*/React.forwardRef(function ComboboxPopover(props, forwardedRef) {
  const {
    popoverProps
  } = useComboboxPopover(props, forwardedRef);
  return /*#__PURE__*/jsxRuntime.jsx(popover.Popover, {
    ...popoverProps
  });
});
ComboboxPopover.displayName = 'ComboboxPopover';
function useComboboxPopover({
  children,
  className = '',
  classNames = {},
  shouldUsePortal = true,
  style = {},
  styles = {},
  ...consumerProps
}, forwardedRef) {
  const {
    closeMenu,
    isMenuOpen,
    popover,
    popoverId
  } = context.useDropdownContext();
  const {
    labelRef
  } = context$1.useFieldContext();

  // When the dropdown is opened, clicking outside should close it
  const handleClickOutside = React.useCallback(() => {
    if (isMenuOpen) closeMenu();
  }, [closeMenu, isMenuOpen]);
  const {
    popoverRef,
    referenceRef,
    getPopoverProps
  } = popover;
  const popoverProps = React.useMemo(() => getPopoverProps(), [getPopoverProps]);
  const memoizedRefs = React.useMemo(() => [labelRef, popoverRef, referenceRef], [labelRef, popoverRef, referenceRef]);
  use_click_away.useClickAway({
    refs: memoizedRefs,
    onClickAway: handleClickOutside
  });
  const styleProps = React.useMemo(() => index.getStyleProps({
    className,
    classNames,
    style,
    styles
  }), [className, classNames, style, styles]);
  return {
    popoverProps: React.useMemo(() => {
      return {
        ...consumerProps,
        children: isMenuOpen ? children : null,
        id: popoverId,
        ref: utils.mergeRefs(forwardedRef, popoverProps.ref),
        role: 'presentation',
        shouldUsePortal,
        ...styleProps('root',
        // Only apply styles when the menu is open, otherwise hide it
        isMenuOpen ? popoverProps.style : visuallyHidden.visuallyHiddenStyles)
      };
    }, [children, consumerProps, forwardedRef, isMenuOpen, popoverId, popoverProps.ref, popoverProps.style, shouldUsePortal, styleProps])
  };
}

exports.ComboboxPopover = ComboboxPopover;
exports.useComboboxPopover = useComboboxPopover;
