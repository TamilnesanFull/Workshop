'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var context = require('./context-8bcac1ff.cjs.dev.js');
var index = require('./index-3bdbdb42.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
var box = require('./box-88b49271.cjs.dev.js');
require('./tw-merge-70bc959c.cjs.dev.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.dev.js');

const getClickableAdornmentStyles = () => ({
  root: `
			cursor-pointer
			text-tertiary
		`
});

/**
 * ClickableAdornment
 *
 * @description component to use inside of adornment slots that will focus the
 * form control when clicked.
 */
const ClickableAdornment = /*#__PURE__*/React.forwardRef(function ClickableAdornment({
  as = 'span',
  children,
  className = '',
  classNames = {},
  onClick,
  style = {},
  styles = {},
  ...consumerProps
}, forwardedRef) {
  const styleProps = index.getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getClickableAdornmentStyles()
  });
  const formControlRef = context.useFormControlRef();
  function handleClick(event) {
    if (onClick) {
      onClick(event);
    }
    if (!formControlRef.current) {
      throw new Error('Ref returned from useFormControlRef not attached to component');
    }
    formControlRef.current.focus();
  }
  return /*#__PURE__*/jsxRuntime.jsx(box.Box, {
    ...consumerProps,
    "aria-hidden": true,
    as: as,
    onClick: handleClick,
    ref: forwardedRef,
    ...styleProps('root'),
    children: children
  });
});
ClickableAdornment.displayName = 'ClickableAdornment';

exports.ClickableAdornment = ClickableAdornment;
