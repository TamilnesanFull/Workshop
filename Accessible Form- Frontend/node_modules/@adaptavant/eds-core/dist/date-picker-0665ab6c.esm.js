'use client';
import { useContext, createContext, forwardRef, useMemo, useState, useCallback, useRef, Fragment } from 'react';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { FocusScope } from '@react-aria/focus';
import { mergeRefs, useId, mergeProps } from '@react-aria/utils';
import { v as visuallyHiddenStyles } from './visually-hidden-60af4b9e.esm.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { useFieldContext, useInputA11yProps } from './context-2a1498a6.esm.js';
import { useClickAway } from './use-click-away-a74e18f7.esm.js';
import { Popover, usePopover } from './popover-55e45b10.esm.js';
import { a as getTextInputStyles } from './styles-12c293a4.esm.js';
import { c as composeId } from './compose-id-1f2e6139.esm.js';
import { B as Box } from './box-a5dda214.esm.js';
import { D as DropdownUpIcon } from './dropdown-up-icon-07da5d49.esm.js';
import { D as DropdownDownIcon } from './dropdown-down-icon-372942b0.esm.js';
import { useCombinedFocusContainerInputStyles, FocusContainer } from './focus-container-9b45fd51.esm.js';
import { Button } from './button-22306f71.esm.js';
import { t as typography } from './styles-267c9284.esm.js';
import { t as tw } from './tw-c6a9a210.esm.js';
import { i as inlinePaddingStylesLookup } from './styles-56119827.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './styles-53001919.esm.js';

const DatePickerContext = /*#__PURE__*/createContext(undefined);
const DatePickerProvider = DatePickerContext.Provider;

// Use this hook to access the context
const useDatePickerContext = () => {
  const context = useContext(DatePickerContext);
  if (!context) {
    throw new Error('useDatePickerContext must be used within a DatePickerProvider');
  }
  return context;
};

const DatePickerPopover = /*#__PURE__*/forwardRef(function DatePickerPopover({
  children
}, forwardedRef) {
  const {
    labelId
  } = useFieldContext();
  const {
    isOpen,
    triggerId,
    popoverId,
    close,
    popover,
    styleProps
  } = useDatePickerContext();
  const {
    getPopoverProps,
    popoverRef,
    referenceRef
  } = popover;
  const popoverProps = useMemo(() => getPopoverProps(), [getPopoverProps]);
  const memoizedRefs = useMemo(() => [popoverRef, referenceRef], [popoverRef, referenceRef]);
  useClickAway({
    refs: memoizedRefs,
    onClickAway: () => close(),
    isDisabled: !isOpen // Disable when popover is closed
  });
  const handleKeyDown = event => {
    if (event.key === 'Escape') close();
  };
  if (!isOpen) return null;
  return /*#__PURE__*/jsx(FocusScope, {
    contain: true,
    restoreFocus: true,
    children: /*#__PURE__*/jsx(Popover
    // ARIA dialog and alertdialog nodes should have an accessible name
    // See: https://dequeuniversity.com/rules/axe/4.4/aria-dialog-name
    , {
      "aria-labelledby": `${labelId} ${triggerId}`,
      id: popoverId,
      onKeyDownCapture: handleKeyDown,
      ref: mergeRefs(forwardedRef, popoverProps.ref),
      role: "dialog",
      tabIndex: -1,
      ...styleProps('popover', isOpen ? popoverProps.style : visuallyHiddenStyles),
      children: typeof children === 'function' ? children({
        close
      }) : children
    })
  });
});

function useDatePickerTriggerProps({
  forwardedRef
} = {}) {
  const {
    isInvalid,
    isRequired,
    isDisabled,
    labelId
  } = useFieldContext();
  const a11yProps = useInputA11yProps({
    isDisabled,
    isInvalid,
    isRequired
  });
  const {
    isOpen,
    setIsOpen,
    triggerId,
    popoverId,
    popover: {
      getReferenceProps
    }
  } = useDatePickerContext();
  const popoverRefProps = getReferenceProps();
  const toggleOpen = () => setIsOpen(prev => !prev);
  return {
    triggerProps: {
      ...a11yProps,
      'aria-controls': popoverId,
      'aria-expanded': isOpen,
      'aria-haspopup': true,
      'aria-labelledby': `${labelId} ${triggerId}`,
      ...popoverRefProps,
      onClick: isDisabled ? undefined : toggleOpen,
      ref: mergeRefs(popoverRefProps.ref, forwardedRef)
    }
  };
}
const useDatePickerContextValues = ({
  styleProps
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const id = useId();
  const triggerId = composeId(id, 'content');
  const popoverId = composeId(id, 'popover');
  const popover = usePopover({
    matchReferenceWidth: false,
    offset: 4,
    placement: 'bottom-start',
    maxWidth: 'fit-content'
  });
  const open = useCallback(() => setIsOpen(true), [setIsOpen]);
  const close = useCallback(() => setIsOpen(false), [setIsOpen]);
  return {
    isOpen,
    setIsOpen,
    triggerId,
    popoverId,
    popover,
    open,
    close,
    styleProps
  };
};

const DatePickerTrigger = /*#__PURE__*/forwardRef(function DatePickerTrigger({
  className = '',
  classNames = {},
  style = {},
  styles = {},
  formattedValue,
  placeholder,
  ...consumerProps
}, forwardedRef) {
  const {
    isDisabled,
    isInvalid,
    size,
    variant
  } = useFieldContext();
  const context = useDatePickerContext();
  const {
    isOpen,
    triggerId,
    styleProps
  } = context;
  const {
    triggerProps
  } = useDatePickerTriggerProps({
    forwardedRef
  });
  const focusContainerRef = useRef(null);
  const focusContainerStyleProps = useCombinedFocusContainerInputStyles({
    className,
    classNames,
    isDisabled,
    isInvalid,
    style,
    styles,
    tw: getTextInputStyles({
      hasAdornmentEnd: false,
      hasAdornmentStart: false,
      isDisabled,
      size
    })
  });
  const triggerStyleProps = {
    className: styleProps('trigger').className,
    style: styleProps('trigger').style,
    classNames: {
      label: styleProps('triggerLabel').className,
      iconEnd: styleProps('triggerChevron').className
    },
    styles: {
      label: styleProps('triggerLabel').style,
      iconEnd: styleProps('triggerChevron').style
    }
  };
  const ValueOrPlaceholder = useCallback(() => {
    if (formattedValue) return formattedValue;
    return /*#__PURE__*/jsx(Box, {
      as: "span",
      className: "text-secondary group-aria-disabled:text-disabled",
      children: placeholder
    });
  }, [formattedValue, placeholder]);
  return /*#__PURE__*/jsx(FocusContainer, {
    className: "inline-flex",
    classNames: {
      focusIndicator: focusContainerStyleProps('focusIndicator').className
    },
    isDisabled: isDisabled,
    isGhost: variant === 'subtle',
    isInvalid: isInvalid,
    ref: focusContainerRef,
    styles: {
      focusIndicator: {
        ...focusContainerStyleProps('focusIndicator').style
      }
    },
    children: ({
      ref
    }) => /*#__PURE__*/jsxs(Fragment, {
      children: [/*#__PURE__*/jsxs(Box, {
        className: "sr-only",
        id: triggerId,
        children: [', ', formattedValue || placeholder]
      }), /*#__PURE__*/jsx(Button, {
        ...mergeProps(consumerProps, triggerProps),
        iconEnd: isOpen ? DropdownUpIcon : DropdownDownIcon,
        isDisabled: isDisabled,
        ref: mergeRefs(ref, triggerProps.ref),
        size: size,
        variant: "neutralSecondary",
        ...triggerStyleProps,
        children: /*#__PURE__*/jsx(ValueOrPlaceholder, {})
      })]
    })
  });
});

const getDatePickerStyles = ({
  size
}) => ({
  root: tw``,
  triggerChevron: tw`
		fill-secondary
		group-aria-disabled:fill-tertiary
		me-0
	`,
  popover: tw`
		flex
		items-center
		px-3
		py-3.5
	`,
  trigger: tw`
		${typography[size]}
		${inlinePaddingStylesLookup[size]}
		aria-disabled:bg-neutral-disabled
		aria-disabled:text-disabled-secondary
		hover:bg-canvas
		border-none
		peer
		rounded-6px
	`,
  triggerLabel: tw`
		font-regular
	`
});

/**
 * DatePicker
 *
 * @description A component that allows users to select a date by opening a calendar in a popover when the trigger is pressed.
 *
 * @example
 * <DatePicker
 *  placeholder="Enter a date"
 *  formattedValue={selectedDate.toDateString()}
 *  calendar={<Calendar {...calendarProps} />}
 * />
 *
 * @see https://earth.anywhere.co/components/date-picker
 */
const DatePicker = /*#__PURE__*/forwardRef(function DatePicker({
  className = '',
  classNames = {},
  style = {},
  styles = {},
  calendar,
  placeholder,
  trigger,
  formattedValue,
  ...consumerProps
}, forwardedRef) {
  const {
    size
  } = useFieldContext();

  // Styles
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getDatePickerStyles({
      size
    })
  });
  const context = useDatePickerContextValues({
    styleProps
  });
  return /*#__PURE__*/jsx(DatePickerProvider, {
    value: context,
    children: /*#__PURE__*/jsxs(Box, {
      ...consumerProps,
      ...styleProps('root'),
      children: [/*#__PURE__*/jsx(DatePickerTriggerWrapper, {
        formattedValue: formattedValue,
        placeholder: placeholder,
        ref: forwardedRef,
        trigger: trigger
      }), /*#__PURE__*/jsx(DatePickerPopover, {
        ...styleProps('popover'),
        children: calendar
      })]
    })
  });
});
const DatePickerTriggerWrapper = /*#__PURE__*/forwardRef(function DatePickerTriggerWrapper({
  trigger,
  formattedValue,
  placeholder
}, forwardedRef) {
  const {
    isOpen
  } = useDatePickerContext();
  const {
    triggerProps
  } = useDatePickerTriggerProps({
    forwardedRef
  });
  if (trigger) {
    return trigger({
      triggerProps,
      isOpen,
      placeholder
    });
  }
  return /*#__PURE__*/jsx(DatePickerTrigger, {
    formattedValue: formattedValue,
    placeholder: placeholder,
    ref: forwardedRef
  });
});

export { DatePicker };
