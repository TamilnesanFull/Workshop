'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('@react-aria/utils');
var React = require('react');
var context = require('./context-1e651be3.cjs.dev.js');
var use_dropdown_item_id = require('./use-dropdown-item-id-96d41692.cjs.dev.js');
var useScrollIntoView = require('./use-scroll-into-view-071db300.cjs.dev.js');
var index = require('./index-3bdbdb42.cjs.dev.js');
var forwardRef = require('./forward-ref-6c731e6e.cjs.dev.js');
var context$1 = require('./context-1d59120d.cjs.dev.js');
var styles = require('./styles-8c29dd64.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
var checkIcon = require('./check-icon-e4316b72.cjs.dev.js');
var spacer = require('./spacer-392b5761.cjs.dev.js');
var menu_item = require('./menu-item-9ab00f33.cjs.dev.js');
var align_child_to_text = require('./align-child-to-text-b4992541.cjs.dev.js');
require('./utils-1d447d37.cjs.dev.js');
require('./tw-merge-70bc959c.cjs.dev.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.dev.js');
require('./tw-cabb7e4c.cjs.dev.js');
require('./styles-32c512c4.cjs.dev.js');
require('./box-88b49271.cjs.dev.js');

/**
 * Item to be rendered inside of a ComboboxListbox.
 */
const ComboboxItem = forwardRef.forwardRefWithGenericComponent(function ComboboxItem({
  children,
  avoidCloseOnClick,
  className = '',
  classNames = {},
  id: idProp,
  isDisabled = false,
  onClick,
  option,
  style = {},
  styles: styles$1 = {},
  ...consumerProps
}, forwardedRef) {
  const {
    activeDescendantId,
    closeMenu
  } = context.useDropdownContext();
  const {
    onSelectionChange,
    selectedKey,
    selectedOption
  } = context$1.useCombobox();
  const id = use_dropdown_item_id.useDropdownItemId(idProp);
  const isHighlighted = id === activeDescendantId;
  const isSelected = Boolean(selectedOption && selectedOption[selectedKey] === option[selectedKey]);

  // Ensure the active descendant is visible in long lists with overflow.
  // Without this, the active item may not be visible on the screen.
  const scrollIntoView = useScrollIntoView.useScrollIntoView(isHighlighted);
  const handleOnClick = React.useCallback(event => {
    if (typeof onClick === 'function') {
      onClick(event);
    }
    onSelectionChange(option);
    if (avoidCloseOnClick) return;
    closeMenu();
  }, [avoidCloseOnClick, closeMenu, onClick, onSelectionChange, option]);
  const railStart = /*#__PURE__*/jsxRuntime.jsx(align_child_to_text.AlignChildToText, {
    children: isSelected ? /*#__PURE__*/jsxRuntime.jsx(checkIcon.CheckIcon, {
      size: "16"
    }) : /*#__PURE__*/jsxRuntime.jsx(spacer.Spacer, {
      className: "w-4"
    })
  });
  const styleProps = index.getStyleProps({
    className,
    classNames,
    style,
    styles: styles$1,
    tw: styles.getComboboxItemStyles(Boolean(selectedOption))
  });
  const menuItemTrackStyleProps = {
    className: styleProps('root').className,
    classNames: {
      center: styleProps('center').className,
      railStart: styleProps('railStart').className,
      railEnd: styleProps('railEnd').className
    },
    style: styleProps('root').style,
    styles: {
      center: styleProps('center').style,
      railStart: styleProps('railStart').style,
      railEnd: styleProps('railEnd').style
    }
  };
  return /*#__PURE__*/jsxRuntime.jsx(menu_item.MenuItem, {
    ...consumerProps,
    "aria-selected": isSelected,
    id: id,
    isDisabled: isDisabled,
    isHighlighted: isHighlighted,
    isSelected: isSelected,
    onClick: isDisabled ? undefined : handleOnClick,
    railStart: selectedOption ? railStart : null,
    ref: utils.mergeRefs(scrollIntoView, forwardedRef),
    role: "option",
    tabIndex: -1,
    ...menuItemTrackStyleProps,
    children: children
  });
});

exports.ComboboxItem = ComboboxItem;
