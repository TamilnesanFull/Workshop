'use client';
import { DropdownProvider } from './context-6e374e37.esm.js';
import { useDropdownContextValues } from './use-dropdown-context-values-349b04a0.esm.js';
import { usePopulateDescendantNodes } from './use-populate-descendant-nodes-9523f130.esm.js';
import { ComboboxProvider } from './context-a9b03758.esm.js';
import { jsx } from 'react/jsx-runtime';

function Combobox({
  children,
  inputValue,
  menuTrigger = 'input',
  onClear,
  onInputChange,
  onSelectionChange,
  popoverMatchReferenceWidth = false,
  popoverMaxHeight = 356,
  popoverMaxWidth = 400,
  popoverOffset = 4,
  popoverPlacement = 'bottom-start',
  selectedKey,
  selectedOption,
  strategy = 'absolute'
}) {
  const dropdownContext = useDropdownContextValues({
    popoverMatchReferenceWidth,
    popoverMaxHeight,
    popoverMaxWidth,
    popoverOffset,
    popoverPlacement,
    strategy
  });
  const {
    dispatch,
    isMenuOpen,
    popover
  } = dropdownContext;
  const descendantNodeSelector = '[role="option"]';
  usePopulateDescendantNodes({
    isMenuOpen,
    children,
    dispatch,
    popoverRef: popover.popoverRef,
    selectors: descendantNodeSelector
  });
  return /*#__PURE__*/jsx(DropdownProvider, {
    value: dropdownContext,
    children: /*#__PURE__*/jsx(ComboboxProvider, {
      value: {
        inputValue,
        menuTrigger,
        onClear,
        onInputChange,
        onSelectionChange,
        selectedKey,
        selectedOption
      },
      children: typeof children === 'function' ? children({
        isMenuOpen
      }) : children
    })
  });
}
Combobox.displayName = 'Combobox';

export { Combobox };
