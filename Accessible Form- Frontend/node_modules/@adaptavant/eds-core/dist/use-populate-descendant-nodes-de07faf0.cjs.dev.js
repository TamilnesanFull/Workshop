'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');

/**
 * Reusable hook that populates the `descendantNodes` for various dropdown.
 */
function usePopulateDescendantNodes({
  children,
  dispatch,
  isMenuOpen,
  popoverRef,
  selectors,
  isMobile
}) {
  React.useEffect(() => {
    if (!isMenuOpen) return;
    if (!popoverRef.current) {
      throw new Error('popoverRef is not attached to the Popover.');
    }
    if (isMobile) {
      // setTimeout to ensure that Modal is rendered before querying for descendant nodes (avoid race conditions)
      setTimeout(() => {
        var _popoverRef$current;
        dispatch({
          type: 'SET_DESCENDANT_NODES',
          payload: {
            nodes: (_popoverRef$current = popoverRef.current) === null || _popoverRef$current === void 0 ? void 0 : _popoverRef$current.querySelectorAll(selectors)
          }
        });
      }, 10);
    } else {
      var _popoverRef$current2;
      dispatch({
        type: 'SET_DESCENDANT_NODES',
        payload: {
          nodes: (_popoverRef$current2 = popoverRef.current) === null || _popoverRef$current2 === void 0 ? void 0 : _popoverRef$current2.querySelectorAll(selectors)
        }
      });
    }
  }, [
  // adding children as a dependency so the useEffect fires again whenever
  // children changes since we need to use the imperative `querySelectorAll`
  // to get the descendant nodes.
  children, dispatch, isMenuOpen, popoverRef, selectors, isMobile]);
}

exports.usePopulateDescendantNodes = usePopulateDescendantNodes;
