'use client';
import { FocusScope } from '@react-aria/focus';
import { useState, useRef, useEffect, useMemo } from 'react';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { m as mergeProps } from './merge-props-5c13cba9.esm.js';
import { useTabsContext } from './context-d6dd3744.esm.js';
import { c as getTabListStyles } from './styles-33ab6633.esm.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { B as Box } from './box-a5dda214.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import '@react-aria/utils';
import './cx-c5d68be6.esm.js';
import 'clsx';
import './merge-ids-c2d2d3d7.esm.js';
import './tw-c6a9a210.esm.js';

/**
 * Represents a wrapper for TabItems.
 * It highlights the selected element with a line and displays a scroll mask when necessary
 */
function TabList({
  className = '',
  classNames = {},
  style = {},
  styles = {},
  children,
  ...consumerProps
}) {
  const {
    size
  } = useTabsContext();
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getTabListStyles({
      size
    })
  });
  const {
    selectedElement,
    tabListA11yProps
  } = useTabsContext();
  const {
    scrollRef,
    visibleMasks
  } = useScrollMask();
  const leftMaskIsVisible = ['both', 'end'].includes(visibleMasks);
  const rightMaskIsVisible = ['both', 'start'].includes(visibleMasks);
  const tabHighlighterStyles = useTabHighlighterStyles();
  return /*#__PURE__*/jsx(FocusScope, {
    children: /*#__PURE__*/jsxs(Box, {
      ...styleProps('root'),
      children: [/*#__PURE__*/jsxs(Box, {
        ...mergeProps(consumerProps, tabListA11yProps),
        ...styleProps('tabItemWrapper'),
        ref: scrollRef,
        children: [children, selectedElement ? /*#__PURE__*/jsx(Box, {
          as: "span",
          "data-item-highlighter": true,
          ...styleProps('highlighter'),
          style: {
            ...styleProps('highlighter').style,
            ...tabHighlighterStyles
          }
        }) : null]
      }), /*#__PURE__*/jsx(Box, {
        as: "span",
        ...styleProps('scrollMaskStart'),
        style: {
          ...styleProps('scrollMaskStart').style,
          background: `linear-gradient(90deg, var(--background-canvas) 0%, transparent 100%)`,
          opacity: leftMaskIsVisible ? 1 : 0
        }
      }), /*#__PURE__*/jsx(Box, {
        as: "span",
        ...styleProps('scrollMaskEnd'),
        style: {
          ...styleProps('scrollMaskEnd').style,
          background: `linear-gradient(90deg, transparent 0%, var(--background-canvas) 100%)`,
          opacity: rightMaskIsVisible ? 1 : 0
        }
      })]
    })
  });
}
TabList.displayName = 'TabList';

// This scroll mask functionality is already implemented for the booking app, but it is not exportable. Refer: https://github.com/Adaptavant/awds/pull/682
// May be in future, this hook will allow us to reuse the functionality in other parts of the monorepo (design system, booking app, etc.,) where it is required.

/**
 * Custom React hook that manages the visibility of scroll masks
 * based on the scroll position of the scrollable element.
 */
function useScrollMask() {
  const [visibleMasks, setVisibleMasks] = useState('none');
  const scrollRef = useRef(null);
  useEffect(() => {
    const scrollElement = scrollRef.current;
    if (scrollElement) {
      // Function to handle scroll events and update the visibility of scroll masks.
      const handleScroll = () => {
        const {
          clientWidth,
          scrollWidth,
          scrollLeft
        } = scrollElement;

        // Don't show masks if there's no scroll available
        if (scrollWidth === clientWidth) {
          setVisibleMasks('none');
          return;
        }

        // LTE/GTE to cater for Safari's bounce
        if (scrollLeft <= 0) {
          setVisibleMasks('start');
        } else if (Math.round(scrollLeft) >= scrollWidth - clientWidth) {
          setVisibleMasks('end');
        } else {
          setVisibleMasks('both');
        }
      };
      handleScroll();

      // For scroll events
      scrollElement.addEventListener('scroll', handleScroll, {
        passive: true
      }); // { passive: true } for better performance. Refer: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#passive-event-listeners.

      // For resize events
      const resizeObserver = new ResizeObserver(() => {
        handleScroll();
      });
      resizeObserver.observe(scrollElement);
      return () => {
        scrollElement.removeEventListener('scroll', handleScroll);
        resizeObserver.disconnect();
      };
    }
  }, []);
  return {
    scrollRef,
    visibleMasks
  };
}

/**
 * Custom React hook that calculates the width and offset for the tab highlighter
 */
function useTabHighlighterStyles() {
  const {
    selectedElement
  } = useTabsContext();
  const [highlighterStyles, setHighlighterStyles] = useState(undefined);

  // Calculate width and offset for the tab highlighter
  useMemo(() => {
    const selectedElementOriginalWidth = (selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.offsetWidth) ?? 0;
    const selectedElementLeft = (selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.offsetLeft) ?? 0;
    setHighlighterStyles({
      width: `${selectedElementOriginalWidth}px`,
      transform: `translateX(${selectedElementLeft}px)`
    });
  }, [selectedElement]);
  return highlighterStyles;
}

export { TabList };
