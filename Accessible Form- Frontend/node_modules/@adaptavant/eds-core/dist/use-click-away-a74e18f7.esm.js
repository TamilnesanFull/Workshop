'use client';
import { useRef, useEffect } from 'react';
import { useIsomorphicLayoutEffect } from './use-isomorphic-layout-effect-354c38ea.esm.js';

/**
 * Hook that detects clicks outside specified elements and invokes a callback.
 */
function useClickAway({
  refs,
  onClickAway,
  isDisabled
}) {
  // Store the callback in a ref.
  // This is used to ensure the latest callback is used without needing to add
  // it to the dependency array for the useEffect below,
  // which could lead to unnecessary re-renders.
  const callbackRef = useRef(onClickAway);

  // Update the value of the callbackRef on every render (notice the lack of a
  // dependency array here).
  // useLayoutEffect is used instead of useEffect to ensure callbackRef.current is
  // immediately updated after render. useEffect runs after the paint, which could
  // result in using an outdated callback if an event occurs just after rendering.
  useIsomorphicLayoutEffect(() => {
    callbackRef.current = onClickAway;
  });
  useEffect(() => {
    const handleClickAway = event => {
      if (isDisabled) {
        return;
      }
      for (const ref of refs) {
        const element = ref.current;
        if (element && element.contains(event.target)) {
          // Click is inside one of the tracked elements,
          // no need to invoke the callback.
          return;
        }
      }
      callbackRef.current(event);
    };
    document.addEventListener('pointerdown', handleClickAway);
    return () => {
      document.removeEventListener('pointerdown', handleClickAway);
    };
  }, [refs, isDisabled]);
}

export { useClickAway };
