import { g as getStyleProps, u as useComponentStyleParts } from './index-dd10a77e.esm.js';
export { g as unstable_getStyleProps } from './index-dd10a77e.esm.js';
export { CreatePortalProvider, useCreatePortal as unstable_useCreatePortal, useCreatePortal } from './create-portal-5c09fed2.esm.js';
import { useBrandStyles } from './config-e49cd2d8.esm.js';
export { BrandStylesProvider, useBrandStyles } from './config-e49cd2d8.esm.js';
export { TranslationsProvider, useTranslations } from './translations-1012abc4.esm.js';
export { Avatar, AvatarIcon, AvatarImage } from './avatar-8068ce85.esm.js';
import { B as Box } from './box-a5dda214.esm.js';
export { B as Box } from './box-a5dda214.esm.js';
import { buttonSizeToIconSize } from './button-22306f71.esm.js';
export { Button } from './button-22306f71.esm.js';
import { useButton } from './use-button-36a8da62.esm.js';
export { useButton } from './use-button-36a8da62.esm.js';
import { forwardRef, Fragment } from 'react';
import { t as tw } from './tw-c6a9a210.esm.js';
import { b as buttonBaseStyles, a as buttonDisabledStylesLookup, c as buttonHoverStylesLookup, d as buttonPressedStylesLookup, e as buttonRadiusStylesLookup, f as buttonSizeStylesLookup, g as buttonVariantStylesLookup } from './styles-56e113a0.esm.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { Track } from './track-26dc4fe4.esm.js';
export { Track } from './track-26dc4fe4.esm.js';
import { c as composeId } from './compose-id-1f2e6139.esm.js';
import { m as mergeIds } from './merge-ids-c2d2d3d7.esm.js';
import { useProvidedOrGeneratedId } from './use-provided-or-generated-id-70d42050.esm.js';
import { CheckboxPrimitive } from './checkbox-primitive-7f83b97f.esm.js';
export { CheckboxPrimitive } from './checkbox-primitive-7f83b97f.esm.js';
import { g as getCheckboxStyles } from './styles-c9e46eb2.esm.js';
import { S as Stack } from './stack-090617c5.esm.js';
export { S as Stack } from './stack-090617c5.esm.js';
import { S as Spacer } from './spacer-ef658955.esm.js';
export { S as Spacer } from './spacer-ef658955.esm.js';
import { T as Text } from './text-3fc88ad6.esm.js';
export { T as Text } from './text-3fc88ad6.esm.js';
import { F as FieldErrorMessage } from './field-error-message-bfbfd8e7.esm.js';
export { F as FieldErrorMessage } from './field-error-message-bfbfd8e7.esm.js';
import { useControlInputState, useControlA11yProps } from './context-af60a359.esm.js';
export { useControlA11yProps, useControlInputState } from './context-af60a359.esm.js';
export { Field } from './field-d7a4c6ed.esm.js';
export { FieldContextProvider, useFieldContext, useInputA11yProps } from './context-2a1498a6.esm.js';
export { Fieldset } from './fieldset-8d37bdee.esm.js';
export { FocusContainer } from './focus-container-9b45fd51.esm.js';
export { H as Heading } from './heading-8fb66234.esm.js';
export { A as ActivityIcon, a as AdaptiveUFilledIcon, b as AdaptiveUIcon, c as AddIcon, e as AddOnIcon, d as AdditionalInfoIcon, f as AmexIcon, g as AndroidIcon, h as AnnouncementsIcon, i as AppleFilledIcon, j as AppleIcon, k as ApplyAllIcon, l as AppointmentsRecurringIcon, m as ArchiveIcon, n as ArrowDecreaseIcon, o as ArrowIncreaseIcon, p as AttachmentIcon, B as BankIcon, q as BillingIcon, r as BirthdayIcon, s as BlockIcon, t as BoldIcon, u as BookingsFilledIcon, v as BookingsIcon, w as BreakIcon, x as BusinessCommunicationIcon, y as BusinessIcon, z as CalView3DayIcon, D as CalViewAgendaIcon, E as CalViewDayIcon, F as CalViewMonthIcon, G as CalViewWeekIcon, C as CalendarFoldIcon, H as CampaignIcon, I as CashIcon, J as ChargeIcon, K as ChartBarFilledIcon, L as ChartBarIcon, M as ChatIcon, N as CheckCircleFilledIcon, O as CheckCircleIcon, P as CheckUserIcon, Q as ChevronDownIcon, R as ChevronUpIcon, S as CircleDashIcon, T as ClassBookingIcon, U as ClassIcon, V as ClipboardCopyIcon, W as ClockDollarIcon, X as ClockIcon, Y as CompanyIcon, Z as ConnectFilledIcon, _ as ConnectIcon, $ as CreateBookingIcon, a0 as CreateServiceIcon, a1 as CreateUserIcon, a2 as CreditCardIcon, a3 as CreditDataIcon, a4 as CropIcon, a5 as CustomerFilledIcon, a6 as CustomerIcon, a7 as CustomersFilledIcon, a8 as CustomersIcon, a9 as DeleteIcon, aa as DesignIcon, ab as DeviceDesktopIcon, ac as DeviceMobileIcon, ad as DollarBookingIcon, ae as DollarClockIcon, af as DownloadIcon, ag as DragDropIcon, ah as DuplicateIcon, ai as EditIcon, aj as EmojiIcon, ak as ExpandIcon, al as ExpiryDateIcon, am as ExportIcon, an as EyeHiddenIcon, ao as EyeVisibleIcon, ap as FacebookFilledIcon, aq as FacebookIcon, ar as FileCsvIcon, as as FilterIcon, at as FlagIcon, au as GeneralIcon, av as GlobeIcon, aw as GoogleFilledIcon, ax as HearthFilledIcon, ay as HelpIcon, az as HomeIcon, aA as ImageIcon, aB as ImportIcon, aC as InboxFilledIcon, aD as InboxIcon, aE as InstagramFilledIcon, aF as InstagramIcon, aG as IntegrationsFilledIcon, aH as IntegrationsIcon, aI as ItalicIcon, aJ as JustifyLeftIcon, aK as KeypadIcon, aL as LinkDisconnectIcon, aO as LinkIcon, aM as LinkedinFilledIcon, aN as LinkedinIcon, aP as ListCheckmarkIcon, aQ as LocationIcon, aR as LockClosedIcon, aS as LockOpenIcon, aT as LogoutIcon, aU as MailIcon, aV as MapPinFilledIcon, aW as MapPinIcon, aX as MenuIcon, aY as MergeIcon, aZ as MessengerFilledIcon, a_ as MinimiseIcon, a$ as ModeDarkIcon, b0 as ModeLightIcon, b1 as MoneyFilledIcon, b2 as MoneyIcon, b3 as MoreIcon, b4 as NavigationIcon, b5 as NewIcon, b6 as NewWindowIcon, b7 as NotesFilledIcon, b8 as NotesIcon, b9 as NotificationsIcon, ba as NotificationsOffIcon, bb as OutOfOfficeIcon, bc as PaletteIcon, bd as PauseIcon, be as PaymentApplepayFilledIcon, bf as PaymentApplepayIcon, bg as PaymentApplepayPlainIcon, bh as PaymentCashAppFilledIcon, bi as PaymentCashAppIcon, bj as PaymentCashAppPlainIcon, bk as PaymentGooglepayFilledIcon, bl as PaymentGooglepayIcon, bm as PaymentGooglepayPlainIcon, bn as PaymentHistoryIcon, bo as PaymentMastercardFilledIcon, bp as PaymentMastercardIcon, bq as PaymentMastercardPlainIcon, br as PaymentPaypalFilledIcon, bs as PaymentPaypalIcon, bt as PaymentPaypalPlainIcon, bu as PaymentVisaFilledIcon, bv as PaymentVisaIcon, bw as PaymentVisaPlainIcon, bx as PhoneFilledIcon, by as PhoneIcon, bz as PhoneMessageIcon, bA as PinIcon, bB as PlayIcon, bC as PluginWebsiteIcon, bD as PreviewIcon, bE as PrintIcon, bF as ProfileIcon, bG as QrCodeIcon, bH as ReductionIcon, bI as RefreshIcon, bJ as ReminderIcon, bK as ReplyIcon, bL as ReportsFilledIcon, bM as ReportsIcon, bN as ReviewStarFilledIcon, bO as ReviewStarHalfFilledIcon, bP as ReviewStarIcon, bQ as RotateItemIcon, bR as SecuredIcon, bS as SendFilledIcon, bT as SendIcon, bU as ServicesFilledIcon, bV as ServicesIcon, bW as SettingsFilledIcon, bX as SettingsIcon, bY as ShareIcon, bZ as SidebarFilledIcon, b_ as SidebarIcon, b$ as SlotIcon, c0 as SortDownIcon, c1 as SortIcon, c2 as SortUpIcon, c3 as StatusAwayFilledIcon, c4 as StatusBusyFilledIcon, c5 as StatusOfflineFilledIcon, c6 as StorageIcon, c7 as SupportFilledIcon, c8 as SupportIcon, c9 as TapToPayCircleFilledIcon, ca as TapToPayCircleIcon, cb as TapToPayFilledIcon, cc as TapToPayIcon, cd as TeamIcon, ce as TeleportFilledIcon, cf as TeleportIcon, cg as TerminalIcon, ch as TextCopyIcon, ci as TextSizeIcon, cj as TiktokFilledIcon, ck as TiktokIcon, cl as TimerIcon, cm as TryProFilledIcon, cn as TwitterIcon, co as UnderlineIcon, cp as UpdatesFilledIcon, cq as UpdatesIcon, cr as UploadIcon, cs as VideoCameraFilledIcon, ct as VideoCameraIcon, cu as WhatsappFilledIcon, cv as WindowsFilledIcon, cw as XFilledIcon, cx as YocoTimerIcon, cy as YourAppIcon, cz as YourBrandIcon, cA as YoutubeFilledIcon, cB as YoutubeIcon } from './youtube-icon-f8dd23e0.esm.js';
export { B as BrokenImageIcon } from './broken-image-icon-4b9c59a8.esm.js';
export { C as CheckboxCheckIcon, a as CheckboxIndeterminateIcon } from './checkbox-indeterminate-icon-14425092.esm.js';
export { C as CheckIcon } from './check-icon-17dad0a3.esm.js';
export { C as ChevronLeftIcon, a as ChevronRightIcon } from './chevron-right-icon-ae803e37.esm.js';
export { D as DropdownDownIcon } from './dropdown-down-icon-372942b0.esm.js';
export { D as DropdownUpIcon } from './dropdown-up-icon-07da5d49.esm.js';
export { E as ErrorIcon } from './error-icon-1fdb44d1.esm.js';
export { G as GoTodayIcon } from './go-today-icon-f8ba059c.esm.js';
export { G as GrowYourBrandIcon } from './grow-your-brand-icon-b4a6e8da.esm.js';
export { I as InformationIcon } from './information-icon-e696ea58.esm.js';
export { R as RadioControlIcon } from './radio-control-icon-815a20cd.esm.js';
export { R as RemoveIcon } from './remove-icon-2073e50f.esm.js';
export { S as SearchIcon } from './search-icon-9edceb5f.esm.js';
export { S as SetmoreIcon } from './setmore-icon-0a46ffb4.esm.js';
export { W as WarningIcon } from './warning-icon-3c789a97.esm.js';
export { I as IconButton } from './icon-button-c905d5af.esm.js';
import { i as iconButtonSizeStylesLookup } from './styles-6927e7c9.esm.js';
import { I as Image } from './image-d8931747.esm.js';
export { I as Image } from './image-d8931747.esm.js';
export { L as Label } from './label-617d5123.esm.js';
export { L as Loading } from './loading-7c0b35b6.esm.js';
import { assert } from 'emery';
import { useRadioGroupContext } from './context-c5d7d73b.esm.js';
import { g as getRadioStyles, R as RadioPrimitive } from './radio-primitive-fba710d2.esm.js';
export { R as RadioPrimitive } from './radio-primitive-fba710d2.esm.js';
export { RadioGroup } from './radio-group-c5555eec.esm.js';
export { Root } from './root-b0750fb6.esm.js';
export { Select } from './select-59a3c604.esm.js';
export { A as AmexColorIcon, a as AnswerconnectColorIcon, b as AnywhereWorksColorIcon, c as AppleColorIcon, d as ApplePayColorIcon, C as CashAppPayColorIcon, e as ClioColorIcon, f as ConstantContactColorIcon, D as DinersColorIcon, g as DiscoverColorIcon, h as DrupalColorIcon, F as FacebookColorIcon, i as FacetimeColorIcon, j as FigmaColorIcon, k as FreshdeskColorIcon, G as GithubColorIcon, l as GoogleAnalyticsColorIcon, m as GoogleCalendarColorIcon, n as GoogleColorIcon, o as GoogleMeetingColorIcon, p as GooglePayColorIcon, q as GoogleTagManagerColorIcon, H as HubspotColorIcon, I as InsightlyColorIcon, r as InstagramColorIcon, s as IntercomColorIcon, J as JcbColorIcon, t as JimdoColorIcon, u as JoomlaColorIcon, K as KeapColorIcon, L as LawpayColorIcon, M as MaestroColorIcon, v as MailchimpColorIcon, w as MailerliteColorIcon, x as MastercardColorIcon, y as MicrosoftColorIcon, O as Office365ColorIcon, z as OpendentalColorIcon, B as OutlookColorIcon, P as PaypalColorIcon, Q as QuickbooksColorIcon, S as SalesforceColorIcon, E as ServiceminderColorIcon, N as SetmoreColorIcon, R as ShopifyColorIcon, T as SlackColorIcon, U as SquareColorIcon, V as SquarespaceColorIcon, W as StorybookColorIcon, X as StripeColorIcon, Y as TeleportColorIcon, Z as ThreadsColorIcon, _ as VisaColorIcon, $ as WeeblyColorIcon, a0 as WixColorIcon, a1 as WordpressColorIcon, a2 as XTwitterColorIcon, a3 as ZapierColorIcon, a4 as ZendeskColorIcon, a5 as ZohoColorIcon, a6 as ZoomColorIcon } from './zoom-color-icon-2dff9640.esm.js';
export { TextInput } from './text-input-2822fc45.esm.js';
export { T as TextInputPrimitive } from './text-input-primitive-a129374e.esm.js';
export { Textarea } from './textarea-cc7c56e4.esm.js';
export { useFilteredOptions } from './use-filtered-options-d881803c.esm.js';
export { Alert } from './alert-f6860935.esm.js';
export { AlignChildToText } from './align-child-to-text-c6521616.esm.js';
export { Badge } from './badge-46ab755f.esm.js';
export { CalDynamicIcon } from './cal-dynamic-icon-f4ae35eb.esm.js';
export { Calendar } from './calendar-1ce53990.esm.js';
export { Calendar as Calendar_Deprecated } from './calendar-50f2986d.esm.js';
export { ClickableAdornment } from './clickable-adornment-0894b0d0.esm.js';
export { C as ColorSwatch, a as ColorSwatches, S as StyleHolder } from './style-holder-c7787f5a.esm.js';
export { Combobox } from './combobox-76c21909.esm.js';
export { ComboboxItem } from './combobox-item-81f68747.esm.js';
export { ComboboxListbox } from './combobox-listbox-c2913f04.esm.js';
export { ComboboxPopover } from './combobox-popover-abd204b9.esm.js';
export { ComboboxSearchInput } from './combobox-search-input-b1486eed.esm.js';
export { ComboboxTextInput } from './combobox-text-input-ffa92f05.esm.js';
export { DatePicker } from './date-picker-0665ab6c.esm.js';
export { Dialog } from './dialog-8a157f47.esm.js';
export { D as DialogContent, a as DialogFooter, b as DialogHeader } from './dialog-header-3dfee2e0.esm.js';
export { DropdownMenu } from './dropdown-menu-f1a90da1.esm.js';
export { DropdownMenuItem } from './dropdown-menu-item-0de54b14.esm.js';
export { DropdownMenuList } from './dropdown-menu-list-ef4b4a6d.esm.js';
export { DropdownMenuPopover } from './dropdown-menu-popover-358ac022.esm.js';
export { DropdownMenuTrigger } from './dropdown-menu-trigger-b077d88f.esm.js';
export { FilterMenu } from './filter-menu-383cbf15.esm.js';
export { FilterMenuItem } from './filter-menu-item-1041d4e1.esm.js';
export { FilterMenuListbox } from './filter-menu-listbox-6d1696c2.esm.js';
export { FilterMenuPopover } from './filter-menu-popover-23da5bbd.esm.js';
export { FilterMenuSearchField } from './filter-menu-search-field-9700fe1a.esm.js';
export { FilterMenuSearchInput } from './filter-menu-search-input-5a847aa6.esm.js';
export { FilterMenuTrigger } from './filter-menu-trigger-26b9e1d5.esm.js';
export { GetPro } from './get-pro-b596ca3d.esm.js';
export { GhostInput } from './ghost-input-ea46f7aa.esm.js';
export { InlineField } from './inline-field-9132b9f6.esm.js';
export { Listbox } from './listbox-279326e9.esm.js';
export { MenuItem } from './menu-item-d2029a0a.esm.js';
export { Modal, ModalContent, ModalFooter, ModalHeader } from './modal-682ec106.esm.js';
export { Popover, usePopover } from './popover-55e45b10.esm.js';
export { Portal } from './portal-b4832388.esm.js';
export { Progress } from './progress-7c95daf3.esm.js';
export { SearchInput } from './search-input-c957feb3.esm.js';
export { SelectCard } from './select-card-796534fa.esm.js';
export { SelectMenu } from './select-menu-2676796c.esm.js';
export { SelectMenuItem } from './select-menu-item-100a67b8.esm.js';
export { SelectMenuListbox } from './select-menu-listbox-e8d9bd1b.esm.js';
export { SelectMenuPopover } from './select-menu-popover-38e700df.esm.js';
export { SelectMenuTrigger } from './select-menu-trigger-3adbb8cd.esm.js';
export { Sheet, SheetContent, SheetFooter, SheetHeader } from './sheet-d2ba52fa.esm.js';
export { Slider } from './slider-8122b751.esm.js';
export { Snackbar } from './snackbar-bb394378.esm.js';
export { SnackbarContent } from './snackbar-content-02f9232d.esm.js';
export { Table } from './table-c20eeec8.esm.js';
export { TabContent } from './tab-content-506a2bb4.esm.js';
export { TabItem } from './tab-item-700b4abc.esm.js';
export { TabList } from './tab-list-e900b915.esm.js';
export { Tabs } from './tabs-f41e934e.esm.js';
export { Tag } from './tag-fdb5d51b.esm.js';
export { TagAvatar } from './tag-avatar-19f60a47.esm.js';
export { TagButton } from './tag-button-7091945f.esm.js';
export { useTimeZonePicker } from './hooks-b081ad8d.esm.js';
export { TimePicker } from './timepicker-e9b1d298.esm.js';
export { TimePickerInput } from './timepicker-input-16dd9ba9.esm.js';
export { T as TimePickerInputState } from './types-5a66701d.esm.js';
export { TimePickerItem } from './timepicker-item-324467f0.esm.js';
export { Toggle } from './toggle-919eae78.esm.js';
export { TogglePrimitive } from './toggle-primitive-434362c4.esm.js';
export { Tooltip } from './tooltip-43d67011.esm.js';
export { Z as ZeroWidthSpace } from './zero-width-space-1914c889.esm.js';
export { TooltipProvider, useTooltip } from './tooltip-342f030f.esm.js';
export { c as clamp, r as roundNumberToDecimal, s as sendFormDataRequest } from './send-form-data-request-3f085dcd.esm.js';
export { c as compressImage, a as createImageElement, b as createUrl, i as isFileSizeValid, p as processLocalFile, r as readFileImage, d as resizeImage, v as validateImageType } from './process-local-file-2972bd92.esm.js';
export { CropModal } from './crop-modal-87460160.esm.js';
export { p as parseImageProcessingOptions } from './parse-image-processing-options-6f68c68d.esm.js';
export { CropperComponent } from './cropper-component-566b00b9.esm.js';
export { S as ShareModal } from './share-modal-d8442e50.esm.js';
export { UploadFileButton } from './upload-file-button-dd2ea51c.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './styles-267c9284.esm.js';
import './styles-53001919.esm.js';
import './styles-12c293a4.esm.js';
import '@adaptavant/eds-core';
import 'lodash';
import './cx-c5d68be6.esm.js';
import 'clsx';
import './styles-015cb1bf.esm.js';
import 'compressorjs';
import '@adaptavant/eds-core/utils';

const getButtonLinkStyles = ({
  buttonRadius,
  size,
  variant
}) => ({
  root: tw`
		${buttonBaseStyles}
		${buttonDisabledStylesLookup[variant]}
		${buttonHoverStylesLookup[variant]}
		${buttonPressedStylesLookup[variant]}
		${buttonRadiusStylesLookup[buttonRadius]}
		${buttonSizeStylesLookup[size]}
		${buttonVariantStylesLookup[variant]}
		font-strong
		leading-none
		whitespace-normal
	`,
  labelTrack: tw`
		gap-1
		min-w-0
	`,
  label: tw`
		-my-1
		font-strong
		line-clamp-1
		py-1
	`,
  iconStart: tw`
		-ms-1
		`,
  iconEnd: tw`
		-me-1
	`
});

/**
 * ButtonLink
 *
 * @description The appearance of a button, with the semantics of a link.
 */

const ButtonLink = /*#__PURE__*/forwardRef(function ButtonLink({
  as = 'a',
  children,
  className = '',
  classNames = {},
  iconEnd: IconEnd,
  iconStart: IconStart,
  size = 'standard',
  style = {},
  styles = {},
  variant = 'accentPrimary',
  ...consumerProps
}, forwardedRef) {
  const config = useBrandStyles();
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getButtonLinkStyles({
      ...config,
      size,
      variant
    })
  });
  const labelTrackStyles = styleProps('labelTrack');
  const labelStyles = styleProps('label');
  const trackStyleProps = {
    className: labelTrackStyles.className,
    classNames: {
      center: labelStyles.className
    },
    style: labelTrackStyles.style,
    styles: {
      center: labelStyles.style
    }
  };
  return /*#__PURE__*/jsx(Box, {
    ...consumerProps,
    as: as,
    ref: forwardedRef,
    ...styleProps('root'),
    children: /*#__PURE__*/jsx(Track, {
      as: "span",
      railEnd: IconEnd ? /*#__PURE__*/jsx(IconEnd, {
        size: buttonSizeToIconSize[size],
        ...styleProps('iconEnd')
      }) : null,
      railStart: IconStart ? /*#__PURE__*/jsx(IconStart, {
        size: buttonSizeToIconSize[size],
        ...styleProps('iconStart')
      }) : null,
      ...trackStyleProps,
      children: children
    })
  });
});
ButtonLink.displayName = 'ButtonLink';

/**
 * Emoji
 *
 * @description
 * A utility component for displaying emoji characters accessibly. Emojis can
 * add playfulness to your interface, but require formatting to ensure that they
 * are accessible for all users.
 */
function Emoji({
  children,
  label,
  ...consumerProps
}) {
  return /*#__PURE__*/jsx(Box, {
    as: "span",
    ...consumerProps,
    "aria-hidden": label ? undefined : true,
    "aria-label": label,
    role: "img",
    children: children
  });
}

/**
 * Checkbox
 *
 * @description
 * A checkbox is a UI element that allows the user to select a single binary
 * option.
 */

const Checkbox = /*#__PURE__*/forwardRef(function Checkbox({
  'aria-describedby': ariaDescribedByProp,
  checked,
  className = '',
  classNames = {},
  description,
  errorMessage,
  id: idProp,
  indeterminate,
  isDisabled: isDisabledProp = false,
  label,
  name,
  onBlur,
  onChange,
  onClick,
  size = 'standard',
  style = {},
  styles = {},
  value,
  ...consumerProps
}, forwardedRef) {
  const {
    isDisabled,
    isInvalid
  } = useControlInputState({
    isDisabled: isDisabledProp,
    isInvalid: Boolean(errorMessage),
    isRequired: false
  });
  const a11yProps = useControlA11yProps({
    isDisabled,
    isInvalid
  });
  const {
    descriptionId,
    errorMessageId,
    inputId
  } = useCheckboxIds(idProp);
  const ariaDescribedBy = mergeIds(a11yProps === null || a11yProps === void 0 ? void 0 : a11yProps['aria-describedby'], ariaDescribedByProp, description ? descriptionId : undefined, errorMessage ? errorMessageId : undefined);
  const parts = useComponentStyleParts({
    className,
    classNames,
    style,
    styles,
    tw: getCheckboxStyles({
      isDisabled,
      isInvalid,
      size
    })
  }, ['root', 'checkboxPrimitiveRoot', 'checkboxPrimitiveInput', 'checkboxPrimitiveControl', 'checkboxPrimitiveIcon', 'label', 'descriptionTrack', 'description', 'spacer', 'errorTrack', 'errorIcon', 'errorMessage']);
  const checkboxPrimitiveStyleProps = {
    ...parts.checkboxPrimitiveRoot,
    classNames: {
      input: parts.checkboxPrimitiveInput.className,
      control: parts.checkboxPrimitiveControl.className,
      icon: parts.checkboxPrimitiveIcon.className
    },
    styles: {
      input: parts.checkboxPrimitiveInput.style,
      control: parts.checkboxPrimitiveControl.style,
      icon: parts.checkboxPrimitiveIcon.style
    }
  };
  const fieldErrorMessageStyleProps = {
    ...parts.errorTrack,
    classNames: {
      errorIcon: parts.errorIcon.className,
      errorMessage: parts.errorMessage.className
    },
    styles: {
      errorIcon: parts.errorIcon.style,
      errorMessage: parts.errorMessage.style
    }
  };
  return /*#__PURE__*/jsxs(Stack, {
    ...parts.root,
    children: [/*#__PURE__*/jsx(Track, {
      as: "label",
      htmlFor: inputId,
      railStart: /*#__PURE__*/jsx(CheckboxPrimitive, {
        ...consumerProps,
        ...a11yProps,
        "aria-describedby": ariaDescribedBy,
        checked: checked,
        id: inputId,
        indeterminate: indeterminate,
        isDisabled: isDisabled,
        isInvalid: isInvalid,
        name: name,
        onBlur: onBlur,
        onChange: onChange,
        onClick: onClick,
        ref: forwardedRef,
        size: size,
        value: value,
        ...checkboxPrimitiveStyleProps
      }),
      verticalAlign: "top",
      ...parts.label,
      children: label
    }), description ? /*#__PURE__*/jsx(Track, {
      as: "span",
      railStart: /*#__PURE__*/jsx(Spacer, {
        ...parts.spacer
      }),
      ...parts.descriptionTrack,
      children: /*#__PURE__*/jsx(Text, {
        id: descriptionId,
        ...parts.description,
        children: description
      })
    }) : null, errorMessage ? /*#__PURE__*/jsxs(Fragment, {
      children: [/*#__PURE__*/jsx(Spacer, {
        className: "h-1"
      }), /*#__PURE__*/jsx(FieldErrorMessage, {
        id: errorMessageId,
        isDisabled: isDisabled,
        size: size,
        ...fieldErrorMessageStyleProps,
        children: errorMessage
      })]
    }) : null]
  });
});
Checkbox.displayName = 'Checkbox';
function useCheckboxIds(id) {
  const inputId = useProvidedOrGeneratedId(id);
  return {
    inputId,
    descriptionId: composeId(inputId, 'description'),
    errorMessageId: composeId(inputId, 'error-message')
  };
}

const getChipStyles = ({
  isPressed,
  size
}) => ({
  root: `
		${buttonBaseStyles}
		${buttonSizeStylesLookup[size]}
		${isPressed ? `
			active:bg-accent-secondary-active
			bg-accent-secondary
			hover:bg-accent-secondary-hover
			text-accent
		` : `
			active:bg-neutral-active
			hover:bg-neutral-hover
			text-secondary
		`}
		inline-flex
		rounded-full
		whitespace-nowrap
	`
});

/**
 * Chip
 *
 * @description Chips are used to toggle an action, their label should
 * express what action will occur when the user interacts with it.
 */

const Chip = /*#__PURE__*/forwardRef(function Chip({
  children,
  className = '',
  classNames = {},
  isPressed = false,
  onClick,
  size = 'standard',
  style = {},
  styles = {},
  ...consumerProps
}, forwardedRef) {
  const {
    buttonProps
  } = useButton({
    isDisabled: false,
    isLoading: false,
    isPressed,
    onClick
  }, forwardedRef);
  const config = useBrandStyles();
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getChipStyles({
      ...config,
      isPressed: Boolean(isPressed),
      size
    })
  });
  return /*#__PURE__*/jsx(Text, {
    ...consumerProps,
    ...buttonProps,
    as: "button",
    fontWeight: "strong",
    type: "button",
    ...styleProps('root'),
    children: children
  });
});
Chip.displayName = 'Chip';

const getIconLinkStyles = ({
  buttonRadius,
  size,
  variant
}) => ({
  root: `
		${buttonBaseStyles}
		${buttonHoverStylesLookup[variant]}
		${buttonPressedStylesLookup[variant]}
		${buttonRadiusStylesLookup[buttonRadius]}
		${buttonVariantStylesLookup[variant]}
		${iconButtonSizeStylesLookup[size]}
	`,
  icon: tw`
	`
});

/**
 * IconLink
 *
 * @description
 * Use an IconLink when you need to provide a link in a compact space.
 */

const IconLink = /*#__PURE__*/forwardRef(function IconLink({
  'aria-label': ariaLabel,
  as = 'a',
  className = '',
  classNames = {},
  href,
  icon: Icon,
  size = 'standard',
  style = {},
  styles = {},
  variant = 'accentPrimary',
  ...consumerProps
}, forwardedRef) {
  const config = useBrandStyles();
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getIconLinkStyles({
      ...config,
      size,
      variant
    })
  });
  return /*#__PURE__*/jsx(Box, {
    ...consumerProps,
    "aria-label": ariaLabel,
    as: as,
    href: href,
    ref: forwardedRef,
    ...styleProps('root'),
    children: /*#__PURE__*/jsx(Icon, {
      size: buttonSizeToIconSize[size],
      ...styleProps('icon')
    })
  });
});
IconLink.displayName = 'IconLink';

/**
 * PlaceholderImage
 *
 * @description Renders a placeholder image of a specific size.
 */

function PlaceholderImage({
  height,
  width,
  ...consumerProps
}) {
  return /*#__PURE__*/jsx(Image, {
    ...consumerProps,
    alt: "",
    src: `https://placehold.co/${width}x${height}.png`
  });
}
PlaceholderImage.displayName = 'PlaceholderImage';

/**
 * PlaceholderText
 *
 * @description Renders simulated Blokk text for a specific number of characters.
 */

const lipsum = 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Molestias quo voluptas fugit quidem nemo autem eos reprehenderit voluptatum nam. Error odio repellendus quisquam magni rerum hic facere laboriosam, aspernatur fugiat.';
function PlaceholderText({
  characters,
  className = '',
  classNames = {},
  style = {},
  styles = {},
  ...consumerProps
}) {
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles
  });
  const string = characters <= lipsum.length ? lipsum.slice(0, characters) : lipsum.repeat(Math.ceil(characters / lipsum.length)).slice(0, characters);
  return /*#__PURE__*/jsx(Box, {
    as: "span",
    ...consumerProps,
    ...styleProps('root', {
      display: 'inline-block',
      backgroundImage: 'repeating-linear-gradient(to bottom, #fff 0px, #fff 2px, #bbb 2px, #bbb 10px, #fff 10px, #fff 18px)',
      fontSize: 12,
      lineHeight: 1
    }),
    children: /*#__PURE__*/jsx(Box, {
      as: "span",
      style: {
        visibility: 'hidden'
      },
      children: string
    })
  });
}
PlaceholderText.displayName = 'PlaceholderText';

function useRadioGroupItemProps(props) {
  const context = useRadioGroupContext();
  if (!context) return props;
  assert(props.checked === undefined, 'A <Radio> within a <RadioGroup> cannot have a `checked` property.');
  assert(props.name === undefined, 'A <Radio> within a <RadioGroup> cannot have a `name` property.');
  assert(props.onChange === undefined, 'A <Radio> within a <RadioGroup> cannot have an `onChange` property.');
  assert(props.size === undefined, 'A <Radio> within a <RadioGroup> cannot have a `size` property.');
  assert(typeof props.value === 'string', 'Each <Radio> within a <RadioGroup> must have a `value` property.');
  return {
    ...props,
    checked: context.value === props.value,
    isDisabled: typeof context.isDisabled === 'function' ? context.isDisabled(props.value) : context.isDisabled || props.isDisabled,
    name: context.name,
    onChange: context.onChange,
    size: context.size,
    value: props.value
  };
}

/**
 * Radio
 *
 * @description
 * Radios are used to select a single value from several options — usually in a
 * form.
 * If multiple choices are valid, consider using a `Checkbox` instead.
 */
const Radio = /*#__PURE__*/forwardRef(function Radio(props, forwardedRef) {
  const {
    'aria-describedby': ariaDescribedByProp,
    checked,
    className = '',
    classNames = {},
    description,
    id: idProp,
    isDisabled: isDisabledProp = false,
    label,
    name,
    onBlur,
    onChange,
    onClick,
    size = 'standard',
    style = {},
    styles = {},
    value,
    ...consumerProps
  } = useRadioGroupItemProps(props);
  const {
    isDisabled,
    isInvalid,
    isRequired
  } = useControlInputState({
    isDisabled: isDisabledProp,
    isInvalid: false,
    isRequired: false
  });
  const a11yProps = useControlA11yProps({
    isDisabled,
    isInvalid,
    isRequired
  });
  const {
    descriptionId,
    inputId
  } = useRadioIds(idProp);
  const ariaDescribedBy = mergeIds(a11yProps === null || a11yProps === void 0 ? void 0 : a11yProps['aria-describedby'], ariaDescribedByProp, description ? descriptionId : undefined);
  const parts = useComponentStyleParts({
    className,
    classNames,
    style,
    styles,
    tw: getRadioStyles({
      isDisabled,
      size
    })
  }, ['root', 'radioPrimitiveRoot', 'radioPrimitiveInput', 'radioPrimitiveControl', 'radioPrimitiveIcon', 'label', 'descriptionTrack', 'description', 'spacer']);
  const radioPrimitiveStyleProps = {
    ...parts.radioPrimitiveRoot,
    classNames: {
      input: parts.radioPrimitiveInput.className,
      control: parts.radioPrimitiveControl.className,
      icon: parts.radioPrimitiveIcon.className
    },
    styles: {
      input: parts.radioPrimitiveInput.style,
      control: parts.radioPrimitiveControl.style,
      icon: parts.radioPrimitiveIcon.style
    }
  };
  return /*#__PURE__*/jsxs(Stack, {
    ...parts.root,
    children: [/*#__PURE__*/jsx(Track, {
      as: "label",
      htmlFor: inputId,
      railStart: /*#__PURE__*/jsx(RadioPrimitive, {
        ...consumerProps,
        ...a11yProps,
        "aria-describedby": ariaDescribedBy,
        checked: checked,
        id: inputId,
        isDisabled: isDisabled,
        name: name,
        onBlur: onBlur,
        onChange: onChange,
        onClick: onClick,
        ref: forwardedRef,
        size: size,
        value: value,
        ...radioPrimitiveStyleProps
      }),
      verticalAlign: "top",
      ...parts.label,
      children: label
    }), description ? /*#__PURE__*/jsx(Track, {
      as: "span",
      railStart: /*#__PURE__*/jsx(Spacer, {
        ...parts.spacer
      }),
      ...parts.descriptionTrack,
      children: /*#__PURE__*/jsx(Text, {
        id: descriptionId,
        ...parts.description,
        children: description
      })
    }) : null]
  });
});
Radio.displayName = 'Radio';
function useRadioIds(id) {
  const inputId = useProvidedOrGeneratedId(id);
  return {
    inputId,
    descriptionId: composeId(inputId, 'description')
  };
}

const getTextLinkTwStyles = ({
  variant
}) => ({
  root: tw`
			${linkVariantStylesLookup[variant]}
			focus-visible:focus-ring
			rounded-4px
			underline-offset-4
		`
});
const linkVariantStylesLookup = {
  accentPrimary: tw`
		active:text-accent-pressed
		hover:text-accent-hover
		text-accent
		underline
	`,
  neutralPrimary: tw`
		active:text-tertiary
		hover:text-secondary-hover
		text-primary
		underline
	`,
  neutralSecondary: tw`
		active:text-tertiary
		hover:text-secondary-hover
		text-primary
	`,
  regular: tw`
		active:text-link-pressed
		active:underline
		focus-visible:underline
		hover:text-link-hover
		hover:underline
		text-link
	`
};

/**
 * TextLink
 *
 * @description Links allow users to navigate to a different location. They can be presented inline inside a paragraph or as standalone text.
 */

const TextLink = /*#__PURE__*/forwardRef(function TextLink({
  as = 'a',
  className = '',
  classNames = {},
  style = {},
  styles = {},
  children,
  variant = 'accentPrimary',
  ...consumerProps
}, forwardedRef) {
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getTextLinkTwStyles({
      variant
    })
  });
  return /*#__PURE__*/jsx(Box, {
    as: as,
    ...consumerProps,
    ref: forwardedRef,
    ...styleProps('root'),
    children: children
  });
});
TextLink.displayName = 'TextLink';

export { ButtonLink, Checkbox, Chip, Emoji, IconLink, PlaceholderImage, PlaceholderText, Radio, TextLink, useRadioGroupItemProps };
