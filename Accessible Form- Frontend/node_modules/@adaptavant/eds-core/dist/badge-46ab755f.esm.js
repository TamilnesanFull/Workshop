'use client';
import { forwardRef } from 'react';
import { t as tw } from './tw-c6a9a210.esm.js';
import { jsx } from 'react/jsx-runtime';
import { T as Text } from './text-3fc88ad6.esm.js';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { Track } from './track-26dc4fe4.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';

const getBadgeStyles = ({
  tone,
  size
}) => ({
  root: tw`
		${badgeBaseStyles}
		${badgeSizeStylesLookup[size]}
		${badgeToneStylesLookup[tone]}
		${labelToneStylesLookup[tone]}
 	`,
  label: tw`
		 font-strong
		 line-clamp-1
		 px-0.5 
	     text-body-10 		
	`
});
const badgeBaseStyles = tw`
	inline-flex
	items-center
	justify-center
	rounded-4px
`;
const badgeSizeStylesLookup = {
  standard: tw`
		h-6
		px-1.5 
	`,
  small: tw`
		h-4
		px-0.5 
	`
};
const labelToneStylesLookup = {
  caution: tw`
		text-caution-secondary
	`,
  critical: tw`
		text-critical-secondary 
	`,
  neutral: tw`
		text-secondary
	`,
  positive: tw`
		text-positive-secondary
	`
};
const badgeToneStylesLookup = {
  caution: tw`
		bg-caution-secondary
	`,
  critical: tw`
		bg-critical-secondary
	`,
  neutral: tw`
		bg-neutral-secondary
	`,
  positive: tw`
		bg-positive-secondary
	`
};

/**
 * Badge
 *
 * @description A badge component is a visual label or indicator used
 * to convey status or highlight content.
 */

const Badge = /*#__PURE__*/forwardRef(function Badge({
  children,
  className = '',
  classNames = {},
  iconStart: IconStart,
  style = {},
  styles = {},
  size = 'standard',
  tone = 'positive',
  ...consumerProps
}, forwardedRef) {
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getBadgeStyles({
      tone,
      size
    })
  });
  return /*#__PURE__*/jsx(Track, {
    ...consumerProps,
    as: "span",
    railStart: IconStart ? /*#__PURE__*/jsx(IconStart, {
      size: "16",
      ...styleProps('iconStart')
    }) : null,
    ref: forwardedRef,
    ...styleProps('root'),
    children: /*#__PURE__*/jsx(Text, {
      ...styleProps('label'),
      children: children
    })
  });
});
Badge.displayName = 'Badge';

export { Badge };
