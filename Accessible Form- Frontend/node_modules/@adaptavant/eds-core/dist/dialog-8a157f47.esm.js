'use client';
import { FocusScope } from '@react-aria/focus';
import { useRef, useEffect } from 'react';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { useAnimateVisibility } from './use-animate-visibility-20f1f018.esm.js';
import { c as getDialogStyles } from './styles-015cb1bf.esm.js';
import { jsx } from 'react/jsx-runtime';
import { B as Box } from './box-a5dda214.esm.js';
import { useCreatePortal } from './create-portal-5c09fed2.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './tw-c6a9a210.esm.js';

/**
 * Dialog
 *
 * @description
 * A Dialog component that prevents interaction with the rest of the application.
 * Dialog component renders its children (DialogTitle, DialogContent, DialogFooter) nodes in front of a backdrop component.
 * Offers important features:
 * - It properly manages focus; moves inside Dialog, and keeping it there until the Dialog is closed.
 * - It disables scrolling of the page content while open.
 * - It render with Portal by default to avoid Stacking issues.
 * - Manages the appropriate ARIA roles.
 * - Creates a backdrop, for disabling interaction below the Dialog.
 * - It can be closed by pressing the `Esc` key or clicking on the overlay.
 * - It can be controlled by the `open` prop.
 * - It can be delayed to animate in and out.
 *
 * Initially this is only for internal use,
 * as base for such components like Modals, Drawers or Sheets,
 * as consumer you should consider using one of the above first.
 */

function Dialog({
  children,
  className = '',
  classNames = {},
  closeOnEsc = true,
  closeOnOverlayClick = true,
  delay,
  descriptionId,
  onClose,
  onEscPress,
  onOverlayClick,
  open,
  role = 'dialog',
  style = {},
  styles = {},
  titleId,
  container,
  ...consumerProps
}) {
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getDialogStyles()
  });
  const createPortal = useCreatePortal();
  const dialogRef = useRef(null);
  const dialogWrapperRef = useRef(null);
  const {
    shouldRender,
    toggleVisibility
  } = useAnimateVisibility(open, delay);
  useEffect(() => {
    const dialogElement = dialogRef.current;
    const dialogWrapperElement = dialogWrapperRef.current;
    const handleKeyDown = event => {
      if (!dialogElement) return;
      const expandedDropdownTriggerList = dialogElement.querySelectorAll('[aria-expanded="true"]');
      if (closeOnEsc && event.key === 'Escape' && !expandedDropdownTriggerList.length // Call esc functionality, only if there are no expanded dropdown.
      ) {
        toggleVisibility();
        if (onEscPress) onEscPress();
        onClose();
      }
    };
    const handleOverlayClick = event => {
      if (event.target === dialogWrapperElement) {
        event.preventDefault();
        toggleVisibility();
        if (onOverlayClick) onOverlayClick();
        onClose();
      }
    };
    if (closeOnEsc && dialogElement) {
      dialogElement.addEventListener('keydown', handleKeyDown);
    }
    if (closeOnOverlayClick && dialogWrapperElement) {
      dialogWrapperElement.addEventListener('mousedown', handleOverlayClick);
      dialogWrapperElement.addEventListener('touchstart', handleOverlayClick);
    }
    return () => {
      if (closeOnEsc && dialogElement) {
        dialogElement.removeEventListener('keydown', handleKeyDown);
      }
      if (closeOnOverlayClick && dialogWrapperElement) {
        dialogWrapperElement.removeEventListener('mousedown', handleOverlayClick);
        dialogWrapperElement.removeEventListener('touchstart', handleOverlayClick);
      }
    };
  }, [closeOnEsc, closeOnOverlayClick, onClose, onEscPress, onOverlayClick, toggleVisibility]);
  return shouldRender ? createPortal( /*#__PURE__*/jsx(FocusScope, {
    autoFocus: true,
    contain: true,
    restoreFocus: true,
    children: /*#__PURE__*/jsx(Box, {
      ...styleProps('dialogWrapper'),
      ref: dialogWrapperRef,
      children: /*#__PURE__*/jsx(Box, {
        ...consumerProps,
        "aria-describedby": descriptionId,
        "aria-labelledby": titleId,
        "aria-modal": "true",
        ref: dialogRef,
        role: role,
        ...styleProps('root'),
        tabIndex: 0,
        children: children
      })
    })
  }), container ?? undefined) : null;
}
Dialog.displayName = 'Dialog';

export { Dialog };
