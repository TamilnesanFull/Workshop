'use client';
import { useRef } from 'react';
import { FieldContextProvider } from './context-2a1498a6.esm.js';
import { useFieldIds } from './field-d7a4c6ed.esm.js';
import { u as useComponentStyleParts } from './index-dd10a77e.esm.js';
import { t as tw } from './tw-c6a9a210.esm.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { S as Stack } from './stack-090617c5.esm.js';
import { L as Label } from './label-617d5123.esm.js';
import { C as Counter } from './counter-5be5643b.esm.js';
import { F as FieldErrorMessage } from './field-error-message-bfbfd8e7.esm.js';
import { Track } from './track-26dc4fe4.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './styles-267c9284.esm.js';
import './text-3fc88ad6.esm.js';
import './error-icon-1fdb44d1.esm.js';
import './styles-53001919.esm.js';
import './align-child-to-text-c6521616.esm.js';

const getInlineFieldStyles = () => ({
  root: tw`
		gap-0.5
		items-stretch
		[&:has(textarea)_label]:[--padding:theme(spacing.2)] #1
	`,
  // #1 when there is a textarea inside the inline field, we need to add more padding to the label so it aligns with the text in textarea.
  errorIcon: tw`
	`,
  errorMessage: tw`
	`,
  errorTrack: tw`
	`,
  inputWrapper: tw`
		items-stretch
		gap-1 #2
	`,
  // #2 to create spacing between (input or textarea) and (error message or counter) elements
  label: tw`
	    font-strong
		py-[var(--padding,theme(spacing[1.5]))]
		text-secondary		
	`,
  labelWrapper: tw`
	`,
  secondaryLabel: tw`
	`,
  counter: tw``
});

/**
 * InlineField
 *
 * @description
 * The InlineField component exposes the elements around form inputs, and an API
 * to compose them.
 */
function InlineField({
  children,
  className = '',
  classNames = {},
  errorMessage,
  id: idProp,
  isDisabled = false,
  isRequired = false,
  label,
  labelVisibility = 'visible',
  secondaryLabel,
  counter,
  style = {},
  styles = {},
  ...consumerProps
}) {
  const {
    controlId,
    descriptionId,
    errorMessageId,
    labelId
  } = useFieldIds(idProp);
  const parts = useComponentStyleParts({
    className,
    classNames,
    style,
    styles,
    tw: getInlineFieldStyles()
  }, ['root', 'description', 'errorIcon', 'errorMessage', 'errorTrack', 'inputWrapper', 'labelWrapper', 'label', 'secondaryLabel', 'counter']);
  const labelStyleProps = {
    ...parts.label,
    classNames: {
      secondaryLabel: parts.secondaryLabel.className
    },
    styles: {
      secondaryLabel: parts.secondaryLabel.style
    }
  };
  const fieldErrorMessageStyleProps = {
    ...parts.errorTrack,
    classNames: {
      errorIcon: parts.errorIcon.className,
      errorMessage: parts.errorMessage.className
    },
    styles: {
      errorIcon: parts.errorIcon.style,
      errorMessage: parts.errorMessage.style
    }
  };
  const showCounterOrErrorMessage = Boolean(errorMessage || counter);
  const labelRef = useRef(null);
  return /*#__PURE__*/jsx(FieldContextProvider, {
    value: {
      controlId,
      descriptionId,
      errorMessage,
      errorMessageId,
      isDisabled,
      isInvalid: Boolean(errorMessage),
      isRequired,
      labelId,
      labelRef,
      label,
      size: 'standard',
      variant: 'subtle'
    },
    children: /*#__PURE__*/jsx(Track, {
      ...consumerProps,
      ...parts.root,
      railStart: /*#__PURE__*/jsx(Stack, {
        ...parts.labelWrapper,
        children: /*#__PURE__*/jsx(Label, {
          htmlFor: controlId,
          id: labelId,
          labelVisibility: labelVisibility,
          ref: labelRef,
          secondaryLabel: secondaryLabel,
          ...labelStyleProps,
          children: label
        })
      }),
      children: /*#__PURE__*/jsxs(Stack, {
        ...parts.inputWrapper,
        children: [children, showCounterOrErrorMessage ? /*#__PURE__*/jsx(Track, {
          className: "gap-2",
          railEnd: counter ? /*#__PURE__*/jsx(Counter, {
            ...counter,
            ...parts.counter
          }) : null,
          verticalAlign: "top",
          children: errorMessage ? /*#__PURE__*/jsx(FieldErrorMessage, {
            id: errorMessageId,
            isDisabled: isDisabled,
            ...fieldErrorMessageStyleProps,
            children: errorMessage
          }) : null
        }) : null]
      })
    })
  });
}
InlineField.displayName = 'InlineField';

export { InlineField };
