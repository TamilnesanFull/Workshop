'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var memoize = require('lodash/memoize');
var React = require('react');
var use_filtered_options = require('./use-filtered-options-1cfc1748.cjs.prod.js');
var use_isomorphic_layout_effect = require('./use-isomorphic-layout-effect-94fa0923.cjs.prod.js');
var tw = require('./tw-9929267e.cjs.prod.js');
var jsxRuntime = require('react/jsx-runtime');
var box = require('./box-e39057bd.cjs.prod.js');
var track = require('./track-f65e0bbd.cjs.prod.js');
var text = require('./text-a5ab226e.cjs.prod.js');
require('./index-7955fb8e.cjs.prod.js');
require('./tw-merge-885aa7a8.cjs.prod.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.prod.js');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var memoize__default = /*#__PURE__*/_interopDefault(memoize);

/**
 * Regular expression to match a 12-hour clock time format with optional AM/PM.
 * - `^` and `$`: Start and end of string anchors.
 * - `(1[0-2]|0?[1-9])`: Matches the hour part, from 01 to 12, or 1 to 9.
 *   Leading zero is optional for 1-9.
 * - `:`: Literal colon.
 * - `([0-5]\d)`: Matches the minutes part, from 00 to 59.
 * - `(?: ?([AaPp][Mm]))?`: Non-capturing group for an optional space and a
 *   capturing group for AM/PM in a case-insensitive manner, making it optional.
 *
 * @example
 * Valid matches include "11:45 AM", "11:45AM", "11:45 am", "9:30 PM", "01:00PM".
 */
const timeFormatRegEx = /^(1[0-2]|0?[1-9]):([0-5]\d)(?: ?([AaPp][Mm]))?$/;

/**
 * Extracts and returns the time and meridiem (AM/PM) from a given 12-hour clock
 * time string. If no AM/PM is provided, defaults to 'AM'.
 */
function extractTimeAndMeridiem(fullTime) {
  // Execute regular expression to match time format
  const match = timeFormatRegEx.exec(fullTime);

  // If no match is found, or the meridiem is missing (indicating a failure to meet the full expected format),
  // return undefined for both fields.
  if (!match || !match[1] || !match[2] || !match[3]) {
    return {
      time: undefined,
      meridiem: undefined
    };
  }

  // Destructure hour, minute, and meridiem from the match.
  const [, hour, minute, meridiem] = match;
  return {
    // Format time, parsing hour as integer to remove any leading zeros and keeping minute as-is.
    time: `${parseInt(hour, 10)}:${minute}`,
    // Return the meridiem in uppercase, safe to do since we've already checked its existence.
    meridiem: meridiem.toUpperCase()
  };
}
function TimeZonePickerItemLabel({
  countryName,
  phrase: city,
  shouldWrap,
  time: fullTime,
  tzShort: tzAbbreviation,
  searchTerm = ''
}) {
  const {
    time,
    meridiem
  } = extractTimeAndMeridiem(fullTime);
  const railEnd = shouldWrap && time && meridiem ? /*#__PURE__*/jsxRuntime.jsxs("div", {
    className: "flex items-baseline tabular-nums text-secondary",
    children: [/*#__PURE__*/jsxRuntime.jsxs(box.Box, {
      as: "span",
      className: "text-body-12 line-clamp-1",
      children: [time, "\xA0"]
    }), /*#__PURE__*/jsxRuntime.jsx(box.Box, {
      as: "span",
      className: "text-body-10 line-clamp-1",
      children: meridiem
    })]
  }) : null;
  return /*#__PURE__*/jsxRuntime.jsx(track.Track, {
    as: "span",
    className: "gap-2",
    railEnd: railEnd,
    verticalAlign: "top",
    children: /*#__PURE__*/jsxRuntime.jsxs(box.Box, {
      as: "span",
      className: tw.tw`
					${shouldWrap ? 'flex-wrap' : ''}
					flex
					gap-0.5
					items-center
					min-w-0
					text-body-12
					w-full
					whitespace-normal
				`,
      children: [/*#__PURE__*/jsxRuntime.jsxs(box.Box, {
        as: "span",
        className: "line-clamp-1",
        children: [highlightMatchedContent(countryName, searchTerm), " \u2013"]
      }), /*#__PURE__*/jsxRuntime.jsx(box.Box, {
        as: "span",
        className: "line-clamp-1",
        children: highlightMatchedContent(city, searchTerm)
      }), shouldWrap ? /*#__PURE__*/jsxRuntime.jsxs(box.Box, {
        as: "span",
        children: ["(", highlightMatchedContent(tzAbbreviation, searchTerm), ")"]
      }) : null]
    })
  });
}

/**
 * Escapes special characters in a string for use in a regular expression.
 *
 * This function replaces characters that have special meaning in regular expressions,
 * such as `.`, `*`, `+`, `?`, `^`, `$`, `{}`, `()`, `|`, `[]`, and `\`, with their escaped counterparts.
 *
 * @param string - The string to escape.
 * @returns The escaped string, safe for use in a regular expression.
 */
function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

/**
 * Highlights matching parts of a string based on a search term.
 *
 * This function searches for occurrences of the `searchTerm` within the `text` and wraps them
 * in a `<span>` element with a `font-stronger` class to highlight them. The search is case-insensitive.
 *
 * @param text - The text in which to search for the matching term.
 * @param searchTerm - The term to search for and highlight within the text.
 * @returns - An array of strings and JSX elements where the matching parts
 * are wrapped in a `<span>` element with the `font-stronger` class.
 */
function highlightMatchedContent(text, searchTerm) {
  if (!searchTerm || !text) return text;
  const escapedSearchTerm = escapeRegExp(searchTerm);
  const regex = new RegExp(`(${escapedSearchTerm})`, 'gi');
  const parts = text.trim().split(regex);
  return parts.map((part, index) => regex.test(part) ? /*#__PURE__*/jsxRuntime.jsx(box.Box, {
    as: "span",
    className: "font-stronger",
    children: part
  }, index) : part);
}

/**
 * To avoid issues with CI requiring a GitHub access token, and the ensure that
 * users of the design system don't need an access token to have access to the
 * `@adaptavant/timezone-search` package, we're inlining the source directly and
 * bundling it with the design system.
 */

/* eslint-disable */
var io = Object.create;
var mi = Object.defineProperty,
  eo = Object.defineProperties,
  ro = Object.getOwnPropertyDescriptor,
  oo = Object.getOwnPropertyDescriptors,
  no = Object.getOwnPropertyNames,
  Yi = Object.getOwnPropertySymbols,
  to = Object.getPrototypeOf,
  Ui = Object.prototype.hasOwnProperty,
  so = Object.prototype.propertyIsEnumerable;
var ji = (a, e, i) => e in a ? mi(a, e, {
    enumerable: !0,
    configurable: !0,
    writable: !0,
    value: i
  }) : a[e] = i,
  g = (a, e) => {
    for (var i in e || (e = {})) Ui.call(e, i) && ji(a, i, e[i]);
    if (Yi) for (var i of Yi(e)) so.call(e, i) && ji(a, i, e[i]);
    return a;
  },
  f = (a, e) => eo(a, oo(e));
var l = (a, e) => () => (e || a((e = {
  exports: {}
}).exports, e), e.exports);
var uo = (a, e, i, r) => {
  if (e && typeof e == 'object' || typeof e == 'function') for (let o of no(e)) !Ui.call(a, o) && o !== i && mi(a, o, {
    get: () => e[o],
    enumerable: !(r = ro(e, o)) || r.enumerable
  });
  return a;
};
var ka = (a, e, i) => (i = a != null ? io(to(a)) : {}, uo(e || !a || !a.__esModule ? mi(i, 'default', {
  value: a,
  enumerable: !0
}) : i, a));
var h = l((hu, W) => {
  function Ao(a) {
    return a && a.__esModule ? a : {
      default: a
    };
  }
  W.exports = Ao, W.exports.__esModule = !0, W.exports.default = W.exports;
});
var di = l((du, C) => {
  function hi(a) {
    '@babel/helpers - typeof';

    return C.exports = hi = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol' ? function (e) {
      return typeof e;
    } : function (e) {
      return e && typeof Symbol == 'function' && e.constructor === Symbol && e !== Symbol.prototype ? 'symbol' : typeof e;
    }, C.exports.__esModule = !0, C.exports.default = C.exports, hi(a);
  }
  C.exports = hi, C.exports.__esModule = !0, C.exports.default = C.exports;
});
var k = l((Sa, Wi) => {

  Object.defineProperty(Sa, '__esModule', {
    value: !0
  });
  Sa.default = lo;
  function lo(a, e) {
    if (e.length < a) throw new TypeError(a + ' argument' + (a > 1 ? 's' : '') + ' required, but only ' + e.length + ' present');
  }
  Wi.exports = Sa.default;
});
var Zi = l((Ta, qi) => {

  var Vi = h().default;
  Object.defineProperty(Ta, '__esModule', {
    value: !0
  });
  Ta.default = ho;
  var co = Vi(di()),
    mo = Vi(k());
  function ho(a) {
    return (0, mo.default)(1, arguments), a instanceof Date || (0, co.default)(a) === 'object' && Object.prototype.toString.call(a) === '[object Date]';
  }
  qi.exports = Ta.default;
});
var E = l((Ma, Xi) => {

  var Qi = h().default;
  Object.defineProperty(Ma, '__esModule', {
    value: !0
  });
  Ma.default = po;
  var go = Qi(di()),
    fo = Qi(k());
  function po(a) {
    (0, fo.default)(1, arguments);
    var e = Object.prototype.toString.call(a);
    return a instanceof Date || (0, go.default)(a) === 'object' && e === '[object Date]' ? new Date(a.getTime()) : typeof a == 'number' || e === '[object Number]' ? new Date(a) : ((typeof a == 'string' || e === '[object String]') && typeof console < 'u' && (console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"), console.warn(new Error().stack)), new Date(NaN));
  }
  Xi.exports = Ma.default;
});
var ae = l((ya, $i) => {

  var gi = h().default;
  Object.defineProperty(ya, '__esModule', {
    value: !0
  });
  ya.default = Mo;
  var ko = gi(Zi()),
    So = gi(E()),
    To = gi(k());
  function Mo(a) {
    if ((0, To.default)(1, arguments), !(0, ko.default)(a) && typeof a != 'number') return !1;
    var e = (0, So.default)(a);
    return !isNaN(Number(e));
  }
  $i.exports = ya.default;
});
var _ = l((Ea, ie) => {

  Object.defineProperty(Ea, '__esModule', {
    value: !0
  });
  Ea.default = yo;
  function yo(a) {
    if (a === null || a === !0 || a === !1) return NaN;
    var e = Number(a);
    return isNaN(e) ? e : e < 0 ? Math.ceil(e) : Math.floor(e);
  }
  ie.exports = Ea.default;
});
var re = l((ba, ee) => {

  var fi = h().default;
  Object.defineProperty(ba, '__esModule', {
    value: !0
  });
  ba.default = Ko;
  var Eo = fi(_()),
    bo = fi(E()),
    Co = fi(k());
  function Ko(a, e) {
    (0, Co.default)(2, arguments);
    var i = (0, bo.default)(a).getTime(),
      r = (0, Eo.default)(e);
    return new Date(i + r);
  }
  ee.exports = ba.default;
});
var ne = l((Ca, oe) => {

  var pi = h().default;
  Object.defineProperty(Ca, '__esModule', {
    value: !0
  });
  Ca.default = Bo;
  var Po = pi(re()),
    _o = pi(k()),
    vo = pi(_());
  function Bo(a, e) {
    (0, _o.default)(2, arguments);
    var i = (0, vo.default)(e);
    return (0, Po.default)(a, -i);
  }
  oe.exports = Ca.default;
});
var ue = l((Ka, se) => {

  var te = h().default;
  Object.defineProperty(Ka, '__esModule', {
    value: !0
  });
  Ka.default = zo;
  var wo = te(E()),
    Lo = te(k()),
    Do = 864e5;
  function zo(a) {
    (0, Lo.default)(1, arguments);
    var e = (0, wo.default)(a),
      i = e.getTime();
    e.setUTCMonth(0, 1), e.setUTCHours(0, 0, 0, 0);
    var r = e.getTime(),
      o = i - r;
    return Math.floor(o / Do) + 1;
  }
  se.exports = Ka.default;
});
var _a = l((Pa, le) => {

  var Ae = h().default;
  Object.defineProperty(Pa, '__esModule', {
    value: !0
  });
  Pa.default = Go;
  var Io = Ae(E()),
    No = Ae(k());
  function Go(a) {
    (0, No.default)(1, arguments);
    var e = 1,
      i = (0, Io.default)(a),
      r = i.getUTCDay(),
      o = (r < e ? 7 : 0) + r - e;
    return i.setUTCDate(i.getUTCDate() - o), i.setUTCHours(0, 0, 0, 0), i;
  }
  le.exports = Pa.default;
});
var Si = l((va, me) => {

  var ki = h().default;
  Object.defineProperty(va, '__esModule', {
    value: !0
  });
  va.default = Ho;
  var Fo = ki(E()),
    Ro = ki(k()),
    ce = ki(_a());
  function Ho(a) {
    (0, Ro.default)(1, arguments);
    var e = (0, Fo.default)(a),
      i = e.getUTCFullYear(),
      r = new Date(0);
    r.setUTCFullYear(i + 1, 0, 4), r.setUTCHours(0, 0, 0, 0);
    var o = (0, ce.default)(r),
      n = new Date(0);
    n.setUTCFullYear(i, 0, 4), n.setUTCHours(0, 0, 0, 0);
    var t = (0, ce.default)(n);
    return e.getTime() >= o.getTime() ? i + 1 : e.getTime() >= t.getTime() ? i : i - 1;
  }
  me.exports = va.default;
});
var de = l((Ba, he) => {

  var Ti = h().default;
  Object.defineProperty(Ba, '__esModule', {
    value: !0
  });
  Ba.default = Yo;
  var Oo = Ti(Si()),
    Jo = Ti(_a()),
    xo = Ti(k());
  function Yo(a) {
    (0, xo.default)(1, arguments);
    var e = (0, Oo.default)(a),
      i = new Date(0);
    i.setUTCFullYear(e, 0, 4), i.setUTCHours(0, 0, 0, 0);
    var r = (0, Jo.default)(i);
    return r;
  }
  he.exports = Ba.default;
});
var fe = l((La, ge) => {

  var wa = h().default;
  Object.defineProperty(La, '__esModule', {
    value: !0
  });
  La.default = Zo;
  var jo = wa(E()),
    Uo = wa(_a()),
    Wo = wa(de()),
    Vo = wa(k()),
    qo = 6048e5;
  function Zo(a) {
    (0, Vo.default)(1, arguments);
    var e = (0, jo.default)(a),
      i = (0, Uo.default)(e).getTime() - (0, Wo.default)(e).getTime();
    return Math.round(i / qo) + 1;
  }
  ge.exports = La.default;
});
var V = l(Da => {

  Object.defineProperty(Da, '__esModule', {
    value: !0
  });
  Da.getDefaultOptions = Qo;
  Da.setDefaultOptions = Xo;
  var pe = {};
  function Qo() {
    return pe;
  }
  function Xo(a) {
    pe = a;
  }
});
var Ia = l((za, ke) => {

  var Mi = h().default;
  Object.defineProperty(za, '__esModule', {
    value: !0
  });
  za.default = on;
  var $o = Mi(E()),
    an = Mi(k()),
    en = Mi(_()),
    rn = V();
  function on(a, e) {
    var i, r, o, n, t, s, u, A;
    (0, an.default)(1, arguments);
    var m = (0, rn.getDefaultOptions)(),
      c = (0, en.default)((i = (r = (o = (n = e == null ? void 0 : e.weekStartsOn) !== null && n !== void 0 ? n : e == null || (t = e.locale) === null || t === void 0 || (s = t.options) === null || s === void 0 ? void 0 : s.weekStartsOn) !== null && o !== void 0 ? o : m.weekStartsOn) !== null && r !== void 0 ? r : (u = m.locale) === null || u === void 0 || (A = u.options) === null || A === void 0 ? void 0 : A.weekStartsOn) !== null && i !== void 0 ? i : 0);
    if (!(c >= 0 && c <= 6)) throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    var p = (0, $o.default)(a),
      S = p.getUTCDay(),
      y = (S < c ? 7 : 0) + S - c;
    return p.setUTCDate(p.getUTCDate() - y), p.setUTCHours(0, 0, 0, 0), p;
  }
  ke.exports = za.default;
});
var yi = l((Ga, Te) => {

  var Na = h().default;
  Object.defineProperty(Ga, '__esModule', {
    value: !0
  });
  Ga.default = An;
  var nn = Na(E()),
    tn = Na(k()),
    Se = Na(Ia()),
    sn = Na(_()),
    un = V();
  function An(a, e) {
    var i, r, o, n, t, s, u, A;
    (0, tn.default)(1, arguments);
    var m = (0, nn.default)(a),
      c = m.getUTCFullYear(),
      p = (0, un.getDefaultOptions)(),
      S = (0, sn.default)((i = (r = (o = (n = e == null ? void 0 : e.firstWeekContainsDate) !== null && n !== void 0 ? n : e == null || (t = e.locale) === null || t === void 0 || (s = t.options) === null || s === void 0 ? void 0 : s.firstWeekContainsDate) !== null && o !== void 0 ? o : p.firstWeekContainsDate) !== null && r !== void 0 ? r : (u = p.locale) === null || u === void 0 || (A = u.options) === null || A === void 0 ? void 0 : A.firstWeekContainsDate) !== null && i !== void 0 ? i : 1);
    if (!(S >= 1 && S <= 7)) throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
    var y = new Date(0);
    y.setUTCFullYear(c + 1, 0, S), y.setUTCHours(0, 0, 0, 0);
    var x = (0, Se.default)(y, e),
      D = new Date(0);
    D.setUTCFullYear(c, 0, S), D.setUTCHours(0, 0, 0, 0);
    var Y = (0, Se.default)(D, e);
    return m.getTime() >= x.getTime() ? c + 1 : m.getTime() >= Y.getTime() ? c : c - 1;
  }
  Te.exports = Ga.default;
});
var ye = l((Ra, Me) => {

  var Fa = h().default;
  Object.defineProperty(Ra, '__esModule', {
    value: !0
  });
  Ra.default = gn;
  var ln = Fa(yi()),
    cn = Fa(k()),
    mn = Fa(Ia()),
    hn = Fa(_()),
    dn = V();
  function gn(a, e) {
    var i, r, o, n, t, s, u, A;
    (0, cn.default)(1, arguments);
    var m = (0, dn.getDefaultOptions)(),
      c = (0, hn.default)((i = (r = (o = (n = e == null ? void 0 : e.firstWeekContainsDate) !== null && n !== void 0 ? n : e == null || (t = e.locale) === null || t === void 0 || (s = t.options) === null || s === void 0 ? void 0 : s.firstWeekContainsDate) !== null && o !== void 0 ? o : m.firstWeekContainsDate) !== null && r !== void 0 ? r : (u = m.locale) === null || u === void 0 || (A = u.options) === null || A === void 0 ? void 0 : A.firstWeekContainsDate) !== null && i !== void 0 ? i : 1),
      p = (0, ln.default)(a, e),
      S = new Date(0);
    S.setUTCFullYear(p, 0, c), S.setUTCHours(0, 0, 0, 0);
    var y = (0, mn.default)(S, e);
    return y;
  }
  Me.exports = Ra.default;
});
var be = l((Oa, Ee) => {

  var Ha = h().default;
  Object.defineProperty(Oa, '__esModule', {
    value: !0
  });
  Oa.default = Mn;
  var fn = Ha(E()),
    pn = Ha(Ia()),
    kn = Ha(ye()),
    Sn = Ha(k()),
    Tn = 6048e5;
  function Mn(a, e) {
    (0, Sn.default)(1, arguments);
    var i = (0, fn.default)(a),
      r = (0, pn.default)(i, e).getTime() - (0, kn.default)(i, e).getTime();
    return Math.round(r / Tn) + 1;
  }
  Ee.exports = Oa.default;
});
var Ei = l((Ja, Ce) => {

  Object.defineProperty(Ja, '__esModule', {
    value: !0
  });
  Ja.default = yn;
  function yn(a, e) {
    for (var i = a < 0 ? '-' : '', r = Math.abs(a).toString(); r.length < e;) r = '0' + r;
    return i + r;
  }
  Ce.exports = Ja.default;
});
var Pe = l((q, Ke) => {

  var En = h().default;
  Object.defineProperty(q, '__esModule', {
    value: !0
  });
  q.default = void 0;
  var v = En(Ei()),
    bn = {
      y: function (e, i) {
        var r = e.getUTCFullYear(),
          o = r > 0 ? r : 1 - r;
        return (0, v.default)(i === 'yy' ? o % 100 : o, i.length);
      },
      M: function (e, i) {
        var r = e.getUTCMonth();
        return i === 'M' ? String(r + 1) : (0, v.default)(r + 1, 2);
      },
      d: function (e, i) {
        return (0, v.default)(e.getUTCDate(), i.length);
      },
      a: function (e, i) {
        var r = e.getUTCHours() / 12 >= 1 ? 'pm' : 'am';
        switch (i) {
          case 'a':
          case 'aa':
            return r.toUpperCase();
          case 'aaa':
            return r;
          case 'aaaaa':
            return r[0];
          case 'aaaa':
          default:
            return r === 'am' ? 'a.m.' : 'p.m.';
        }
      },
      h: function (e, i) {
        return (0, v.default)(e.getUTCHours() % 12 || 12, i.length);
      },
      H: function (e, i) {
        return (0, v.default)(e.getUTCHours(), i.length);
      },
      m: function (e, i) {
        return (0, v.default)(e.getUTCMinutes(), i.length);
      },
      s: function (e, i) {
        return (0, v.default)(e.getUTCSeconds(), i.length);
      },
      S: function (e, i) {
        var r = i.length,
          o = e.getUTCMilliseconds(),
          n = Math.floor(o * Math.pow(10, r - 3));
        return (0, v.default)(n, i.length);
      }
    },
    Cn = bn;
  q.default = Cn;
  Ke.exports = q.default;
});
var we = l((Z, Be) => {

  var I = h().default;
  Object.defineProperty(Z, '__esModule', {
    value: !0
  });
  Z.default = void 0;
  var Kn = I(ue()),
    Pn = I(fe()),
    _n = I(Si()),
    vn = I(be()),
    Bn = I(yi()),
    d = I(Ei()),
    B = I(Pe()),
    G = {
      am: 'am',
      pm: 'pm',
      midnight: 'midnight',
      noon: 'noon',
      morning: 'morning',
      afternoon: 'afternoon',
      evening: 'evening',
      night: 'night'
    },
    wn = {
      G: function (e, i, r) {
        var o = e.getUTCFullYear() > 0 ? 1 : 0;
        switch (i) {
          case 'G':
          case 'GG':
          case 'GGG':
            return r.era(o, {
              width: 'abbreviated'
            });
          case 'GGGGG':
            return r.era(o, {
              width: 'narrow'
            });
          case 'GGGG':
          default:
            return r.era(o, {
              width: 'wide'
            });
        }
      },
      y: function (e, i, r) {
        if (i === 'yo') {
          var o = e.getUTCFullYear(),
            n = o > 0 ? o : 1 - o;
          return r.ordinalNumber(n, {
            unit: 'year'
          });
        }
        return B.default.y(e, i);
      },
      Y: function (e, i, r, o) {
        var n = (0, Bn.default)(e, o),
          t = n > 0 ? n : 1 - n;
        if (i === 'YY') {
          var s = t % 100;
          return (0, d.default)(s, 2);
        }
        return i === 'Yo' ? r.ordinalNumber(t, {
          unit: 'year'
        }) : (0, d.default)(t, i.length);
      },
      R: function (e, i) {
        var r = (0, _n.default)(e);
        return (0, d.default)(r, i.length);
      },
      u: function (e, i) {
        var r = e.getUTCFullYear();
        return (0, d.default)(r, i.length);
      },
      Q: function (e, i, r) {
        var o = Math.ceil((e.getUTCMonth() + 1) / 3);
        switch (i) {
          case 'Q':
            return String(o);
          case 'QQ':
            return (0, d.default)(o, 2);
          case 'Qo':
            return r.ordinalNumber(o, {
              unit: 'quarter'
            });
          case 'QQQ':
            return r.quarter(o, {
              width: 'abbreviated',
              context: 'formatting'
            });
          case 'QQQQQ':
            return r.quarter(o, {
              width: 'narrow',
              context: 'formatting'
            });
          case 'QQQQ':
          default:
            return r.quarter(o, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      q: function (e, i, r) {
        var o = Math.ceil((e.getUTCMonth() + 1) / 3);
        switch (i) {
          case 'q':
            return String(o);
          case 'qq':
            return (0, d.default)(o, 2);
          case 'qo':
            return r.ordinalNumber(o, {
              unit: 'quarter'
            });
          case 'qqq':
            return r.quarter(o, {
              width: 'abbreviated',
              context: 'standalone'
            });
          case 'qqqqq':
            return r.quarter(o, {
              width: 'narrow',
              context: 'standalone'
            });
          case 'qqqq':
          default:
            return r.quarter(o, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      M: function (e, i, r) {
        var o = e.getUTCMonth();
        switch (i) {
          case 'M':
          case 'MM':
            return B.default.M(e, i);
          case 'Mo':
            return r.ordinalNumber(o + 1, {
              unit: 'month'
            });
          case 'MMM':
            return r.month(o, {
              width: 'abbreviated',
              context: 'formatting'
            });
          case 'MMMMM':
            return r.month(o, {
              width: 'narrow',
              context: 'formatting'
            });
          case 'MMMM':
          default:
            return r.month(o, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      L: function (e, i, r) {
        var o = e.getUTCMonth();
        switch (i) {
          case 'L':
            return String(o + 1);
          case 'LL':
            return (0, d.default)(o + 1, 2);
          case 'Lo':
            return r.ordinalNumber(o + 1, {
              unit: 'month'
            });
          case 'LLL':
            return r.month(o, {
              width: 'abbreviated',
              context: 'standalone'
            });
          case 'LLLLL':
            return r.month(o, {
              width: 'narrow',
              context: 'standalone'
            });
          case 'LLLL':
          default:
            return r.month(o, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      w: function (e, i, r, o) {
        var n = (0, vn.default)(e, o);
        return i === 'wo' ? r.ordinalNumber(n, {
          unit: 'week'
        }) : (0, d.default)(n, i.length);
      },
      I: function (e, i, r) {
        var o = (0, Pn.default)(e);
        return i === 'Io' ? r.ordinalNumber(o, {
          unit: 'week'
        }) : (0, d.default)(o, i.length);
      },
      d: function (e, i, r) {
        return i === 'do' ? r.ordinalNumber(e.getUTCDate(), {
          unit: 'date'
        }) : B.default.d(e, i);
      },
      D: function (e, i, r) {
        var o = (0, Kn.default)(e);
        return i === 'Do' ? r.ordinalNumber(o, {
          unit: 'dayOfYear'
        }) : (0, d.default)(o, i.length);
      },
      E: function (e, i, r) {
        var o = e.getUTCDay();
        switch (i) {
          case 'E':
          case 'EE':
          case 'EEE':
            return r.day(o, {
              width: 'abbreviated',
              context: 'formatting'
            });
          case 'EEEEE':
            return r.day(o, {
              width: 'narrow',
              context: 'formatting'
            });
          case 'EEEEEE':
            return r.day(o, {
              width: 'short',
              context: 'formatting'
            });
          case 'EEEE':
          default:
            return r.day(o, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      e: function (e, i, r, o) {
        var n = e.getUTCDay(),
          t = (n - o.weekStartsOn + 8) % 7 || 7;
        switch (i) {
          case 'e':
            return String(t);
          case 'ee':
            return (0, d.default)(t, 2);
          case 'eo':
            return r.ordinalNumber(t, {
              unit: 'day'
            });
          case 'eee':
            return r.day(n, {
              width: 'abbreviated',
              context: 'formatting'
            });
          case 'eeeee':
            return r.day(n, {
              width: 'narrow',
              context: 'formatting'
            });
          case 'eeeeee':
            return r.day(n, {
              width: 'short',
              context: 'formatting'
            });
          case 'eeee':
          default:
            return r.day(n, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      c: function (e, i, r, o) {
        var n = e.getUTCDay(),
          t = (n - o.weekStartsOn + 8) % 7 || 7;
        switch (i) {
          case 'c':
            return String(t);
          case 'cc':
            return (0, d.default)(t, i.length);
          case 'co':
            return r.ordinalNumber(t, {
              unit: 'day'
            });
          case 'ccc':
            return r.day(n, {
              width: 'abbreviated',
              context: 'standalone'
            });
          case 'ccccc':
            return r.day(n, {
              width: 'narrow',
              context: 'standalone'
            });
          case 'cccccc':
            return r.day(n, {
              width: 'short',
              context: 'standalone'
            });
          case 'cccc':
          default:
            return r.day(n, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      i: function (e, i, r) {
        var o = e.getUTCDay(),
          n = o === 0 ? 7 : o;
        switch (i) {
          case 'i':
            return String(n);
          case 'ii':
            return (0, d.default)(n, i.length);
          case 'io':
            return r.ordinalNumber(n, {
              unit: 'day'
            });
          case 'iii':
            return r.day(o, {
              width: 'abbreviated',
              context: 'formatting'
            });
          case 'iiiii':
            return r.day(o, {
              width: 'narrow',
              context: 'formatting'
            });
          case 'iiiiii':
            return r.day(o, {
              width: 'short',
              context: 'formatting'
            });
          case 'iiii':
          default:
            return r.day(o, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      a: function (e, i, r) {
        var o = e.getUTCHours(),
          n = o / 12 >= 1 ? 'pm' : 'am';
        switch (i) {
          case 'a':
          case 'aa':
            return r.dayPeriod(n, {
              width: 'abbreviated',
              context: 'formatting'
            });
          case 'aaa':
            return r.dayPeriod(n, {
              width: 'abbreviated',
              context: 'formatting'
            }).toLowerCase();
          case 'aaaaa':
            return r.dayPeriod(n, {
              width: 'narrow',
              context: 'formatting'
            });
          case 'aaaa':
          default:
            return r.dayPeriod(n, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      b: function (e, i, r) {
        var o = e.getUTCHours(),
          n;
        switch (o === 12 ? n = G.noon : o === 0 ? n = G.midnight : n = o / 12 >= 1 ? 'pm' : 'am', i) {
          case 'b':
          case 'bb':
            return r.dayPeriod(n, {
              width: 'abbreviated',
              context: 'formatting'
            });
          case 'bbb':
            return r.dayPeriod(n, {
              width: 'abbreviated',
              context: 'formatting'
            }).toLowerCase();
          case 'bbbbb':
            return r.dayPeriod(n, {
              width: 'narrow',
              context: 'formatting'
            });
          case 'bbbb':
          default:
            return r.dayPeriod(n, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      B: function (e, i, r) {
        var o = e.getUTCHours(),
          n;
        switch (o >= 17 ? n = G.evening : o >= 12 ? n = G.afternoon : o >= 4 ? n = G.morning : n = G.night, i) {
          case 'B':
          case 'BB':
          case 'BBB':
            return r.dayPeriod(n, {
              width: 'abbreviated',
              context: 'formatting'
            });
          case 'BBBBB':
            return r.dayPeriod(n, {
              width: 'narrow',
              context: 'formatting'
            });
          case 'BBBB':
          default:
            return r.dayPeriod(n, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      h: function (e, i, r) {
        if (i === 'ho') {
          var o = e.getUTCHours() % 12;
          return o === 0 && (o = 12), r.ordinalNumber(o, {
            unit: 'hour'
          });
        }
        return B.default.h(e, i);
      },
      H: function (e, i, r) {
        return i === 'Ho' ? r.ordinalNumber(e.getUTCHours(), {
          unit: 'hour'
        }) : B.default.H(e, i);
      },
      K: function (e, i, r) {
        var o = e.getUTCHours() % 12;
        return i === 'Ko' ? r.ordinalNumber(o, {
          unit: 'hour'
        }) : (0, d.default)(o, i.length);
      },
      k: function (e, i, r) {
        var o = e.getUTCHours();
        return o === 0 && (o = 24), i === 'ko' ? r.ordinalNumber(o, {
          unit: 'hour'
        }) : (0, d.default)(o, i.length);
      },
      m: function (e, i, r) {
        return i === 'mo' ? r.ordinalNumber(e.getUTCMinutes(), {
          unit: 'minute'
        }) : B.default.m(e, i);
      },
      s: function (e, i, r) {
        return i === 'so' ? r.ordinalNumber(e.getUTCSeconds(), {
          unit: 'second'
        }) : B.default.s(e, i);
      },
      S: function (e, i) {
        return B.default.S(e, i);
      },
      X: function (e, i, r, o) {
        var n = o._originalDate || e,
          t = n.getTimezoneOffset();
        if (t === 0) return 'Z';
        switch (i) {
          case 'X':
            return ve(t);
          case 'XXXX':
          case 'XX':
            return z(t);
          case 'XXXXX':
          case 'XXX':
          default:
            return z(t, ':');
        }
      },
      x: function (e, i, r, o) {
        var n = o._originalDate || e,
          t = n.getTimezoneOffset();
        switch (i) {
          case 'x':
            return ve(t);
          case 'xxxx':
          case 'xx':
            return z(t);
          case 'xxxxx':
          case 'xxx':
          default:
            return z(t, ':');
        }
      },
      O: function (e, i, r, o) {
        var n = o._originalDate || e,
          t = n.getTimezoneOffset();
        switch (i) {
          case 'O':
          case 'OO':
          case 'OOO':
            return 'GMT' + _e(t, ':');
          case 'OOOO':
          default:
            return 'GMT' + z(t, ':');
        }
      },
      z: function (e, i, r, o) {
        var n = o._originalDate || e,
          t = n.getTimezoneOffset();
        switch (i) {
          case 'z':
          case 'zz':
          case 'zzz':
            return 'GMT' + _e(t, ':');
          case 'zzzz':
          default:
            return 'GMT' + z(t, ':');
        }
      },
      t: function (e, i, r, o) {
        var n = o._originalDate || e,
          t = Math.floor(n.getTime() / 1e3);
        return (0, d.default)(t, i.length);
      },
      T: function (e, i, r, o) {
        var n = o._originalDate || e,
          t = n.getTime();
        return (0, d.default)(t, i.length);
      }
    };
  function _e(a, e) {
    var i = a > 0 ? '-' : '+',
      r = Math.abs(a),
      o = Math.floor(r / 60),
      n = r % 60;
    if (n === 0) return i + String(o);
    var t = e || '';
    return i + String(o) + t + (0, d.default)(n, 2);
  }
  function ve(a, e) {
    if (a % 60 === 0) {
      var i = a > 0 ? '-' : '+';
      return i + (0, d.default)(Math.abs(a) / 60, 2);
    }
    return z(a, e);
  }
  function z(a, e) {
    var i = e || '',
      r = a > 0 ? '-' : '+',
      o = Math.abs(a),
      n = (0, d.default)(Math.floor(o / 60), 2),
      t = (0, d.default)(o % 60, 2);
    return r + n + i + t;
  }
  var Ln = wn;
  Z.default = Ln;
  Be.exports = Z.default;
});
var Ie = l((Q, ze) => {

  Object.defineProperty(Q, '__esModule', {
    value: !0
  });
  Q.default = void 0;
  var Le = function (e, i) {
      switch (e) {
        case 'P':
          return i.date({
            width: 'short'
          });
        case 'PP':
          return i.date({
            width: 'medium'
          });
        case 'PPP':
          return i.date({
            width: 'long'
          });
        case 'PPPP':
        default:
          return i.date({
            width: 'full'
          });
      }
    },
    De = function (e, i) {
      switch (e) {
        case 'p':
          return i.time({
            width: 'short'
          });
        case 'pp':
          return i.time({
            width: 'medium'
          });
        case 'ppp':
          return i.time({
            width: 'long'
          });
        case 'pppp':
        default:
          return i.time({
            width: 'full'
          });
      }
    },
    Dn = function (e, i) {
      var r = e.match(/(P+)(p+)?/) || [],
        o = r[1],
        n = r[2];
      if (!n) return Le(e, i);
      var t;
      switch (o) {
        case 'P':
          t = i.dateTime({
            width: 'short'
          });
          break;
        case 'PP':
          t = i.dateTime({
            width: 'medium'
          });
          break;
        case 'PPP':
          t = i.dateTime({
            width: 'long'
          });
          break;
        case 'PPPP':
        default:
          t = i.dateTime({
            width: 'full'
          });
          break;
      }
      return t.replace('{{date}}', Le(o, i)).replace('{{time}}', De(n, i));
    },
    zn = {
      p: De,
      P: Dn
    },
    In = zn;
  Q.default = In;
  ze.exports = Q.default;
});
var bi = l((xa, Ne) => {

  Object.defineProperty(xa, '__esModule', {
    value: !0
  });
  xa.default = Nn;
  function Nn(a) {
    var e = new Date(Date.UTC(a.getFullYear(), a.getMonth(), a.getDate(), a.getHours(), a.getMinutes(), a.getSeconds(), a.getMilliseconds()));
    return e.setUTCFullYear(a.getFullYear()), a.getTime() - e.getTime();
  }
  Ne.exports = xa.default;
});
var Ge = l(X => {

  Object.defineProperty(X, '__esModule', {
    value: !0
  });
  X.isProtectedDayOfYearToken = Rn;
  X.isProtectedWeekYearToken = Hn;
  X.throwProtectedError = On;
  var Gn = ['D', 'DD'],
    Fn = ['YY', 'YYYY'];
  function Rn(a) {
    return Gn.indexOf(a) !== -1;
  }
  function Hn(a) {
    return Fn.indexOf(a) !== -1;
  }
  function On(a, e, i) {
    if (a === 'YYYY') throw new RangeError('Use `yyyy` instead of `YYYY` (in `'.concat(e, '`) for formatting years to the input `').concat(i, '`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md'));
    if (a === 'YY') throw new RangeError('Use `yy` instead of `YY` (in `'.concat(e, '`) for formatting years to the input `').concat(i, '`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md'));
    if (a === 'D') throw new RangeError('Use `d` instead of `D` (in `'.concat(e, '`) for formatting days of the month to the input `').concat(i, '`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md'));
    if (a === 'DD') throw new RangeError('Use `dd` instead of `DD` (in `'.concat(e, '`) for formatting days of the month to the input `').concat(i, '`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md'));
  }
});
var Re = l(($, Fe) => {

  Object.defineProperty($, '__esModule', {
    value: !0
  });
  $.default = void 0;
  var Jn = {
      lessThanXSeconds: {
        one: 'less than a second',
        other: 'less than {{count}} seconds'
      },
      xSeconds: {
        one: '1 second',
        other: '{{count}} seconds'
      },
      halfAMinute: 'half a minute',
      lessThanXMinutes: {
        one: 'less than a minute',
        other: 'less than {{count}} minutes'
      },
      xMinutes: {
        one: '1 minute',
        other: '{{count}} minutes'
      },
      aboutXHours: {
        one: 'about 1 hour',
        other: 'about {{count}} hours'
      },
      xHours: {
        one: '1 hour',
        other: '{{count}} hours'
      },
      xDays: {
        one: '1 day',
        other: '{{count}} days'
      },
      aboutXWeeks: {
        one: 'about 1 week',
        other: 'about {{count}} weeks'
      },
      xWeeks: {
        one: '1 week',
        other: '{{count}} weeks'
      },
      aboutXMonths: {
        one: 'about 1 month',
        other: 'about {{count}} months'
      },
      xMonths: {
        one: '1 month',
        other: '{{count}} months'
      },
      aboutXYears: {
        one: 'about 1 year',
        other: 'about {{count}} years'
      },
      xYears: {
        one: '1 year',
        other: '{{count}} years'
      },
      overXYears: {
        one: 'over 1 year',
        other: 'over {{count}} years'
      },
      almostXYears: {
        one: 'almost 1 year',
        other: 'almost {{count}} years'
      }
    },
    xn = function (e, i, r) {
      var o,
        n = Jn[e];
      return typeof n == 'string' ? o = n : i === 1 ? o = n.one : o = n.other.replace('{{count}}', i.toString()), r != null && r.addSuffix ? r.comparison && r.comparison > 0 ? 'in ' + o : o + ' ago' : o;
    },
    Yn = xn;
  $.default = Yn;
  Fe.exports = $.default;
});
var Oe = l((Ya, He) => {

  Object.defineProperty(Ya, '__esModule', {
    value: !0
  });
  Ya.default = jn;
  function jn(a) {
    return function () {
      var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {},
        i = e.width ? String(e.width) : a.defaultWidth,
        r = a.formats[i] || a.formats[a.defaultWidth];
      return r;
    };
  }
  He.exports = Ya.default;
});
var xe = l((aa, Je) => {

  var Un = h().default;
  Object.defineProperty(aa, '__esModule', {
    value: !0
  });
  aa.default = void 0;
  var Ci = Un(Oe()),
    Wn = {
      full: 'EEEE, MMMM do, y',
      long: 'MMMM do, y',
      medium: 'MMM d, y',
      short: 'MM/dd/yyyy'
    },
    Vn = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    },
    qn = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    },
    Zn = {
      date: (0, Ci.default)({
        formats: Wn,
        defaultWidth: 'full'
      }),
      time: (0, Ci.default)({
        formats: Vn,
        defaultWidth: 'full'
      }),
      dateTime: (0, Ci.default)({
        formats: qn,
        defaultWidth: 'full'
      })
    },
    Qn = Zn;
  aa.default = Qn;
  Je.exports = aa.default;
});
var je = l((ia, Ye) => {

  Object.defineProperty(ia, '__esModule', {
    value: !0
  });
  ia.default = void 0;
  var Xn = {
      lastWeek: "'last' eeee 'at' p",
      yesterday: "'yesterday at' p",
      today: "'today at' p",
      tomorrow: "'tomorrow at' p",
      nextWeek: "eeee 'at' p",
      other: 'P'
    },
    $n = function (e, i, r, o) {
      return Xn[e];
    },
    at = $n;
  ia.default = at;
  Ye.exports = ia.default;
});
var We = l((ja, Ue) => {

  Object.defineProperty(ja, '__esModule', {
    value: !0
  });
  ja.default = it;
  function it(a) {
    return function (e, i) {
      var r = i != null && i.context ? String(i.context) : 'standalone',
        o;
      if (r === 'formatting' && a.formattingValues) {
        var n = a.defaultFormattingWidth || a.defaultWidth,
          t = i != null && i.width ? String(i.width) : n;
        o = a.formattingValues[t] || a.formattingValues[n];
      } else {
        var s = a.defaultWidth,
          u = i != null && i.width ? String(i.width) : a.defaultWidth;
        o = a.values[u] || a.values[s];
      }
      var A = a.argumentCallback ? a.argumentCallback(e) : e;
      return o[A];
    };
  }
  Ue.exports = ja.default;
});
var qe = l((ra, Ve) => {

  var et = h().default;
  Object.defineProperty(ra, '__esModule', {
    value: !0
  });
  ra.default = void 0;
  var ea = et(We()),
    rt = {
      narrow: ['B', 'A'],
      abbreviated: ['BC', 'AD'],
      wide: ['Before Christ', 'Anno Domini']
    },
    ot = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
    },
    nt = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
      wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    },
    tt = {
      narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
      short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
      abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
      wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    },
    st = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      }
    },
    ut = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      }
    },
    At = function (e, i) {
      var r = Number(e),
        o = r % 100;
      if (o > 20 || o < 10) switch (o % 10) {
        case 1:
          return r + 'st';
        case 2:
          return r + 'nd';
        case 3:
          return r + 'rd';
      }
      return r + 'th';
    },
    lt = {
      ordinalNumber: At,
      era: (0, ea.default)({
        values: rt,
        defaultWidth: 'wide'
      }),
      quarter: (0, ea.default)({
        values: ot,
        defaultWidth: 'wide',
        argumentCallback: function (e) {
          return e - 1;
        }
      }),
      month: (0, ea.default)({
        values: nt,
        defaultWidth: 'wide'
      }),
      day: (0, ea.default)({
        values: tt,
        defaultWidth: 'wide'
      }),
      dayPeriod: (0, ea.default)({
        values: st,
        defaultWidth: 'wide',
        formattingValues: ut,
        defaultFormattingWidth: 'wide'
      })
    },
    ct = lt;
  ra.default = ct;
  Ve.exports = ra.default;
});
var Qe = l((Ua, Ze) => {

  Object.defineProperty(Ua, '__esModule', {
    value: !0
  });
  Ua.default = mt;
  function mt(a) {
    return function (e) {
      var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {},
        r = i.width,
        o = r && a.matchPatterns[r] || a.matchPatterns[a.defaultMatchWidth],
        n = e.match(o);
      if (!n) return null;
      var t = n[0],
        s = r && a.parsePatterns[r] || a.parsePatterns[a.defaultParseWidth],
        u = Array.isArray(s) ? dt(s, function (c) {
          return c.test(t);
        }) : ht(s, function (c) {
          return c.test(t);
        }),
        A;
      A = a.valueCallback ? a.valueCallback(u) : u, A = i.valueCallback ? i.valueCallback(A) : A;
      var m = e.slice(t.length);
      return {
        value: A,
        rest: m
      };
    };
  }
  function ht(a, e) {
    for (var i in a) if (a.hasOwnProperty(i) && e(a[i])) return i;
  }
  function dt(a, e) {
    for (var i = 0; i < a.length; i++) if (e(a[i])) return i;
  }
  Ze.exports = Ua.default;
});
var $e = l((Wa, Xe) => {

  Object.defineProperty(Wa, '__esModule', {
    value: !0
  });
  Wa.default = gt;
  function gt(a) {
    return function (e) {
      var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {},
        r = e.match(a.matchPattern);
      if (!r) return null;
      var o = r[0],
        n = e.match(a.parsePattern);
      if (!n) return null;
      var t = a.valueCallback ? a.valueCallback(n[0]) : n[0];
      t = i.valueCallback ? i.valueCallback(t) : t;
      var s = e.slice(o.length);
      return {
        value: t,
        rest: s
      };
    };
  }
  Xe.exports = Wa.default;
});
var er = l((na, ir) => {

  var ar = h().default;
  Object.defineProperty(na, '__esModule', {
    value: !0
  });
  na.default = void 0;
  var oa = ar(Qe()),
    ft = ar($e()),
    pt = /^(\d+)(th|st|nd|rd)?/i,
    kt = /\d+/i,
    St = {
      narrow: /^(b|a)/i,
      abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      wide: /^(before christ|before common era|anno domini|common era)/i
    },
    Tt = {
      any: [/^b/i, /^(a|c)/i]
    },
    Mt = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](th|st|nd|rd)? quarter/i
    },
    yt = {
      any: [/1/i, /2/i, /3/i, /4/i]
    },
    Et = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
      wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
    },
    bt = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    },
    Ct = {
      narrow: /^[smtwf]/i,
      short: /^(su|mo|tu|we|th|fr|sa)/i,
      abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
      wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
    },
    Kt = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    },
    Pt = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    },
    _t = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    },
    vt = {
      ordinalNumber: (0, ft.default)({
        matchPattern: pt,
        parsePattern: kt,
        valueCallback: function (e) {
          return parseInt(e, 10);
        }
      }),
      era: (0, oa.default)({
        matchPatterns: St,
        defaultMatchWidth: 'wide',
        parsePatterns: Tt,
        defaultParseWidth: 'any'
      }),
      quarter: (0, oa.default)({
        matchPatterns: Mt,
        defaultMatchWidth: 'wide',
        parsePatterns: yt,
        defaultParseWidth: 'any',
        valueCallback: function (e) {
          return e + 1;
        }
      }),
      month: (0, oa.default)({
        matchPatterns: Et,
        defaultMatchWidth: 'wide',
        parsePatterns: bt,
        defaultParseWidth: 'any'
      }),
      day: (0, oa.default)({
        matchPatterns: Ct,
        defaultMatchWidth: 'wide',
        parsePatterns: Kt,
        defaultParseWidth: 'any'
      }),
      dayPeriod: (0, oa.default)({
        matchPatterns: Pt,
        defaultMatchWidth: 'any',
        parsePatterns: _t,
        defaultParseWidth: 'any'
      })
    },
    Bt = vt;
  na.default = Bt;
  ir.exports = na.default;
});
var or = l((sa, rr) => {

  var ta = h().default;
  Object.defineProperty(sa, '__esModule', {
    value: !0
  });
  sa.default = void 0;
  var wt = ta(Re()),
    Lt = ta(xe()),
    Dt = ta(je()),
    zt = ta(qe()),
    It = ta(er()),
    Nt = {
      code: 'en-US',
      formatDistance: wt.default,
      formatLong: Lt.default,
      formatRelative: Dt.default,
      localize: zt.default,
      match: It.default,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    },
    Gt = Nt;
  sa.default = Gt;
  rr.exports = sa.default;
});
var tr = l((ua, nr) => {

  var Ft = h().default;
  Object.defineProperty(ua, '__esModule', {
    value: !0
  });
  ua.default = void 0;
  var Rt = Ft(or()),
    Ht = Rt.default;
  ua.default = Ht;
  nr.exports = ua.default;
});
var Ar = l((qa, ur) => {

  var K = h().default;
  Object.defineProperty(qa, '__esModule', {
    value: !0
  });
  qa.default = is;
  var Ot = K(ae()),
    Jt = K(ne()),
    xt = K(E()),
    Yt = K(we()),
    jt = K(Ie()),
    Ut = K(bi()),
    Va = Ge(),
    sr = K(_()),
    Wt = K(k()),
    Vt = V(),
    qt = K(tr()),
    Zt = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,
    Qt = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,
    Xt = /^'([^]*?)'?$/,
    $t = /''/g,
    as = /[a-zA-Z]/;
  function is(a, e, i) {
    var r, o, n, t, s, u, A, m, c, p, S, y, x, D, Y, si, ui, Ai;
    (0, Wt.default)(2, arguments);
    var Zr = String(e),
      j = (0, Vt.getDefaultOptions)(),
      U = (r = (o = i == null ? void 0 : i.locale) !== null && o !== void 0 ? o : j.locale) !== null && r !== void 0 ? r : qt.default,
      li = (0, sr.default)((n = (t = (s = (u = i == null ? void 0 : i.firstWeekContainsDate) !== null && u !== void 0 ? u : i == null || (A = i.locale) === null || A === void 0 || (m = A.options) === null || m === void 0 ? void 0 : m.firstWeekContainsDate) !== null && s !== void 0 ? s : j.firstWeekContainsDate) !== null && t !== void 0 ? t : (c = j.locale) === null || c === void 0 || (p = c.options) === null || p === void 0 ? void 0 : p.firstWeekContainsDate) !== null && n !== void 0 ? n : 1);
    if (!(li >= 1 && li <= 7)) throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
    var ci = (0, sr.default)((S = (y = (x = (D = i == null ? void 0 : i.weekStartsOn) !== null && D !== void 0 ? D : i == null || (Y = i.locale) === null || Y === void 0 || (si = Y.options) === null || si === void 0 ? void 0 : si.weekStartsOn) !== null && x !== void 0 ? x : j.weekStartsOn) !== null && y !== void 0 ? y : (ui = j.locale) === null || ui === void 0 || (Ai = ui.options) === null || Ai === void 0 ? void 0 : Ai.weekStartsOn) !== null && S !== void 0 ? S : 0);
    if (!(ci >= 0 && ci <= 6)) throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    if (!U.localize) throw new RangeError('locale must contain localize property');
    if (!U.formatLong) throw new RangeError('locale must contain formatLong property');
    var fa = (0, xt.default)(a);
    if (!(0, Ot.default)(fa)) throw new RangeError('Invalid time value');
    var Qr = (0, Ut.default)(fa),
      Xr = (0, Jt.default)(fa, Qr),
      $r = {
        firstWeekContainsDate: li,
        weekStartsOn: ci,
        locale: U,
        _originalDate: fa
      },
      ao = Zr.match(Qt).map(function (M) {
        var P = M[0];
        if (P === 'p' || P === 'P') {
          var pa = jt.default[P];
          return pa(M, U.formatLong);
        }
        return M;
      }).join('').match(Zt).map(function (M) {
        if (M === "''") return "'";
        var P = M[0];
        if (P === "'") return es(M);
        var pa = Yt.default[P];
        if (pa) return !(i != null && i.useAdditionalWeekYearTokens) && (0, Va.isProtectedWeekYearToken)(M) && (0, Va.throwProtectedError)(M, e, String(a)), !(i != null && i.useAdditionalDayOfYearTokens) && (0, Va.isProtectedDayOfYearToken)(M) && (0, Va.throwProtectedError)(M, e, String(a)), pa(Xr, M, U.localize, $r);
        if (P.match(as)) throw new RangeError('Format string contains an unescaped latin alphabet character `' + P + '`');
        return M;
      }).join('');
    return ao;
  }
  function es(a) {
    var e = a.match(Xt);
    return e ? e[1].replace($t, "'") : a;
  }
  ur.exports = qa.default;
});
var br = l(($a, Er) => {

  Object.defineProperty($a, '__esModule', {
    value: !0
  });
  $a.default = Ps;
  function Ps(a, e) {
    if (a == null) throw new TypeError('assign requires that input parameter not be null or undefined');
    for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && (a[i] = e[i]);
    return a;
  }
  Er.exports = $a.default;
});
var Kr = l((ai, Cr) => {

  var _s = h().default;
  Object.defineProperty(ai, '__esModule', {
    value: !0
  });
  ai.default = Bs;
  var vs = _s(br());
  function Bs(a) {
    return (0, vs.default)({}, a);
  }
  Cr.exports = ai.default;
});
var yr = ka(Ar(), 1);
function Za(a, e, i) {
  var r = ns(a, i.timeZone, i.locale);
  return r.formatToParts ? rs(r, e) : os(r, e);
}
function rs(a, e) {
  for (var i = a.formatToParts(e), r = i.length - 1; r >= 0; --r) if (i[r].type === 'timeZoneName') return i[r].value;
}
function os(a, e) {
  var i = a.format(e).replace(/\u200E/g, ''),
    r = / [\w-+ ]+$/.exec(i);
  return r ? r[0].substr(1) : '';
}
function ns(a, e, i) {
  if (i && !i.code) throw new Error("date-fns-tz error: Please set a language code on the locale object imported from date-fns, e.g. `locale.code = 'en-US'`");
  return new Intl.DateTimeFormat(i ? [i.code, 'en-US'] : void 0, {
    timeZone: e,
    timeZoneName: a
  });
}
function Pi(a, e) {
  var i = As(e);
  return i.formatToParts ? ss(i, a) : us(i, a);
}
var ts = {
  year: 0,
  month: 1,
  day: 2,
  hour: 3,
  minute: 4,
  second: 5
};
function ss(a, e) {
  try {
    for (var i = a.formatToParts(e), r = [], o = 0; o < i.length; o++) {
      var n = ts[i[o].type];
      n >= 0 && (r[n] = parseInt(i[o].value, 10));
    }
    return r;
  } catch (t) {
    if (t instanceof RangeError) return [NaN];
    throw t;
  }
}
function us(a, e) {
  var i = a.format(e).replace(/\u200E/g, ''),
    r = /(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(i);
  return [r[3], r[1], r[2], r[4], r[5], r[6]];
}
var Ki = {};
function As(a) {
  if (!Ki[a]) {
    var e = new Intl.DateTimeFormat('en-US', {
        hour12: !1,
        timeZone: 'America/New_York',
        year: 'numeric',
        month: 'numeric',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      }).format(new Date('2014-06-25T04:00:00.123Z')),
      i = e === '06/25/2014, 00:00:00' || e === '\u200E06\u200E/\u200E25\u200E/\u200E2014\u200E \u200E00\u200E:\u200E00\u200E:\u200E00';
    Ki[a] = i ? new Intl.DateTimeFormat('en-US', {
      hour12: !1,
      timeZone: a,
      year: 'numeric',
      month: 'numeric',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    }) : new Intl.DateTimeFormat('en-US', {
      hourCycle: 'h23',
      timeZone: a,
      year: 'numeric',
      month: 'numeric',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  }
  return Ki[a];
}
function Qa(a, e, i, r, o, n, t) {
  var s = new Date(0);
  return s.setUTCFullYear(a, e, i), s.setUTCHours(r, o, n, t), s;
}
var lr = 36e5,
  ls = 6e4,
  _i = {
    timezone: /([Z+-].*)$/,
    timezoneZ: /^(Z)$/,
    timezoneHH: /^([+-]\d{2})$/,
    timezoneHHMM: /^([+-]\d{2}):?(\d{2})$/
  };
function N(a, e, i) {
  var r, o;
  if (!a || (r = _i.timezoneZ.exec(a), r)) return 0;
  var n;
  if (r = _i.timezoneHH.exec(a), r) return n = parseInt(r[1], 10), cr(n) ? -(n * lr) : NaN;
  if (r = _i.timezoneHHMM.exec(a), r) {
    n = parseInt(r[1], 10);
    var t = parseInt(r[2], 10);
    return cr(n, t) ? (o = Math.abs(n) * lr + t * ls, n > 0 ? -o : o) : NaN;
  }
  if (hs(a)) {
    e = new Date(e || Date.now());
    var s = i ? e : cs(e),
      u = vi(s, a),
      A = i ? u : ms(e, u, a);
    return -A;
  }
  return NaN;
}
function cs(a) {
  return Qa(a.getFullYear(), a.getMonth(), a.getDate(), a.getHours(), a.getMinutes(), a.getSeconds(), a.getMilliseconds());
}
function vi(a, e) {
  var i = Pi(a, e),
    r = Qa(i[0], i[1] - 1, i[2], i[3] % 24, i[4], i[5], 0).getTime(),
    o = a.getTime(),
    n = o % 1e3;
  return o -= n >= 0 ? n : 1e3 + n, r - o;
}
function ms(a, e, i) {
  var r = a.getTime(),
    o = r - e,
    n = vi(new Date(o), i);
  if (e === n) return e;
  o -= n - e;
  var t = vi(new Date(o), i);
  return n === t ? n : Math.max(n, t);
}
function cr(a, e) {
  return -23 <= a && a <= 23 && (e == null || 0 <= e && e <= 59);
}
var mr = {};
function hs(a) {
  if (mr[a]) return !0;
  try {
    return new Intl.DateTimeFormat(void 0, {
      timeZone: a
    }), mr[a] = !0, !0;
  } catch (e) {
    return !1;
  }
}
var ds = 60 * 1e3,
  gs = {
    X: function (a, e, i, r) {
      var o = Bi(r.timeZone, r._originalDate || a);
      if (o === 0) return 'Z';
      switch (e) {
        case 'X':
          return hr(o);
        case 'XXXX':
        case 'XX':
          return F(o);
        case 'XXXXX':
        case 'XXX':
        default:
          return F(o, ':');
      }
    },
    x: function (a, e, i, r) {
      var o = Bi(r.timeZone, r._originalDate || a);
      switch (e) {
        case 'x':
          return hr(o);
        case 'xxxx':
        case 'xx':
          return F(o);
        case 'xxxxx':
        case 'xxx':
        default:
          return F(o, ':');
      }
    },
    O: function (a, e, i, r) {
      var o = Bi(r.timeZone, r._originalDate || a);
      switch (e) {
        case 'O':
        case 'OO':
        case 'OOO':
          return 'GMT' + fs(o, ':');
        case 'OOOO':
        default:
          return 'GMT' + F(o, ':');
      }
    },
    z: function (a, e, i, r) {
      var o = r._originalDate || a;
      switch (e) {
        case 'z':
        case 'zz':
        case 'zzz':
          return Za('short', o, r);
        case 'zzzz':
        default:
          return Za('long', o, r);
      }
    }
  };
function Bi(a, e) {
  var i = a ? N(a, e, !0) / ds : e.getTimezoneOffset();
  if (Number.isNaN(i)) throw new RangeError('Invalid time zone specified: ' + a);
  return i;
}
function Xa(a, e) {
  for (var i = a < 0 ? '-' : '', r = Math.abs(a).toString(); r.length < e;) r = '0' + r;
  return i + r;
}
function F(a, e) {
  var i = e || '',
    r = a > 0 ? '-' : '+',
    o = Math.abs(a),
    n = Xa(Math.floor(o / 60), 2),
    t = Xa(Math.floor(o % 60), 2);
  return r + n + i + t;
}
function hr(a, e) {
  if (a % 60 === 0) {
    var i = a > 0 ? '-' : '+';
    return i + Xa(Math.abs(a) / 60, 2);
  }
  return F(a, e);
}
function fs(a, e) {
  var i = a > 0 ? '-' : '+',
    r = Math.abs(a),
    o = Math.floor(r / 60),
    n = r % 60;
  if (n === 0) return i + String(o);
  var t = e || '';
  return i + String(o) + t + Xa(n, 2);
}
var dr = gs;
var Tr = ka(_(), 1),
  Di = ka(bi(), 1);
var ps = /(Z|[+-]\d{2}(?::?\d{2})?| UTC| [a-zA-Z]+\/[a-zA-Z_]+(?:\/[a-zA-Z_]+)?)$/,
  gr = ps;
var wi = 36e5,
  fr = 6e4,
  ks = 2,
  T = {
    dateTimePattern: /^([0-9W+-]+)(T| )(.*)/,
    datePattern: /^([0-9W+-]+)(.*)/,
    plainTime: /:/,
    YY: /^(\d{2})$/,
    YYY: [/^([+-]\d{2})$/, /^([+-]\d{3})$/, /^([+-]\d{4})$/],
    YYYY: /^(\d{4})/,
    YYYYY: [/^([+-]\d{4})/, /^([+-]\d{5})/, /^([+-]\d{6})/],
    MM: /^-(\d{2})$/,
    DDD: /^-?(\d{3})$/,
    MMDD: /^-?(\d{2})-?(\d{2})$/,
    Www: /^-?W(\d{2})$/,
    WwwD: /^-?W(\d{2})-?(\d{1})$/,
    HH: /^(\d{2}([.,]\d*)?)$/,
    HHMM: /^(\d{2}):?(\d{2}([.,]\d*)?)$/,
    HHMMSS: /^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/,
    timeZone: gr
  };
function Aa(a, e) {
  if (arguments.length < 1) throw new TypeError('1 argument required, but only ' + arguments.length + ' present');
  if (a === null) return new Date(NaN);
  var i = e || {},
    r = i.additionalDigits == null ? ks : (0, Tr.default)(i.additionalDigits);
  if (r !== 2 && r !== 1 && r !== 0) throw new RangeError('additionalDigits must be 0, 1 or 2');
  if (a instanceof Date || typeof a == 'object' && Object.prototype.toString.call(a) === '[object Date]') return new Date(a.getTime());
  if (typeof a == 'number' || Object.prototype.toString.call(a) === '[object Number]') return new Date(a);
  if (!(typeof a == 'string' || Object.prototype.toString.call(a) === '[object String]')) return new Date(NaN);
  var o = Ss(a),
    n = Ts(o.date, r),
    t = n.year,
    s = n.restDateString,
    u = Ms(s, t);
  if (isNaN(u)) return new Date(NaN);
  if (u) {
    var A = u.getTime(),
      m = 0,
      c;
    if (o.time && (m = ys(o.time), isNaN(m))) return new Date(NaN);
    if (o.timeZone || i.timeZone) {
      if (c = N(o.timeZone || i.timeZone, new Date(A + m)), isNaN(c)) return new Date(NaN);
    } else c = (0, Di.default)(new Date(A + m)), c = (0, Di.default)(new Date(A + m + c));
    return new Date(A + m + c);
  } else return new Date(NaN);
}
function Ss(a) {
  var e = {},
    i = T.dateTimePattern.exec(a),
    r;
  if (i ? (e.date = i[1], r = i[3]) : (i = T.datePattern.exec(a), i ? (e.date = i[1], r = i[2]) : (e.date = null, r = a)), r) {
    var o = T.timeZone.exec(r);
    o ? (e.time = r.replace(o[1], ''), e.timeZone = o[1].trim()) : e.time = r;
  }
  return e;
}
function Ts(a, e) {
  var i = T.YYY[e],
    r = T.YYYYY[e],
    o;
  if (o = T.YYYY.exec(a) || r.exec(a), o) {
    var n = o[1];
    return {
      year: parseInt(n, 10),
      restDateString: a.slice(n.length)
    };
  }
  if (o = T.YY.exec(a) || i.exec(a), o) {
    var t = o[1];
    return {
      year: parseInt(t, 10) * 100,
      restDateString: a.slice(t.length)
    };
  }
  return {
    year: null
  };
}
function Ms(a, e) {
  if (e === null) return null;
  var i, r, o, n;
  if (a.length === 0) return r = new Date(0), r.setUTCFullYear(e), r;
  if (i = T.MM.exec(a), i) return r = new Date(0), o = parseInt(i[1], 10) - 1, kr(e, o) ? (r.setUTCFullYear(e, o), r) : new Date(NaN);
  if (i = T.DDD.exec(a), i) {
    r = new Date(0);
    var t = parseInt(i[1], 10);
    return Cs(e, t) ? (r.setUTCFullYear(e, 0, t), r) : new Date(NaN);
  }
  if (i = T.MMDD.exec(a), i) {
    r = new Date(0), o = parseInt(i[1], 10) - 1;
    var s = parseInt(i[2], 10);
    return kr(e, o, s) ? (r.setUTCFullYear(e, o, s), r) : new Date(NaN);
  }
  if (i = T.Www.exec(a), i) return n = parseInt(i[1], 10) - 1, Sr(e, n) ? pr(e, n) : new Date(NaN);
  if (i = T.WwwD.exec(a), i) {
    n = parseInt(i[1], 10) - 1;
    var u = parseInt(i[2], 10) - 1;
    return Sr(e, n, u) ? pr(e, n, u) : new Date(NaN);
  }
  return null;
}
function ys(a) {
  var e, i, r;
  if (e = T.HH.exec(a), e) return i = parseFloat(e[1].replace(',', '.')), Li(i) ? i % 24 * wi : NaN;
  if (e = T.HHMM.exec(a), e) return i = parseInt(e[1], 10), r = parseFloat(e[2].replace(',', '.')), Li(i, r) ? i % 24 * wi + r * fr : NaN;
  if (e = T.HHMMSS.exec(a), e) {
    i = parseInt(e[1], 10), r = parseInt(e[2], 10);
    var o = parseFloat(e[3].replace(',', '.'));
    return Li(i, r, o) ? i % 24 * wi + r * fr + o * 1e3 : NaN;
  }
  return null;
}
function pr(a, e, i) {
  e = e || 0, i = i || 0;
  var r = new Date(0);
  r.setUTCFullYear(a, 0, 4);
  var o = r.getUTCDay() || 7,
    n = e * 7 + i + 1 - o;
  return r.setUTCDate(r.getUTCDate() + n), r;
}
var Es = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
  bs = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function Mr(a) {
  return a % 400 === 0 || a % 4 === 0 && a % 100 !== 0;
}
function kr(a, e, i) {
  if (e < 0 || e > 11) return !1;
  if (i != null) {
    if (i < 1) return !1;
    var r = Mr(a);
    if (r && i > bs[e] || !r && i > Es[e]) return !1;
  }
  return !0;
}
function Cs(a, e) {
  if (e < 1) return !1;
  var i = Mr(a);
  return !(i && e > 366 || !i && e > 365);
}
function Sr(a, e, i) {
  return !(e < 0 || e > 52 || i != null && (i < 0 || i > 6));
}
function Li(a, e, i) {
  return !(a != null && (a < 0 || a >= 25) || e != null && (e < 0 || e >= 60) || i != null && (i < 0 || i >= 60));
}
var Ks = /([xXOz]+)|''|'(''|[^'])+('|$)/g;
function R(a, e, i) {
  var r = String(e),
    o = i || {},
    n = r.match(Ks);
  if (n) {
    var t = Aa(a, o);
    r = n.reduce(function (s, u) {
      if (u[0] === "'") return s;
      var A = s.indexOf(u),
        m = s[A - 1] === "'",
        c = s.replace(u, "'" + dr[u[0]](t, u, null, o) + "'");
      return m ? c.substring(0, A - 1) + c.substring(A + 1) : c;
    }, r);
  }
  return (0, yr.default)(a, r, o);
}
var Pr = ka(Kr(), 1);
function zi(a, e, i) {
  var r = Aa(a, i),
    o = N(e, r, !0),
    n = new Date(r.getTime() - o),
    t = new Date(0);
  return t.setFullYear(n.getUTCFullYear(), n.getUTCMonth(), n.getUTCDate()), t.setHours(n.getUTCHours(), n.getUTCMinutes(), n.getUTCSeconds(), n.getUTCMilliseconds()), t;
}
function ii(a, e, i, r) {
  var o = (0, Pr.default)(r);
  return o.timeZone = e, R(zi(a, e), i, o);
}
var _r = ['Africa/Abidjan', 'Africa/Accra', 'Africa/Addis_Ababa', 'Africa/Algiers', 'Africa/Asmara', 'Africa/Bamako', 'Africa/Bangui', 'Africa/Banjul', 'Africa/Bissau', 'Africa/Blantyre', 'Africa/Brazzaville', 'Africa/Bujumbura', 'Africa/Cairo', 'Africa/Casablanca', 'Africa/Ceuta', 'Africa/Conakry', 'Africa/Dakar', 'Africa/Dar_es_Salaam', 'Africa/Djibouti', 'Africa/Douala', 'Africa/El_Aaiun', 'Africa/Freetown', 'Africa/Gaborone', 'Africa/Harare', 'Africa/Johannesburg', 'Africa/Juba', 'Africa/Kampala', 'Africa/Khartoum', 'Africa/Kigali', 'Africa/Kinshasa', 'Africa/Lagos', 'Africa/Libreville', 'Africa/Lome', 'Africa/Luanda', 'Africa/Lubumbashi', 'Africa/Lusaka', 'Africa/Malabo', 'Africa/Maputo', 'Africa/Maseru', 'Africa/Mbabane', 'Africa/Mogadishu', 'Africa/Monrovia', 'Africa/Nairobi', 'Africa/Ndjamena', 'Africa/Niamey', 'Africa/Nouakchott', 'Africa/Ouagadougou', 'Africa/Porto-Novo', 'Africa/Sao_Tome', 'Africa/Tripoli', 'Africa/Tunis', 'Africa/Windhoek', 'America/Adak', 'America/Anchorage', 'America/Anguilla', 'America/Antigua', 'America/Araguaina', 'America/Argentina/Buenos_Aires', 'America/Argentina/Catamarca', 'America/Argentina/Cordoba', 'America/Argentina/Jujuy', 'America/Argentina/La_Rioja', 'America/Argentina/Mendoza', 'America/Argentina/Rio_Gallegos', 'America/Argentina/Salta', 'America/Argentina/San_Juan', 'America/Argentina/San_Luis', 'America/Argentina/Tucuman', 'America/Argentina/Ushuaia', 'America/Aruba', 'America/Asuncion', 'America/Atikokan', 'America/Bahia', 'America/Bahia_Banderas', 'America/Barbados', 'America/Belem', 'America/Belize', 'America/Blanc-Sablon', 'America/Boa_Vista', 'America/Bogota', 'America/Boise', 'America/Cambridge_Bay', 'America/Campo_Grande', 'America/Cancun', 'America/Caracas', 'America/Cayenne', 'America/Cayman', 'America/Chicago', 'America/Chihuahua', 'America/Costa_Rica', 'America/Creston', 'America/Cuiaba', 'America/Curacao', 'America/Danmarkshavn', 'America/Dawson', 'America/Dawson_Creek', 'America/Denver', 'America/Detroit', 'America/Dominica', 'America/Edmonton', 'America/Eirunepe', 'America/El_Salvador', 'America/Fort_Nelson', 'America/Fortaleza', 'America/Glace_Bay', 'America/Goose_Bay', 'America/Grand_Turk', 'America/Grenada', 'America/Guadeloupe', 'America/Guatemala', 'America/Guayaquil', 'America/Guyana', 'America/Halifax', 'America/Havana', 'America/Hermosillo', 'America/Indiana/Indianapolis', 'America/Indiana/Knox', 'America/Indiana/Marengo', 'America/Indiana/Petersburg', 'America/Indiana/Tell_City', 'America/Indiana/Vevay', 'America/Indiana/Vincennes', 'America/Indiana/Winamac', 'America/Inuvik', 'America/Iqaluit', 'America/Jamaica', 'America/Juneau', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/Kralendijk', 'America/La_Paz', 'America/Lima', 'America/Los_Angeles', 'America/Lower_Princes', 'America/Maceio', 'America/Managua', 'America/Manaus', 'America/Marigot', 'America/Martinique', 'America/Matamoros', 'America/Mazatlan', 'America/Menominee', 'America/Merida', 'America/Metlakatla', 'America/Mexico_City', 'America/Miquelon', 'America/Moncton', 'America/Monterrey', 'America/Montevideo', 'America/Montserrat', 'America/Nassau', 'America/New_York', 'America/Nipigon', 'America/Nome', 'America/Noronha', 'America/North_Dakota/Beulah', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/Nuuk', 'America/Ojinaga', 'America/Panama', 'America/Pangnirtung', 'America/Paramaribo', 'America/Phoenix', 'America/Port-au-Prince', 'America/Port_of_Spain', 'America/Porto_Velho', 'America/Puerto_Rico', 'America/Punta_Arenas', 'America/Rainy_River', 'America/Rankin_Inlet', 'America/Recife', 'America/Regina', 'America/Resolute', 'America/Rio_Branco', 'America/Santarem', 'America/Santiago', 'America/Santo_Domingo', 'America/Sao_Paulo', 'America/Scoresbysund', 'America/Sitka', 'America/St_Barthelemy', 'America/St_Johns', 'America/St_Kitts', 'America/St_Lucia', 'America/St_Thomas', 'America/St_Vincent', 'America/Swift_Current', 'America/Tegucigalpa', 'America/Thule', 'America/Thunder_Bay', 'America/Tijuana', 'America/Toronto', 'America/Tortola', 'America/Vancouver', 'America/Whitehorse', 'America/Winnipeg', 'America/Yakutat', 'America/Yellowknife', 'Antarctica/Casey', 'Antarctica/Davis', 'Antarctica/DumontDUrville', 'Antarctica/Macquarie', 'Antarctica/Mawson', 'Antarctica/McMurdo', 'Antarctica/Palmer', 'Antarctica/Rothera', 'Antarctica/Syowa', 'Antarctica/Troll', 'Antarctica/Vostok', 'Arctic/Longyearbyen', 'Asia/Aden', 'Asia/Almaty', 'Asia/Amman', 'Asia/Anadyr', 'Asia/Aqtau', 'Asia/Aqtobe', 'Asia/Ashgabat', 'Asia/Atyrau', 'Asia/Baghdad', 'Asia/Bahrain', 'Asia/Baku', 'Asia/Bangkok', 'Asia/Barnaul', 'Asia/Beirut', 'Asia/Bishkek', 'Asia/Brunei', 'Asia/Chita', 'Asia/Choibalsan', 'Asia/Colombo', 'Asia/Damascus', 'Asia/Dhaka', 'Asia/Dili', 'Asia/Dubai', 'Asia/Dushanbe', 'Asia/Famagusta', 'Asia/Gaza', 'Asia/Hebron', 'Asia/Ho_Chi_Minh', 'Asia/Hong_Kong', 'Asia/Hovd', 'Asia/Irkutsk', 'Asia/Jakarta', 'Asia/Jayapura', 'Asia/Jerusalem', 'Asia/Kabul', 'Asia/Kamchatka', 'Asia/Karachi', 'Asia/Kathmandu', 'Asia/Khandyga', 'Asia/Kolkata', 'Asia/Krasnoyarsk', 'Asia/Kuala_Lumpur', 'Asia/Kuching', 'Asia/Kuwait', 'Asia/Macau', 'Asia/Magadan', 'Asia/Makassar', 'Asia/Manila', 'Asia/Muscat', 'Asia/Nicosia', 'Asia/Novokuznetsk', 'Asia/Novosibirsk', 'Asia/Omsk', 'Asia/Oral', 'Asia/Phnom_Penh', 'Asia/Pontianak', 'Asia/Pyongyang', 'Asia/Qatar', 'Asia/Qostanay', 'Asia/Qyzylorda', 'Asia/Riyadh', 'Asia/Sakhalin', 'Asia/Samarkand', 'Asia/Seoul', 'Asia/Shanghai', 'Asia/Singapore', 'Asia/Srednekolymsk', 'Asia/Taipei', 'Asia/Tashkent', 'Asia/Tbilisi', 'Asia/Tehran', 'Asia/Thimphu', 'Asia/Tokyo', 'Asia/Tomsk', 'Asia/Ulaanbaatar', 'Asia/Urumqi', 'Asia/Ust-Nera', 'Asia/Vientiane', 'Asia/Vladivostok', 'Asia/Yakutsk', 'Asia/Yangon', 'Asia/Yekaterinburg', 'Asia/Yerevan', 'Atlantic/Azores', 'Atlantic/Bermuda', 'Atlantic/Canary', 'Atlantic/Cape_Verde', 'Atlantic/Faroe', 'Atlantic/Madeira', 'Atlantic/Reykjavik', 'Atlantic/South_Georgia', 'Atlantic/St_Helena', 'Atlantic/Stanley', 'Australia/Adelaide', 'Australia/Brisbane', 'Australia/Broken_Hill', 'Australia/Darwin', 'Australia/Eucla', 'Australia/Hobart', 'Australia/Lindeman', 'Australia/Lord_Howe', 'Australia/Melbourne', 'Australia/Perth', 'Australia/Sydney', 'Europe/Amsterdam', 'Europe/Andorra', 'Europe/Astrakhan', 'Europe/Athens', 'Europe/Belgrade', 'Europe/Berlin', 'Europe/Bratislava', 'Europe/Brussels', 'Europe/Bucharest', 'Europe/Budapest', 'Europe/Busingen', 'Europe/Chisinau', 'Europe/Copenhagen', 'Europe/Dublin', 'Europe/Gibraltar', 'Europe/Guernsey', 'Europe/Helsinki', 'Europe/Isle_of_Man', 'Europe/Istanbul', 'Europe/Jersey', 'Europe/Kaliningrad', 'Europe/Kirov', 'Europe/Kiev', 'Europe/Lisbon', 'Europe/Ljubljana', 'Europe/London', 'Europe/Luxembourg', 'Europe/Madrid', 'Europe/Malta', 'Europe/Mariehamn', 'Europe/Minsk', 'Europe/Monaco', 'Europe/Moscow', 'Europe/Oslo', 'Europe/Paris', 'Europe/Podgorica', 'Europe/Prague', 'Europe/Riga', 'Europe/Rome', 'Europe/Samara', 'Europe/San_Marino', 'Europe/Sarajevo', 'Europe/Saratov', 'Europe/Simferopol', 'Europe/Skopje', 'Europe/Sofia', 'Europe/Stockholm', 'Europe/Tallinn', 'Europe/Tirane', 'Europe/Ulyanovsk', 'Europe/Uzhgorod', 'Europe/Vaduz', 'Europe/Vatican', 'Europe/Vienna', 'Europe/Vilnius', 'Europe/Volgograd', 'Europe/Warsaw', 'Europe/Zagreb', 'Europe/Zaporozhye', 'Europe/Zurich', 'Indian/Antananarivo', 'Indian/Chagos', 'Indian/Christmas', 'Indian/Cocos', 'Indian/Comoro', 'Indian/Kerguelen', 'Indian/Mahe', 'Indian/Maldives', 'Indian/Mauritius', 'Indian/Mayotte', 'Indian/Reunion', 'Pacific/Apia', 'Pacific/Auckland', 'Pacific/Bougainville', 'Pacific/Chatham', 'Pacific/Chuuk', 'Pacific/Easter', 'Pacific/Efate', 'Pacific/Fakaofo', 'Pacific/Fiji', 'Pacific/Funafuti', 'Pacific/Galapagos', 'Pacific/Gambier', 'Pacific/Guadalcanal', 'Pacific/Guam', 'Pacific/Honolulu', 'Pacific/Kanton', 'Pacific/Kiritimati', 'Pacific/Kosrae', 'Pacific/Kwajalein', 'Pacific/Majuro', 'Pacific/Marquesas', 'Pacific/Midway', 'Pacific/Nauru', 'Pacific/Niue', 'Pacific/Norfolk', 'Pacific/Noumea', 'Pacific/Pago_Pago', 'Pacific/Palau', 'Pacific/Pitcairn', 'Pacific/Pohnpei', 'Pacific/Port_Moresby', 'Pacific/Rarotonga', 'Pacific/Saipan', 'Pacific/Tahiti', 'Pacific/Tarawa', 'Pacific/Tongatapu', 'Pacific/Wake', 'Pacific/Wallis', 'Australia/Currie', 'America/Montreal', 'America/Louisville', 'America/Knox_IN', 'America/Indianapolis'],
  Ii = new Map([['Ras Al Khaimah City', ['Asia/Dubai']], ['Dubai', ['Asia/Dubai']], ['Sharjah', ['Asia/Dubai']], ['Ajman City', ['Asia/Dubai']], ['Abu Dhabi', ['Asia/Dubai']], ['Musaffah', ['Asia/Dubai']], ['Maz\u0101r-e Shar\u012Bf', ['Asia/Kabul']], ['Kunduz', ['Asia/Kabul']], ['Kandah\u0101r', ['Asia/Kabul']], ['Kabul', ['Asia/Kabul']], ['Jal\u0101l\u0101b\u0101d', ['Asia/Kabul']], ['Her\u0101t', ['Asia/Kabul']], ['Ghazni', ['Asia/Kabul']], ['Gardez', ['Asia/Kabul']], ['Balkh', ['Asia/Kabul']], ['Baghl\u0101n', ['Asia/Kabul']], ['Elbasan', ['Europe/Tirane']], ['Tirana', ['Europe/Tirane']], ['Durr\xEBs', ['Europe/Tirane']], ['Yerevan', ['Asia/Yerevan']], ['Vanadzor', ['Asia/Yerevan']], ['Gyumri', ['Asia/Yerevan']], ['N\u2019dalatando', ['Africa/Luanda']], ['Luanda', ['Africa/Luanda']], ['Lubango', ['Africa/Luanda']], ['Lobito', ['Africa/Luanda']], ['Cuito', ['Africa/Luanda']], ['Huambo', ['Africa/Luanda']], ['Benguela', ['Africa/Luanda']], ['Villa Lugano', ['America/Argentina/Buenos_Aires']], ['Tandil', ['America/Argentina/Buenos_Aires']], ['Resistencia', ['America/Argentina/Cordoba']], ['Quilmes', ['America/Argentina/Buenos_Aires']], ['Posadas', ['America/Argentina/Cordoba']], ['Pilar', ['America/Argentina/Buenos_Aires']], ['Mor\xF3n', ['America/Argentina/Buenos_Aires']], ['Merlo', ['America/Argentina/Buenos_Aires']], ['Mar del Plata', ['America/Argentina/Buenos_Aires']], ['La Plata', ['America/Argentina/Buenos_Aires']], ['Formosa', ['America/Argentina/Cordoba']], ['Corrientes', ['America/Argentina/Cordoba']], ['Concordia', ['America/Argentina/Cordoba']], ['Buenos Aires', ['America/Argentina/Buenos_Aires']], ['Berazategui', ['America/Argentina/Buenos_Aires']], ['Belgrano', ['America/Argentina/Buenos_Aires']], ['Santiago del Estero', ['America/Argentina/Cordoba']], ['Santa Rosa', ['Asia/Manila', 'America/Los_Angeles', 'America/Argentina/Salta']], ['Santa Fe', ['America/Argentina/Cordoba', 'America/Denver']], ['San Salvador de Jujuy', ['America/Argentina/Jujuy']], ['San Rafael', ['America/Argentina/Mendoza']], ['San Nicol\xE1s de los Arroyos', ['America/Argentina/Buenos_Aires']], ['San Miguel de Tucum\xE1n', ['America/Argentina/Tucuman']], ['San Luis', ['America/Argentina/San_Luis']], ['San Juan', ['America/Argentina/San_Juan', 'America/Puerto_Rico', 'Asia/Manila']], ['Catamarca', ['America/Argentina/Catamarca']], ['Salta', ['America/Argentina/Salta']], ['Rosario', ['America/Argentina/Cordoba']], ['R\xEDo Cuarto', ['America/Argentina/Cordoba']], ['Paran\xE1', ['America/Argentina/Cordoba']], ['Neuqu\xE9n', ['America/Argentina/Salta']], ['Mendoza', ['America/Argentina/Mendoza']], ['La Rioja', ['America/Argentina/La_Rioja']], ['C\xF3rdoba', ['America/Argentina/Cordoba', 'Europe/Madrid', 'America/Mexico_City']], ['Comodoro Rivadavia', ['America/Argentina/Catamarca']], ['Bah\xEDa Blanca', ['America/Argentina/Buenos_Aires']], ['Balvanera', ['America/Argentina/Buenos_Aires']], ['San Miguel', ['America/El_Salvador', 'America/Argentina/Buenos_Aires']], ['Jos\xE9 C. Paz', ['America/Argentina/Buenos_Aires']], ['Vienna', ['Europe/Vienna']], ['Simmering', ['Europe/Vienna']], ['Salzburg', ['Europe/Vienna']], ['Ottakring', ['Europe/Vienna']], ['Linz', ['Europe/Vienna']], ['Innsbruck', ['Europe/Vienna']], ['Graz', ['Europe/Vienna']], ['Floridsdorf', ['Europe/Vienna']], ['Favoriten', ['Europe/Vienna']], ['Donaustadt', ['Europe/Vienna']], ['Rockingham', ['Australia/Perth']], ['Perth', ['Australia/Perth']], ['Darwin', ['Australia/Darwin']], ['Adelaide', ['Australia/Adelaide']], ['Broken Hill', ['Australia/Broken_Hill']], ['Townsville', ['Australia/Brisbane']], ['Toowoomba', ['Australia/Brisbane']], ['Sydney', ['Australia/Sydney', 'America/Glace_Bay']], ['Newcastle', ['Africa/Johannesburg', 'Australia/Sydney']], ['Melbourne', ['Australia/Melbourne']], ['Launceston', ['Australia/Hobart']], ['Hobart', ['Australia/Hobart']], ['Gold Coast', ['Australia/Brisbane']], ['Geelong', ['Australia/Melbourne']], ['Wollongong', ['Australia/Sydney']], ['Canberra', ['Australia/Sydney']], ['Cairns', ['Australia/Brisbane']], ['Brisbane', ['Australia/Brisbane']], ['Bendigo', ['Australia/Melbourne']], ['Ballarat', ['Australia/Melbourne']], ['Logan City', ['Australia/Brisbane']], ['Lankaran', ['Asia/Baku']], ['Yevlakh', ['Asia/Baku']], ['Sumqay\u0131t', ['Asia/Baku']], ['Ganja', ['Asia/Baku']], ['Baku', ['Asia/Baku']], ['Zenica', ['Europe/Sarajevo']], ['Tuzla', ['Europe/Sarajevo']], ['Sarajevo', ['Europe/Sarajevo']], ['Mostar', ['Europe/Sarajevo']], ['Banja Luka', ['Europe/Sarajevo']], ['Tungi', ['Asia/Dhaka']], ['Sylhet', ['Asia/Dhaka']], ['Jam\u0101lpur', ['Asia/Dhaka', 'Asia/Kolkata']], ['Jamalpur', ['Asia/Dhaka', 'Asia/Kolkata']], ['Shibganj', ['Asia/Dhaka']], ['S\u0101tkhira', ['Asia/Dhaka']], ['Sirajganj', ['Asia/Dhaka']], ['Narsingdi', ['Asia/Dhaka']], ['Sh\u0101hz\u0101dpur', ['Asia/Dhaka']], ['R\u0101jsh\u0101hi', ['Asia/Dhaka']], ['N\u0101r\u0101yanganj', ['Asia/Dhaka']], ['N\u0101garpur', ['Asia/Dhaka']], ['Mymensingh', ['Asia/Dhaka']], ['Comilla', ['Asia/Dhaka']], ['Rangpur', ['Asia/Dhaka']], ['Kushtia', ['Asia/Dhaka']], ['Dhaka', ['Asia/Dhaka']], ['Bhairab B\u0101z\u0101r', ['Asia/Dhaka']], ['Bagerhat', ['Asia/Dhaka']], ['Son\u0101rgaon', ['Asia/Dhaka']], ['P\u0101r Naogaon', ['Asia/Dhaka']], ['Far\u012Bdpur', ['Asia/Dhaka']], ['Din\u0101jpur', ['Asia/Dhaka']], ['Chattogram', ['Asia/Dhaka']], ['Cox\u2019s B\u0101z\u0101r', ['Asia/Dhaka']], ['Khulna', ['Asia/Dhaka']], ['Barishal', ['Asia/Dhaka']], ['Jessore', ['Asia/Dhaka']], ['P\u0101bna', ['Asia/Dhaka']], ['T\u0101ng\u0101il', ['Asia/Dhaka']], ['Bogra', ['Asia/Dhaka']], ['Naw\u0101bganj', ['Asia/Dhaka']], ['Sherpur', ['Asia/Dhaka']], ['Saidpur', ['Asia/Dhaka']], ['Puthia', ['Asia/Dhaka']], ['Natore', ['Asia/Dhaka']], ['Paltan', ['Asia/Dhaka']], ['Schaerbeek', ['Europe/Brussels']], ['Namur', ['Europe/Brussels']], ['Li\xE8ge', ['Europe/Brussels']], ['Gent', ['Europe/Brussels']], ['Charleroi', ['Europe/Brussels']], ['Brussels', ['Europe/Brussels']], ['Brugge', ['Europe/Brussels']], ['Antwerpen', ['Europe/Brussels']], ['Anderlecht', ['Europe/Brussels']], ['Ouagadougou', ['Africa/Ouagadougou']], ['Bobo-Dioulasso', ['Africa/Ouagadougou']], ['Varna', ['Europe/Sofia']], ['Stara Zagora', ['Europe/Sofia']], ['Sofia', ['Europe/Sofia']], ['Ruse', ['Europe/Sofia']], ['Plovdiv', ['Europe/Sofia']], ['Pleven', ['Europe/Sofia']], ['Burgas', ['Europe/Sofia']], ['Manama', ['Asia/Bahrain']], ['Bujumbura', ['Africa/Bujumbura']], ['Porto-Novo', ['Africa/Porto-Novo']], ['Parakou', ['Africa/Porto-Novo']], ['Kandi', ['Africa/Porto-Novo']], ['Djougou', ['Africa/Porto-Novo']], ['Cotonou', ['Africa/Porto-Novo']], ['Bohicon', ['Africa/Porto-Novo']], ['Abomey-Calavi', ['Africa/Porto-Novo']], ['Tarija', ['America/La_Paz']], ['Sucre', ['America/La_Paz']], ['Santa Cruz de la Sierra', ['America/La_Paz']], ['Sacaba', ['America/La_Paz']], ['Quillacollo', ['America/La_Paz']], ['Potos\xED', ['America/La_Paz']], ['Oruro', ['America/La_Paz']], ['La Paz', ['America/La_Paz', 'America/Mazatlan']], ['Cochabamba', ['America/La_Paz']], ['Vit\xF3ria de Santo Ant\xE3o', ['America/Recife']], ['Timon', ['America/Fortaleza']], ['Teresina', ['America/Fortaleza']], ['Sobral', ['America/Fortaleza']], ['S\xE3o Lu\xEDs', ['America/Fortaleza']], ['Santa Rita', ['America/Fortaleza']], ['Santar\xE9m', ['America/Santarem']], ['Recife', ['America/Recife']], ['Petrolina', ['America/Recife']], ['Paulista', ['America/Recife']], ['Parnamirim', ['America/Fortaleza']], ['Parna\xEDba', ['America/Fortaleza']], ['Olinda', ['America/Recife']], ['Natal', ['America/Fortaleza']], ['Mossor\xF3', ['America/Fortaleza']], ['Maracana\xFA', ['America/Fortaleza']], ['Marab\xE1', ['America/Belem']], ['Macei\xF3', ['America/Maceio']], ['Macap\xE1', ['America/Belem']], ['Juazeiro do Norte', ['America/Fortaleza']], ['Jo\xE3o Pessoa', ['America/Fortaleza']], ['Jaboat\xE3o', ['America/Recife']], ['Imperatriz', ['America/Fortaleza']], ['Garanhuns', ['America/Recife']], ['Fortaleza', ['America/Fortaleza']], ['Caxias', ['America/Fortaleza']], ['Caucaia', ['America/Fortaleza']], ['Castanhal', ['America/Belem']], ['Caruaru', ['America/Recife']], ['Campina Grande', ['America/Fortaleza']], ['Cabo', ['America/Recife']], ['Bel\xE9m', ['America/Belem']], ['Arapiraca', ['America/Maceio']], ['Aragua\xEDna', ['America/Araguaina']], ['Ananindeua', ['America/Belem']], ['Volta Redonda', ['America/Sao_Paulo']], ['Vit\xF3ria da Conquista', ['America/Bahia']], ['Vit\xF3ria', ['America/Sao_Paulo']], ['Vila Velha', ['America/Sao_Paulo']], ['Viam\xE3o', ['America/Sao_Paulo']], ['V\xE1rzea Paulista', ['America/Sao_Paulo']], ['V\xE1rzea Grande', ['America/Cuiaba']], ['Varginha', ['America/Sao_Paulo']], ['Uruguaiana', ['America/Sao_Paulo']], ['Umuarama', ['America/Sao_Paulo']], ['Uberl\xE2ndia', ['America/Sao_Paulo']], ['Uberaba', ['America/Sao_Paulo']], ['Toledo', ['America/New_York', 'Asia/Manila', 'America/Sao_Paulo']], ['Teres\xF3polis', ['America/Sao_Paulo']], ['Te\xF3filo Otoni', ['America/Sao_Paulo']], ['Taubat\xE9', ['America/Sao_Paulo']], ['Tabo\xE3o da Serra', ['America/Sao_Paulo']], ['Suzano', ['America/Sao_Paulo']], ['Sumar\xE9', ['America/Sao_Paulo']], ['Sorocaba', ['America/Sao_Paulo']], ['Sete Lagoas', ['America/Sao_Paulo']], ['Serra', ['America/Sao_Paulo']], ['Sapucaia', ['America/Sao_Paulo']], ['S\xE3o Vicente', ['America/Sao_Paulo']], ['S\xE3o Paulo', ['America/Sao_Paulo']], ['S\xE3o Leopoldo', ['America/Sao_Paulo']], ['S\xE3o Jos\xE9 dos Pinhais', ['America/Sao_Paulo']], ['S\xE3o Jos\xE9 dos Campos', ['America/Sao_Paulo']], ['S\xE3o Jos\xE9 do Rio Preto', ['America/Sao_Paulo']], ['S\xE3o Jos\xE9', ['America/Sao_Paulo']], ['S\xE3o Jo\xE3o de Meriti', ['America/Sao_Paulo']], ['S\xE3o Carlos', ['America/Sao_Paulo']], ['S\xE3o Caetano do Sul', ['America/Sao_Paulo']], ['S\xE3o Bernardo do Campo', ['America/Sao_Paulo']], ['Santos', ['America/Sao_Paulo']], ['Santo Andr\xE9', ['America/Sao_Paulo']], ['Santa Maria', ['America/Sao_Paulo', 'America/Los_Angeles']], ['Santa Luzia', ['America/Sao_Paulo']], ['Santa Cruz do Sul', ['America/Sao_Paulo']], ["Santa B\xE1rbara d'Oeste", ['America/Sao_Paulo']], ['Salvador', ['America/Bahia']], ['Rondon\xF3polis', ['America/Cuiaba']], ['Rio Verde', ['America/Sao_Paulo']], ['Rio Grande', ['America/Sao_Paulo']], ['Rio de Janeiro', ['America/Sao_Paulo']], ['Rio das Ostras', ['America/Sao_Paulo']], ['Rio Claro', ['America/Sao_Paulo']], ['Ribeir\xE3o Preto', ['America/Sao_Paulo']], ['Ribeir\xE3o Pires', ['America/Sao_Paulo']], ['Ribeir\xE3o das Neves', ['America/Sao_Paulo']], ['Resende', ['America/Sao_Paulo']], ['Queimados', ['America/Sao_Paulo']], ['Presidente Prudente', ['America/Sao_Paulo']], ['Praia Grande', ['America/Sao_Paulo']], ['Pouso Alegre', ['America/Sao_Paulo']], ['Porto Seguro', ['America/Bahia']], ['Porto Alegre', ['America/Sao_Paulo']], ['Ponta Grossa', ['America/Sao_Paulo']], ['Po\xE7os de Caldas', ['America/Sao_Paulo']], ['Po\xE1', ['America/Sao_Paulo']], ['Piracicaba', ['America/Sao_Paulo']], ['Pindamonhangaba', ['America/Sao_Paulo']], ['Petr\xF3polis', ['America/Sao_Paulo']], ['Pelotas', ['America/Sao_Paulo']], ['Patos de Minas', ['America/Sao_Paulo']], ['Passo Fundo', ['America/Sao_Paulo']], ['Paranagu\xE1', ['America/Sao_Paulo']], ['Palho\xE7a', ['America/Sao_Paulo']], ['Osasco', ['America/Sao_Paulo']], ['Novo Hamburgo', ['America/Sao_Paulo']], ['Nova Igua\xE7u', ['America/Sao_Paulo']], ['Nova Friburgo', ['America/Sao_Paulo']], ['Nossa Senhora do Socorro', ['America/Maceio']], ['Niter\xF3i', ['America/Sao_Paulo']], ['Nil\xF3polis', ['America/Sao_Paulo']], ['Montes Claros', ['America/Sao_Paulo']], ['Mogi Gua\xE7u', ['America/Sao_Paulo']], ['Mogi das Cruzes', ['America/Sao_Paulo']], ['Mau\xE1', ['America/Sao_Paulo']], ['Maring\xE1', ['America/Sao_Paulo']], ['Mar\xEDlia', ['America/Sao_Paulo']], ['Maca\xE9', ['America/Sao_Paulo']], ['Luzi\xE2nia', ['America/Sao_Paulo']], ['Londrina', ['America/Sao_Paulo']], ['Linhares', ['America/Sao_Paulo']], ['Limeira', ['America/Sao_Paulo']], ['Lages', ['America/Sao_Paulo']], ['Jundia\xED', ['America/Sao_Paulo']], ['Juiz de Fora', ['America/Sao_Paulo']], ['Joinville', ['America/Sao_Paulo']], ['Jequi\xE9', ['America/Bahia']], ['Ja\xFA', ['America/Sao_Paulo']], ['Jaragu\xE1 do Sul', ['America/Sao_Paulo']], ['Jandira', ['America/Sao_Paulo']], ['Jacare\xED', ['America/Sao_Paulo']], ['Itu', ['America/Sao_Paulo']], ['Itaquaquecetuba', ['America/Sao_Paulo']], ['Itapevi', ['America/Sao_Paulo']], ['Itapetininga', ['America/Sao_Paulo']], ['Itapecerica da Serra', ['America/Sao_Paulo']], ['Itaja\xED', ['America/Sao_Paulo']], ['Itagua\xED', ['America/Sao_Paulo']], ['Itabuna', ['America/Bahia']], ['Itabora\xED', ['America/Sao_Paulo']], ['Ipatinga', ['America/Sao_Paulo']], ['Indaiatuba', ['America/Sao_Paulo']], ['Ilh\xE9us', ['America/Bahia']], ['Ibirit\xE9', ['America/Sao_Paulo']], ['Hortol\xE2ndia', ['America/Sao_Paulo']], ['Guarulhos', ['America/Sao_Paulo']], ['Guaruj\xE1', ['America/Sao_Paulo']], ['Guaratinguet\xE1', ['America/Sao_Paulo']], ['Guarapuava', ['America/Sao_Paulo']], ['Guarapari', ['America/Sao_Paulo']], ['Gravata\xED', ['America/Sao_Paulo']], ['Governador Valadares', ['America/Sao_Paulo']], ['Goi\xE2nia', ['America/Sao_Paulo']], ['Franco da Rocha', ['America/Sao_Paulo']], ['Francisco Morato', ['America/Sao_Paulo']], ['Franca', ['America/Sao_Paulo']], ['Foz do Igua\xE7u', ['America/Sao_Paulo']], ['Florian\xF3polis', ['America/Sao_Paulo']], ['Ferraz de Vasconcelos', ['America/Sao_Paulo']], ['Feira de Santana', ['America/Bahia']], ['Eun\xE1polis', ['America/Bahia']], ['Esmeraldas', ['America/Guayaquil', 'America/Sao_Paulo']], ['Embu', ['America/Sao_Paulo']], ['Duque de Caxias', ['America/Sao_Paulo']], ['Dourados', ['America/Campo_Grande']], ['Divin\xF3polis', ['America/Sao_Paulo']], ['Diadema', ['America/Sao_Paulo']], ['Curitiba', ['America/Sao_Paulo']], ['Cuiab\xE1', ['America/Cuiaba']], ['Cubat\xE3o', ['America/Sao_Paulo']], ['Crici\xFAma', ['America/Sao_Paulo']], ['Cotia', ['America/Sao_Paulo']], ['Coronel Fabriciano', ['America/Sao_Paulo']], ['Contagem', ['America/Sao_Paulo']], ['Conselheiro Lafaiete', ['America/Sao_Paulo']], ['Colombo', ['Asia/Colombo', 'America/Sao_Paulo']], ['Colatina', ['America/Sao_Paulo']], ['Chapec\xF3', ['America/Sao_Paulo']], ['Caxias do Sul', ['America/Sao_Paulo']], ['Catanduva', ['America/Sao_Paulo']], ['Cascavel', ['America/Sao_Paulo']], ['Carapicu\xEDba', ['America/Sao_Paulo']], ['Canoas', ['America/Sao_Paulo']], ['Campos dos Goytacazes', ['America/Sao_Paulo']], ['Campo Grande', ['America/Campo_Grande']], ['Campinas', ['America/Sao_Paulo']], ['Cama\xE7ari', ['America/Bahia']], ['Cachoeiro de Itapemirim', ['America/Sao_Paulo']], ['Cachoeirinha', ['America/Sao_Paulo']], ['Cabo Frio', ['America/Sao_Paulo']], ['Brasilia', ['America/Sao_Paulo']], ['Bras\xEDlia', ['America/Sao_Paulo']], ['Bragan\xE7a Paulista', ['America/Sao_Paulo']], ['Botucatu', ['America/Sao_Paulo']], ['Blumenau', ['America/Sao_Paulo']], ['Birigui', ['America/Sao_Paulo']], ['Betim', ['America/Sao_Paulo']], ['Belo Horizonte', ['America/Sao_Paulo']], ['Belford Roxo', ['America/Sao_Paulo']], ['Bauru', ['America/Sao_Paulo']], ['Barueri', ['America/Sao_Paulo']], ['Barretos', ['America/Sao_Paulo']], ['Barreiras', ['America/Bahia']], ['Barra Mansa', ['America/Sao_Paulo']], ['Barbacena', ['America/Sao_Paulo']], ['Atibaia', ['America/Sao_Paulo']], ['Assis', ['America/Sao_Paulo']], ['Arauc\xE1ria', ['America/Sao_Paulo']], ['Araruama', ['America/Sao_Paulo']], ['Araras', ['America/Sao_Paulo']], ['Araraquara', ['America/Sao_Paulo']], ['Ara\xE7atuba', ['America/Sao_Paulo']], ['Aracaju', ['America/Maceio']], ['Apucarana', ['America/Sao_Paulo']], ['Angra dos Reis', ['America/Sao_Paulo']], ['An\xE1polis', ['America/Sao_Paulo']], ['Americana', ['America/Sao_Paulo']], ['Alagoinhas', ['America/Bahia']], ['Gua\xEDba', ['America/Sao_Paulo']], ['Palmas', ['America/Araguaina']], ['Rio Branco', ['America/Rio_Branco']], ['Porto Velho', ['America/Porto_Velho']], ['Manaus', ['America/Manaus']], ['Boa Vista', ['America/Boa_Vista']], ['Ji Paran\xE1', ['America/Porto_Velho']], ['Aparecida de Goi\xE2nia', ['America/Sao_Paulo']], ['Jaboat\xE3o dos Guararapes', ['America/Recife']], ['Lauro de Freitas', ['America/Bahia']], ['Parauapebas', ['America/Belem']], ['Pinhais', ['America/Sao_Paulo']], ['Sim\xF5es Filho', ['America/Bahia']], ['Sinop', ['America/Cuiaba']], ['Planaltina', ['America/Sao_Paulo']], ['Alvorada', ['America/Sao_Paulo']], ['Nassau', ['America/Nassau']], ['Gaborone', ['Africa/Gaborone']], ['Vitebsk', ['Europe/Minsk']], ['Salihorsk', ['Europe/Minsk']], ['Pinsk', ['Europe/Minsk']], ['Orsha', ['Europe/Minsk']], ['Navapolatsk', ['Europe/Minsk']], ['Minsk', ['Europe/Minsk']], ['Mazyr', ['Europe/Minsk']], ['Maladzie\u010Dna', ['Europe/Minsk']], ['Mahilyow', ['Europe/Minsk']], ['Lida', ['Europe/Minsk']], ['Hrodna', ['Europe/Minsk']], ["Homyel'", ['Europe/Minsk']], ['Brest', ['Europe/Minsk', 'Europe/Paris']], ['Barysaw', ['Europe/Minsk']], ['Baranovichi', ['Europe/Minsk']], ['Babruysk', ['Europe/Minsk']], ['Abbotsford', ['America/Vancouver']], ['Ajax', ['America/Toronto']], ['Barrie', ['America/Toronto']], ['Brampton', ['America/Toronto']], ['Burlington', ['America/Toronto']], ['Burnaby', ['America/Vancouver']], ['Calgary', ['America/Edmonton']], ['Cambridge', ['Europe/London', 'America/Toronto', 'America/New_York']], ['Coquitlam', ['America/Vancouver']], ['Dartmouth', ['America/Halifax']], ['Delta', ['America/Vancouver']], ['Edmonton', ['America/Edmonton']], ['Gatineau', ['America/Toronto']], ['Greater Sudbury', ['America/Toronto']], ['Guelph', ['America/Toronto']], ['Hamilton', ['America/Toronto', 'Pacific/Auckland', 'Atlantic/Bermuda']], ['Kelowna', ['America/Vancouver']], ['Kingston', ['America/Jamaica', 'America/Toronto', 'Pacific/Norfolk']], ['Kitchener', ['America/Toronto']], ['Laval', ['America/Toronto']], ['London', ['Europe/London', 'America/Toronto']], ['Longueuil', ['America/Toronto']], ['Markham', ['America/Toronto']], ['Milton', ['America/Toronto']], ['Mississauga', ['America/Toronto']], ['Moncton', ['America/Moncton']], ['Montr\xE9al', ['America/Montreal']], ['Montreal', ['America/Montreal']], ['Nepean', ['America/Toronto']], ['Oakville', ['America/Toronto']], ['Oshawa', ['America/Toronto']], ['Ottawa', ['America/Toronto']], ['Regina', ['America/Regina']], ['Richmond', ['America/New_York', 'America/Vancouver', 'America/Los_Angeles']], ['Richmond Hill', ['America/Toronto']], ['Saguenay', ['America/Toronto']], ['Saskatoon', ['America/Regina']], ['Sherbrooke', ['America/Toronto']], ['St. Catharines', ['America/Toronto']], ['Surrey', ['America/Vancouver']], ['Terrebonne', ['America/Toronto']], ['Thunder Bay', ['America/Thunder_Bay']], ['Toronto', ['America/Toronto']], ['Trois-Rivi\xE8res', ['America/Toronto']], ['Vancouver', ['America/Vancouver', 'America/Los_Angeles']], ['Vaughan', ['America/Toronto']], ['Victoria', ['Asia/Hong_Kong', 'America/Vancouver', 'Indian/Mahe']], ['Waterloo', ['America/Toronto']], ['Windsor', ['America/Toronto']], ['Winnipeg', ['America/Winnipeg']], ['Annapolis County', ['America/Halifax']], ['Halifax', ['America/Halifax']], ["St. John's", ['America/St_Johns']], ['Qu\xE9bec', ['America/Toronto']], ['Quebec City', ['America/Toronto']], ['L\xE9vis', ['America/Toronto']], ['Okanagan', ['America/Vancouver']], ['Ladner', ['America/Vancouver']], ['Uvira', ['Africa/Lubumbashi']], ['Tshikapa', ['Africa/Lubumbashi']], ['Mwene-Ditu', ['Africa/Lubumbashi']], ['Mbuji-Mayi', ['Africa/Lubumbashi']], ['Kisangani', ['Africa/Lubumbashi']], ['Kindu', ['Africa/Lubumbashi']], ['Kananga', ['Africa/Lubumbashi']], ['Kalemie', ['Africa/Lubumbashi']], ['Isiro', ['Africa/Lubumbashi']], ['Ilebo', ['Africa/Lubumbashi']], ['Goma', ['Africa/Lubumbashi']], ['Gandajika', ['Africa/Lubumbashi']], ['Butembo', ['Africa/Lubumbashi']], ['Bukavu', ['Africa/Lubumbashi']], ['Beni', ['Africa/Lubumbashi']], ['Lubumbashi', ['Africa/Lubumbashi']], ['Likasi', ['Africa/Lubumbashi']], ['Kolwezi', ['Africa/Lubumbashi']], ['Mbandaka', ['Africa/Kinshasa']], ['Matadi', ['Africa/Kinshasa']], ['Kinshasa', ['Africa/Kinshasa']], ['Kikwit', ['Africa/Kinshasa']], ['Gemena', ['Africa/Kinshasa']], ['Boma', ['Africa/Kinshasa']], ['Bandundu', ['Africa/Kinshasa']], ['Masina', ['Africa/Kinshasa']], ['Bimbo', ['Africa/Bangui']], ['Bangui', ['Africa/Bangui']], ['Pointe-Noire', ['Africa/Brazzaville']], ['Dolisie', ['Africa/Brazzaville']], ['Brazzaville', ['Africa/Brazzaville']], ['Z\xFCrich', ['Europe/Zurich']], ['Lausanne', ['Europe/Zurich']], ['Gen\xE8ve', ['Europe/Zurich']], ['Bern', ['Europe/Zurich']], ['Basel', ['Europe/Zurich']], ['Yamoussoukro', ['Africa/Abidjan']], ['San-P\xE9dro', ['Africa/Abidjan']], ['Man', ['Africa/Abidjan']], ['Korhogo', ['Africa/Abidjan']], ['Gagnoa', ['Africa/Abidjan']], ['Divo', ['Africa/Abidjan']], ['Daloa', ['Africa/Abidjan']], ['Bouak\xE9', ['Africa/Abidjan']], ['Anyama', ['Africa/Abidjan']], ['Abobo', ['Africa/Abidjan']], ['Abidjan', ['Africa/Abidjan']], ['Abengourou', ['Africa/Abidjan']], ['Vi\xF1a del Mar', ['America/Santiago']], ['Valpara\xEDso', ['America/Santiago']], ['Valdivia', ['America/Santiago']], ['Temuco', ['America/Santiago']], ['Talcahuano', ['America/Santiago']], ['Talca', ['America/Santiago']], ['Santiago', ['America/Santiago', 'Asia/Manila']], ['San Bernardo', ['America/Santiago']], ['Rancagua', ['America/Santiago']], ['Quilpu\xE9', ['America/Santiago']], ['Punta Arenas', ['America/Punta_Arenas']], ['Puerto Montt', ['America/Santiago']], ['Puente Alto', ['America/Santiago']], ['Osorno', ['America/Santiago']], ['Los \xC1ngeles', ['America/Santiago']], ['La Serena', ['America/Santiago']], ['Iquique', ['America/Santiago']], ['Curic\xF3', ['America/Santiago']], ['Coquimbo', ['America/Santiago']], ['Copiap\xF3', ['America/Santiago']], ['Concepci\xF3n', ['America/Santiago']], ['Chill\xE1n', ['America/Santiago']], ['Calama', ['America/Santiago']], ['Arica', ['America/Santiago']], ['Antofagasta', ['America/Santiago']], ['Alto Hospicio', ['America/Santiago']], ['La Pintana', ['America/Santiago']], ['Lo Prado', ['America/Santiago']], ['Yaounde', ['Africa/Douala']], ['Yaound\xE9', ['Africa/Douala']], ['Nkongsamba', ['Africa/Douala']], ['Ngaound\xE9r\xE9', ['Africa/Douala']], ['Mokolo', ['Africa/Douala']], ['Mbouda', ['Africa/Douala']], ['Maroua', ['Africa/Douala']], ['Loum', ['Africa/Douala']], ['Kumba', ['Africa/Douala']], ['Kouss\xE9ri', ['Africa/Douala']], ['Garoua', ['Africa/Douala']], ['Ed\xE9a', ['Africa/Douala']], ['Douala', ['Africa/Douala']], ['Bertoua', ['Africa/Douala']], ['Bamenda', ['Africa/Douala']], ['Bafoussam', ['Africa/Douala']], ['Tengyue', ['Asia/Shanghai']], ['Jiuquan', ['Asia/Shanghai']], ['Shache', ['Asia/Urumqi']], ['Mengmao', ['Asia/Shanghai']], ['Lhasa', ['Asia/Shanghai']], ['Kashgar', ['Asia/Urumqi']], ['Jiayuguan', ['Asia/Shanghai']], ['Hotan', ['Asia/Urumqi']], ['Baoshan', ['Asia/Shanghai']], ['Xinyuan', ['Asia/Urumqi']], ['\xDCr\xFCmqi', ['Asia/Urumqi']], ['Urumqi', ['Asia/Urumqi']], ['Turpan', ['Asia/Urumqi']], ['Tacheng', ['Asia/Urumqi']], ['Shihezi', ['Asia/Urumqi']], ['Kuqa', ['Asia/Urumqi']], ['Korla', ['Asia/Urumqi']], ['Karamay', ['Asia/Urumqi']], ['Yili', ['Asia/Urumqi']], ['Hami', ['Asia/Urumqi']], ['Dunhuang', ['Asia/Shanghai']], ['Changji', ['Asia/Urumqi']], ['Aral', ['Asia/Urumqi']], ['Altay', ['Asia/Urumqi']], ['Aksu', ['Asia/Urumqi', 'Europe/Istanbul', 'Asia/Almaty']], ['Zunyi', ['Asia/Shanghai']], ['Zoucheng', ['Asia/Shanghai']], ['Ziyang', ['Asia/Shanghai']], ['Zitong', ['Asia/Shanghai']], ['Zigong', ['Asia/Shanghai']], ['Zhuzhou', ['Asia/Shanghai']], ['Zhumadian', ['Asia/Shanghai']], ['Shangqiu', ['Asia/Shanghai']], ['Zhuji', ['Asia/Shanghai']], ['Zhucheng', ['Asia/Shanghai']], ['Zhoukou', ['Asia/Shanghai']], ['Zhoucun', ['Asia/Shanghai']], ['Yuxi', ['Asia/Shanghai']], ['Zhonghe', ['Asia/Shanghai']], ['Zhicheng', ['Asia/Shanghai']], ['Zhenzhou', ['Asia/Shanghai']], ['Zhenping Chengguanzhen', ['Asia/Shanghai']], ['Zhenjiang', ['Asia/Shanghai']], ['Zhengzhou', ['Asia/Shanghai']], ['Zhengding', ['Asia/Shanghai']], ['Xinghua', ['Asia/Shanghai']], ['Zhaotong', ['Asia/Shanghai']], ['Zhaoqing', ['Asia/Shanghai']], ['Zhaoyuan', ['Asia/Shanghai']], ['Zhanjiang', ['Asia/Shanghai']], ['Zhangzhou', ['Asia/Shanghai']], ['Zhangye', ['Asia/Shanghai']], ['Zibo', ['Asia/Shanghai']], ['Anyang', ['Asia/Shanghai']], ['Zhabei', ['Asia/Shanghai']], ['Zaozhuang', ['Asia/Shanghai']], ['Zaoyang', ['Asia/Shanghai']], ['Yuyao', ['Asia/Shanghai']], ['Kunshan', ['Asia/Shanghai']], ['Jinghong', ['Asia/Shanghai']], ['Pizhou', ['Asia/Shanghai']], ['Yunfu', ['Asia/Shanghai']], ['Yuncheng', ['Asia/Shanghai']], ['Yulin', ['Asia/Shanghai']], ['Yuci', ['Asia/Shanghai']], ['Qianjiang', ['Asia/Shanghai']], ['Heyuan', ['Asia/Shanghai']], ['Yongzhou', ['Asia/Shanghai']], ['Yong\u2019an', ['Asia/Shanghai']], ['Zhongxiang', ['Asia/Shanghai']], ['Yingtan', ['Asia/Shanghai']], ['Chengzhong', ['Asia/Shanghai']], ['Yinchuan', ['Asia/Shanghai']], ['Qingzhou', ['Asia/Shanghai']], ['Yichun', ['Asia/Shanghai']], ['Yixing', ['Asia/Shanghai']], ['Yichang', ['Asia/Shanghai']], ['Yibin', ['Asia/Shanghai']], ['Yezhou', ['Asia/Shanghai']], ['Yanzhou', ['Asia/Shanghai']], ['Yantai', ['Asia/Shanghai']], ['Yangzhou', ['Asia/Shanghai']], ['Yangshuo', ['Asia/Shanghai']], ['Zhangjiagang', ['Asia/Shanghai']], ['Yangquan', ['Asia/Shanghai']], ['Yancheng', ['Asia/Shanghai']], ['Yan\u2019an', ['Asia/Shanghai']], ["Ya'an", ['Asia/Shanghai']], ['Tongshan', ['Asia/Shanghai']], ['Xuyong', ['Asia/Shanghai']], ['Shangrao', ['Asia/Shanghai']], ['Xunchang', ['Asia/Shanghai']], ['Xuchang', ['Asia/Shanghai']], ['Xuanzhou', ['Asia/Shanghai']], ['Xiuying', ['Asia/Shanghai']], ['Xiulin', ['Asia/Shanghai']], ['Xinzhou', ['Asia/Shanghai']], ['Xinzhai', ['Asia/Shanghai']], ['Xinyu', ['Asia/Shanghai']], ['Xinyang', ['Asia/Shanghai']], ['Xinxiang', ['Asia/Shanghai']], ['Xintai', ['Asia/Shanghai']], ['Xinji', ['Asia/Shanghai']], ['Xining', ['Asia/Shanghai']], ['Xingtai', ['Asia/Shanghai']], ['Ankang', ['Asia/Shanghai']], ['Xindi', ['Asia/Shanghai']], ['Xinyi', ['Asia/Shanghai']], ['Sanshui', ['Asia/Shanghai']], ['Xigang', ['Asia/Shanghai']], ['Xichang', ['Asia/Shanghai']], ['Xiazhen', ['Asia/Shanghai']], ['Xiaogang', ['Asia/Shanghai']], ['Xiaogan', ['Asia/Shanghai']], ['Xianyang', ['Asia/Shanghai']], ['Xiantao', ['Asia/Shanghai']], ['Xianning', ['Asia/Shanghai']], ['Zhuhai', ['Asia/Shanghai']], ['Xiangcheng', ['Asia/Shanghai']], ['Xiangtan', ['Asia/Shanghai']], ['Xiangyang', ['Asia/Shanghai']], ['Xi\u2019an', ['Asia/Shanghai']], ['Xiamen', ['Asia/Shanghai']], ['Wuzhou', ['Asia/Shanghai']], ['Wuxue', ['Asia/Shanghai']], ['Wushan', ['Asia/Shanghai']], ['Wuxi', ['Asia/Shanghai']], ['Dongyang', ['Asia/Shanghai']], ['Changde', ['Asia/Shanghai']], ['Wuhu', ['Asia/Shanghai']], ['Wuhan', ['Asia/Shanghai']], ['Wuhai', ['Asia/Shanghai']], ['Wugang', ['Asia/Shanghai']], ['Wuda', ['Asia/Shanghai']], ['Wenzhou', ['Asia/Shanghai']], ['Tianfu', ['Asia/Shanghai']], ['Wenchang', ['Asia/Shanghai']], ['Weinan', ['Asia/Shanghai']], ['Weihai', ['Asia/Shanghai']], ['Weifang', ['Asia/Shanghai']], ['Wayaobu', ['Asia/Shanghai']], ['Wanxian', ['Asia/Shanghai']], ['Wansheng', ['Asia/Shanghai']], ['Wanning', ['Asia/Shanghai']], ['Wafangdian', ['Asia/Shanghai']], ['Huangshan', ['Asia/Shanghai']], ['Tongzhou', ['Asia/Shanghai']], ['Fuding', ['Asia/Shanghai']], ['Tongling', ['Asia/Shanghai']], ['Tianshui', ['Asia/Shanghai']], ['Tianjin', ['Asia/Shanghai']], ['Chengtangcun', ['Asia/Shanghai']], ['Tangshan', ['Asia/Shanghai']], ['Binhe', ['Asia/Shanghai']], ['Tanggu', ['Asia/Shanghai']], ['Taizhou', ['Asia/Shanghai']], ['Taiyuan', ['Asia/Shanghai']], ['Taishan', ['Asia/Shanghai']], ['Taicang', ['Asia/Shanghai']], ['Tai\u2019an', ['Asia/Shanghai']], ['Suzhou', ['Asia/Shanghai']], ['Suqian', ['Asia/Shanghai']], ['Suizhou', ['Asia/Shanghai']], ['Suicheng', ['Asia/Shanghai']], ['Suining', ['Asia/Shanghai']], ['Songjiang', ['Asia/Shanghai']], ['Songcheng', ['Asia/Shanghai']], ['Simao', ['Asia/Shanghai']], ['Shuizhai', ['Asia/Shanghai']], ['Laixi', ['Asia/Shanghai']], ['Shouguang', ['Asia/Shanghai']], ['Shizuishan', ['Asia/Shanghai']], ['Shiyan', ['Asia/Shanghai']], ['Shiqiao', ['Asia/Shanghai']], ['Shiqi', ['Asia/Shanghai']], ['Shilong', ['Asia/Shanghai']], ['Tongchuanshi', ['Asia/Shanghai']], ['Shijiazhuang', ['Asia/Shanghai']], ['Shenzhen', ['Asia/Shanghai']], ['Shaping', ['Asia/Shanghai']], ['Shaoxing', ['Asia/Shanghai']], ['Shaowu', ['Asia/Shanghai']], ['Shaoguan', ['Asia/Shanghai']], ['Shanwei', ['Asia/Shanghai']], ['Shantou', ['Asia/Shanghai']], ['Shangluo', ['Asia/Shanghai']], ['Shanghai', ['Asia/Shanghai']], ['Shahecheng', ['Asia/Shanghai']], ['Sanya', ['Asia/Shanghai']], ['Sanming', ['Asia/Shanghai']], ['Sanmenxia', ['Asia/Shanghai']], ['Rui\u2019an', ['Asia/Shanghai']], ['Jieyang', ['Asia/Shanghai']], ['Quzhou', ['Asia/Shanghai']], ['Qujing', ['Asia/Shanghai']], ['Quanzhou', ['Asia/Shanghai']], ['Qinzhou', ['Asia/Shanghai']], ['Qinhuangdao', ['Asia/Shanghai']], ['Yizhou', ['Asia/Shanghai']], ['Jinjiang', ['Asia/Shanghai']], ["Huai'an", ['Asia/Shanghai']], ['Qingdao', ['Asia/Shanghai']], ['Qingyuan', ['Asia/Shanghai']], ['Qiaotou', ['Asia/Shanghai']], ['Puyang Chengguanzhen', ['Asia/Shanghai']], ['Puyang', ['Asia/Shanghai']], ['Putian', ['Asia/Shanghai']], ['Puqi', ['Asia/Shanghai']], ['Pulandian', ['Asia/Shanghai']], ['Pingxiang', ['Asia/Shanghai']], ['Pingshan', ['Asia/Shanghai']], ['Pingliang', ['Asia/Shanghai']], ['Pingdu', ['Asia/Shanghai']], ['Pingdingshan', ['Asia/Shanghai']], ['Peicheng', ['Asia/Shanghai']], ['Guang\u2019an', ['Asia/Shanghai']], ['Ningbo', ['Asia/Shanghai']], ['Nianbo', ['Asia/Shanghai']], ['Neijiang', ['Asia/Shanghai']], ['Nanyang', ['Asia/Shanghai']], ['Nantong', ['Asia/Shanghai']], ['Nanping', ['Asia/Shanghai']], ['Nanning', ['Asia/Shanghai']], ['Nanjing', ['Asia/Shanghai']], ['Nancun', ['Asia/Shanghai']], ['Nanchong', ['Asia/Shanghai']], ['Nanchang', ['Asia/Shanghai']], ['Nanbin', ['Asia/Shanghai']], ['Nada', ['Asia/Shanghai']], ['Mingshui', ['Asia/Shanghai']], ['Mianyang', ['Asia/Shanghai']], ['Mentougou', ['Asia/Shanghai']], ['Meizhou', ['Asia/Shanghai']], ['Meishan', ['Asia/Shanghai']], ['Wuchuan', ['Asia/Shanghai']], ['Maoming', ['Asia/Shanghai']], ['Majie', ['Asia/Shanghai']], ['Macheng', ['Asia/Shanghai']], ['Maba', ['Asia/Shanghai']], ['Ma\u2019anshan', ['Asia/Shanghai']], ['Luzhou', ['Asia/Shanghai']], ['Luoyang', ['Asia/Shanghai']], ['Luojiang', ['Asia/Shanghai']], ['Luohe', ['Asia/Shanghai']], ['Kangding', ['Asia/Shanghai']], ['Luancheng', ['Asia/Shanghai']], ['Lu\u2019an', ['Asia/Shanghai']], ['Loudi', ['Asia/Shanghai']], ['Longyan', ['Asia/Shanghai']], ['Longshui', ['Asia/Shanghai']], ['Guankou', ['Asia/Shanghai']], ['Puning', ['Asia/Shanghai']], ['Lishui', ['Asia/Shanghai']], ['Liuzhou', ['Asia/Shanghai']], ['Linyi', ['Asia/Shanghai']], ['Linxia Chengguanzhen', ['Asia/Shanghai']], ['Linxi', ['Asia/Shanghai']], ['Linshui', ['Asia/Shanghai']], ['Linqu', ['Asia/Shanghai']], ['Qingnian', ['Asia/Shanghai']], ['Beiliu', ['Asia/Shanghai']], ['Linfen', ['Asia/Shanghai']], ['Lincang', ['Asia/Shanghai']], ['Lichuan', ['Asia/Shanghai']], ['Licheng', ['Asia/Shanghai']], ['Liaocheng', ['Asia/Shanghai']], ['Hepu', ['Asia/Shanghai']], ['Anning', ['Asia/Shanghai']], ['Wuwei', ['Asia/Shanghai']], ['Lianjiang', ['Asia/Shanghai']], ['Leshan', ['Asia/Shanghai']], ['Lengshuijiang', ['Asia/Shanghai']], ['Leiyang', ['Asia/Shanghai']], ['Lecheng', ['Asia/Shanghai']], ['Laohekou', ['Asia/Shanghai']], ['Lanzhou', ['Asia/Shanghai']], ['Langfang', ['Asia/Shanghai']], ['Laizhou', ['Asia/Shanghai']], ['Laiyang', ['Asia/Shanghai']], ['Laiwu', ['Asia/Shanghai']], ['Laibin', ['Asia/Shanghai']], ['Kunming', ['Asia/Shanghai']], ['Kaiyuan', ['Asia/Shanghai']], ['Kaili', ['Asia/Shanghai']], ['Kaifeng', ['Asia/Shanghai']], ['Jiyuan', ['Asia/Shanghai']], ['Jizhou', ['Asia/Shanghai']], ['Jiujiang', ['Asia/Shanghai']], ['Qianzhou', ['Asia/Shanghai']], ['Jinzhou', ['Asia/Shanghai']], ['Jining', ['Asia/Shanghai']], ['Jinhua', ['Asia/Shanghai']], ['Jingzhou', ['Asia/Shanghai']], ['Jingzhi', ['Asia/Shanghai']], ['Jingmen', ['Asia/Shanghai']], ['Jingling', ['Asia/Shanghai']], ['Jingdezhen', ['Asia/Shanghai']], ['Jinchang', ['Asia/Shanghai']], ['Jincheng', ['Asia/Shanghai']], ['Jinan', ['Asia/Shanghai']], ['Jijiang', ['Asia/Shanghai']], ['Jieshou', ['Asia/Shanghai']], ['Jieshi', ['Asia/Shanghai']], ['Jiazi', ['Asia/Shanghai']], ['Jiaxing', ['Asia/Shanghai']], ['Jiawang', ['Asia/Shanghai']], ['Jiaozuo', ['Asia/Shanghai']], ['Jiaozhou', ['Asia/Shanghai']], ['Ningde', ['Asia/Shanghai']], ['Jiangmen', ['Asia/Shanghai']], ['Yangjiang', ['Asia/Shanghai']], ['Jianchang', ['Asia/Shanghai']], ['Ji\u2019an', ['Asia/Shanghai']], ['Guangyuan', ['Asia/Shanghai']], ['Qionghai', ['Asia/Shanghai']], ['Huzhou', ['Asia/Shanghai']], ['Cixi', ['Asia/Shanghai']], ['Humen', ['Asia/Shanghai']], ['Huizhou', ['Asia/Shanghai']], ['Huicheng', ['Asia/Shanghai']], ['Huayin', ['Asia/Shanghai']], ['Huangzhou', ['Asia/Shanghai']], ['Huangshi', ['Asia/Shanghai']], ['Dasha', ['Asia/Shanghai']], ['Huanggang', ['Asia/Shanghai']], ['Daxing', ['Asia/Shanghai']], ['Xingyi', ['Asia/Shanghai']], ['Huainan', ['Asia/Shanghai']], ['Huaihua', ['Asia/Shanghai']], ['Huaibei', ['Asia/Shanghai']], ['Huacheng', ['Asia/Shanghai']], ['Heze', ['Asia/Shanghai']], ['Hechuan', ['Asia/Shanghai']], ['Yiyang', ['Asia/Shanghai']], ['Hepo', ['Asia/Shanghai']], ['Hengyang', ['Asia/Shanghai']], ['Hengshui', ['Asia/Shanghai']], ['Hejiang', ['Asia/Shanghai']], ['Hefei', ['Asia/Shanghai']], ['Hebi', ['Asia/Shanghai']], ['Hanzhong', ['Asia/Shanghai']], ['Fu\u2019an', ['Asia/Shanghai']], ['Hanjia', ['Asia/Shanghai']], ['Hangzhou', ['Asia/Shanghai']], ['Hangu', ['Asia/Shanghai']], ['Hanfeng', ['Asia/Shanghai']], ['Changzhi', ['Asia/Shanghai']], ['Handan', ['Asia/Shanghai']], ['Jiaojiang', ['Asia/Shanghai']], ['Haimen', ['Asia/Shanghai']], ['Haikou', ['Asia/Shanghai']], ['Guyuan', ['Asia/Shanghai']], ['Gunan', ['Asia/Shanghai']], ['Gulin', ['Asia/Shanghai']], ['Guli', ['Asia/Shanghai']], ['Guiyang', ['Asia/Shanghai']], ['Guixi', ['Asia/Shanghai']], ['Guilin', ['Asia/Shanghai']], ['Guigang', ['Asia/Shanghai']], ['Guangzhou', ['Asia/Shanghai']], ['Guangshui', ['Asia/Shanghai']], ['Gejiu', ['Asia/Shanghai']], ['Gaozhou', ['Asia/Shanghai']], ['Gaoping', ['Asia/Shanghai']], ['Gaomi', ['Asia/Shanghai']], ['Ganzhou', ['Asia/Shanghai']], ['Gangu Chengguanzhen', ['Asia/Shanghai']], ['Fuzhou', ['Asia/Shanghai']], ['Fuyang', ['Asia/Shanghai']], ['Fuling', ['Asia/Shanghai']], ['Fuji', ['Asia/Tokyo', 'Asia/Shanghai']], ['Foshan', ['Asia/Shanghai']], ['Fengcheng', ['Asia/Shanghai']], ['Ezhou', ['Asia/Shanghai']], ['Enshi', ['Asia/Shanghai']], ['Encheng', ['Asia/Shanghai']], ['Duyun', ['Asia/Shanghai']], ['Dongying', ['Asia/Shanghai']], ['Dongtai', ['Asia/Shanghai']], ['Donghai', ['Asia/Shanghai']], ['Dongguan', ['Asia/Shanghai']], ['Dingzhou', ['Asia/Shanghai']], ['Dingxi', ['Asia/Shanghai']], ['Dezhou', ['Asia/Shanghai']], ['Deyang', ['Asia/Shanghai']], ['Dengzhou', ['Asia/Shanghai']], ['Zhangjiajie', ['Asia/Shanghai']], ['Lijiang', ['Asia/Shanghai']], ['Dazhou', ['Asia/Shanghai']], ['Dawukou', ['Asia/Shanghai']], ['Datun', ['Asia/Shanghai']], ['Danshui', ['Asia/Shanghai']], ['Daliang', ['Asia/Shanghai']], ['Dalian', ['Asia/Shanghai']], ['Dali', ['Asia/Shanghai']], ['Chuzhou', ['Asia/Shanghai']], ['Yangchun', ['Asia/Shanghai']], ['Yiwu', ['Asia/Shanghai']], ['Chongqing', ['Asia/Shanghai']], ['Chizhou', ['Asia/Shanghai']], ['Chenzhou', ['Asia/Shanghai']], ['Jiangyin', ['Asia/Shanghai']], ['Chenggu', ['Asia/Shanghai']], ['Chengdu', ['Asia/Shanghai']], ['Chenghua', ['Asia/Shanghai']], ['Chaozhou', ['Asia/Shanghai']], ['Chaohu', ['Asia/Shanghai']], ['Changzhou', ['Asia/Shanghai']], ['Changyuan', ['Asia/Shanghai']], ['Changyi', ['Asia/Shanghai']], ['Changsha', ['Asia/Shanghai']], ['Changle', ['Asia/Shanghai']], ['Cangzhou', ['Asia/Shanghai']], ['Buhe', ['Asia/Shanghai']], ['Bozhou', ['Asia/Shanghai']], ['Boshan', ['Asia/Shanghai']], ['Baise', ['Asia/Shanghai']], ['Bishan', ['Asia/Shanghai']], ['Binzhou', ['Asia/Shanghai']], ['Bijie', ['Asia/Shanghai']], ['Bengbu', ['Asia/Shanghai']], ['Beijing', ['Asia/Shanghai']], ['Beihai', ['Asia/Shanghai']], ['Beibei', ['Asia/Shanghai']], ['Basuo', ['Asia/Shanghai']], ['Bashan', ['Asia/Shanghai']], ['Shaoyang', ['Asia/Shanghai']], ['Baoding', ['Asia/Shanghai']], ['Baiyin', ['Asia/Shanghai']], ['Baisha', ['Asia/Shanghai']], ['Shangyu', ['Asia/Shanghai']], ['Bachuan', ['Asia/Shanghai']], ['Anshun', ['Asia/Shanghai']], ['Anqiu', ['Asia/Shanghai']], ['Anqing', ['Asia/Shanghai']], ['Anliu', ['Asia/Shanghai']], ['Anbu', ['Asia/Shanghai']], ['Jiangyou', ['Asia/Shanghai']], ['Zhoushan', ['Asia/Shanghai']], ['Banan', ['Asia/Shanghai']], ['Wuzhishan', ['Asia/Shanghai']], ['Lianghu', ['Asia/Shanghai']], ['Wuyishan', ['Asia/Shanghai']], ['Yueyang', ['Asia/Shanghai']], ['Hedong', ['Asia/Shanghai']], ['Zhaodong', ['Asia/Shanghai']], ['Zhangjiakou', ['Asia/Shanghai']], ['Zhalantun', ['Asia/Shanghai']], ['Yushu', ['Asia/Shanghai']], ['Yingkou', ['Asia/Shanghai']], ['Yanji', ['Asia/Shanghai']], ['Yakeshi', ['Asia/Shanghai']], ['Xuanhua', ['Asia/Shanghai']], ['Xilin Hot', ['Asia/Shanghai']], ['Ulanhot', ['Asia/Shanghai']], ['Tongliao', ['Asia/Shanghai']], ['Tonghua', ['Asia/Shanghai']], ['Tieling', ['Asia/Shanghai']], ['Tieli', ['Asia/Shanghai']], ['Taonan', ['Asia/Shanghai']], ['Sujiatun', ['Asia/Shanghai']], ['Suihua', ['Asia/Shanghai']], ['Siping', ['Asia/Shanghai']], ['Shunyi', ['Asia/Shanghai']], ['Shuangyashan', ['Asia/Shanghai']], ['Shuangcheng', ['Asia/Shanghai']], ['Shenyang', ['Asia/Shanghai']], ['Shanhaiguan', ['Asia/Shanghai']], ['Fendou', ['Asia/Shanghai']], ['Qitaihe', ['Asia/Shanghai']], ['Qiqihar', ['Asia/Shanghai']], ['Songyuan', ['Asia/Shanghai']], ['Panshan', ['Asia/Shanghai']], ['Nehe', ['Asia/Shanghai']], ['Nanpiao', ['Asia/Shanghai']], ['Lianhe', ['Asia/Shanghai']], ['Mudanjiang', ['Asia/Shanghai']], ['Longjing', ['Asia/Shanghai']], ['Longjiang', ['Asia/Shanghai']], ['Longfeng', ['Asia/Shanghai']], ['Liaoyuan', ['Asia/Shanghai']], ['Liaoyang', ['Asia/Shanghai']], ['Jixi', ['Asia/Shanghai']], ['Jiutai', ['Asia/Shanghai']], ['Jiupu', ['Asia/Shanghai']], ['Jishu', ['Asia/Shanghai']], ['Lianshan', ['Asia/Shanghai']], ['Jilin', ['Asia/Shanghai']], ['Jiaohe', ['Asia/Shanghai']], ['Jiamusi', ['Asia/Shanghai']], ['Jalai Nur', ['Asia/Shanghai']], ['Jiagedaqi', ['Asia/Shanghai']], ['Hulan Ergi', ['Asia/Shanghai']], ['Hulan', ['Asia/Shanghai']], ['Huadian', ['Asia/Shanghai']], ['Honggang', ['Asia/Shanghai']], ['Hohhot', ['Asia/Shanghai']], ['Hengshan', ['Asia/Shanghai']], ['Heihe', ['Asia/Shanghai']], ['Hegang', ['Asia/Shanghai']], ['Harbin', ['Asia/Shanghai']], ['Hailun', ['Asia/Shanghai']], ['Hailar', ['Asia/Shanghai']], ['Haicheng', ['Asia/Shanghai']], ['Gongzhuling', ['Asia/Shanghai']], ['Fuyu', ['Asia/Shanghai']], ['Fuxin', ['Asia/Shanghai']], ['Fushun', ['Asia/Shanghai']], ['Dunhua', ['Asia/Shanghai']], ['Dongling', ['Asia/Shanghai']], ['Didao', ['Asia/Shanghai']], ['Dehui', ['Asia/Shanghai']], ['Datong', ['Asia/Shanghai']], ['Daqing', ['Asia/Shanghai']], ['Dandong', ['Asia/Shanghai']], ['Chifeng', ['Asia/Shanghai']], ['Chengde', ['Asia/Shanghai']], ['Chaoyang', ['Asia/Shanghai']], ['Changchun', ['Asia/Shanghai']], ['Benxi', ['Asia/Shanghai']], ['Beipiao', ['Asia/Shanghai']], ['Bei\u2019an', ['Asia/Shanghai']], ['Baotou', ['Asia/Shanghai']], ['Baicheng', ['Asia/Shanghai']], ['Baishan', ['Asia/Shanghai']], ['Anshan', ['Asia/Shanghai']], ['Anda', ['Asia/Shanghai']], ['Acheng', ['Asia/Shanghai']], ['E\u2019zhou', ['Asia/Shanghai']], ['Xiangjiaba', ['Asia/Shanghai']], ['Panzhihua', ['Asia/Shanghai']], ['Zhongshan', ['Asia/Shanghai']], ['Tongchuan', ['Asia/Shanghai']], ['Changshu', ['Asia/Shanghai']], ['Jiashan', ['Asia/Shanghai']], ['Fenghuang', ['Asia/Shanghai']], ['Hezhou', ['Asia/Shanghai']], ['Zhu Cheng City', ['Asia/Shanghai']], ['Shangri-La', ['Asia/Shanghai']], ['Ordos', ['Asia/Shanghai']], ['Taibai', ['Asia/Shanghai']], ['Pailou', ['Asia/Shanghai']], ['Sanhe', ['Asia/Shanghai']], ['Lizhi', ['Asia/Shanghai']], ['Huixing', ['Asia/Shanghai']], ['Yangcheng', ['Asia/Shanghai']], ['Nanjin', ['Asia/Shanghai']], ['Wenshan City', ['Asia/Shanghai']], ['Bole', ['Asia/Shanghai']], ['Liupanshui', ['Asia/Shanghai']], ['Nanchuan', ['Asia/Shanghai']], ['Xingning', ['Asia/Shanghai']], ['Rizhao', ['Asia/Shanghai']], ['Jianshui', ['Asia/Shanghai']], ['Liuzhi', ['Asia/Shanghai']], ['Xuzhou', ['Asia/Shanghai']], ['Lianyungang', ['Asia/Shanghai']], ['Rugao', ['Asia/Shanghai']], ['Jinzhong', ['Asia/Shanghai']], ['Baoji', ['Asia/Shanghai']], ['Huocheng', ['Asia/Urumqi']], ['Bayan Nur', ['Asia/Shanghai']], ['Tumxuk', ['Asia/Urumqi']], ['Chongzuo', ['Asia/Shanghai']], ['Fangchenggang', ['Asia/Shanghai']], ['Yunlong', ['Asia/Shanghai']], ['Yidu', ['Asia/Shanghai']], ['Hechi', ['Asia/Shanghai']], ['Wanzhou', ['Asia/Shanghai']], ['Yintai', ['Asia/Shanghai']], ['Qingyang', ['Asia/Shanghai']], ['Shuanglonghu', ['Asia/Shanghai']], ['Liangping', ['Asia/Shanghai']], ['Longling County', ['Asia/Shanghai']], ['Mianzhu, Deyang, Sichuan', ['Asia/Shanghai']], ['Pingwu County', ['Asia/Shanghai']], ['Zipaquir\xE1', ['America/Bogota']], ['Yopal', ['America/Bogota']], ['Villavicencio', ['America/Bogota']], ['Valledupar', ['America/Bogota']], ['Tunja', ['America/Bogota']], ['Tulu\xE1', ['America/Bogota']], ['Soledad', ['America/Bogota']], ['Sogamoso', ['America/Bogota']], ['Soacha', ['America/Bogota']], ['Sincelejo', ['America/Bogota']], ['Santa Marta', ['America/Bogota']], ['Sabanalarga', ['America/Bogota']], ['Rionegro', ['America/Bogota']], ['Riohacha', ['America/Bogota']], ['Quibd\xF3', ['America/Bogota']], ['Popay\xE1n', ['America/Bogota']], ['Piedecuesta', ['America/Bogota']], ['Pereira', ['America/Bogota']], ['Pasto', ['America/Bogota']], ['Palmira', ['America/Bogota']], ['Oca\xF1a', ['America/Bogota']], ['Neiva', ['America/Bogota']], ['Monter\xEDa', ['America/Bogota']], ['Medell\xEDn', ['America/Bogota']], ['Manizales', ['America/Bogota']], ['Malambo', ['America/Bogota']], ['Maicao', ['America/Bogota']], ['Magangu\xE9', ['America/Bogota']], ['Itag\xFC\xED', ['America/Bogota']], ['Ibagu\xE9', ['America/Bogota']], ['Gir\xF3n', ['America/Bogota']], ['Girardot City', ['America/Bogota']], ['Floridablanca', ['America/Bogota']], ['Florencia', ['America/Bogota']], ['Facatativ\xE1', ['America/Bogota']], ['Envigado', ['America/Bogota']], ['Dosquebradas', ['America/Bogota']], ['C\xFAcuta', ['America/Bogota']], ['Cartago', ['America/Bogota']], ['Cartagena', ['America/Bogota', 'Europe/Madrid']], ['Cali', ['America/Bogota']], ['Guadalajara de Buga', ['America/Bogota']], ['Buenaventura', ['America/Bogota']], ['Bucaramanga', ['America/Bogota']], ['Bogot\xE1', ['America/Bogota']], ['Bello', ['America/Bogota']], ['Barranquilla', ['America/Bogota']], ['Barrancabermeja', ['America/Bogota']], ['Armenia', ['America/Bogota']], ['San Jos\xE9', ['America/Costa_Rica']], ['Santiago de Cuba', ['America/Havana']], ['Santa Clara', ['America/Havana', 'America/Los_Angeles']], ['San Miguel del Padr\xF3n', ['America/Havana']], ['Sancti Sp\xEDritus', ['America/Havana']], ['Pinar del R\xEDo', ['America/Havana']], ['Palma Soriano', ['America/Havana']], ['Matanzas', ['America/Havana']], ['Manzanillo', ['America/Mexico_City', 'America/Havana']], ['Las Tunas', ['America/Havana']], ['Havana', ['America/Havana']], ['Holgu\xEDn', ['America/Havana']], ['Guant\xE1namo', ['America/Havana']], ['Guanabacoa', ['America/Havana']], ['Cienfuegos', ['America/Havana']], ['Ciego de \xC1vila', ['America/Havana']], ['Cerro', ['America/Havana']], ['Camag\xFCey', ['America/Havana']], ['Bayamo', ['America/Havana']], ['Arroyo Naranjo', ['America/Havana']], ['Alamar', ['America/Havana']], ['Ciudad Camilo Cienfuegos', ['America/Havana']], ['Centro Habana', ['America/Havana']], ['Boyeros', ['America/Havana']], ['Diez de Octubre', ['America/Havana']], ['Praia', ['Atlantic/Cape_Verde']], ['Willemstad', ['America/Curacao']], ['Nicosia', ['Asia/Nicosia']], ['Limassol', ['Asia/Nicosia']], ['Famagusta', ['Asia/Famagusta']], ['Prague', ['Europe/Prague']], ['Pilsen', ['Europe/Prague']], ['Ostrava', ['Europe/Prague']], ['Liberec', ['Europe/Prague']], ['Brno', ['Europe/Prague']], ['W\xFCrzburg', ['Europe/Berlin']], ['Wuppertal', ['Europe/Berlin']], ['Wolfsburg', ['Europe/Berlin']], ['Witten', ['Europe/Berlin']], ['Wilmersdorf', ['Europe/Berlin']], ['Wiesbaden', ['Europe/Berlin']], ['Ulm', ['Europe/Berlin']], ['Trier', ['Europe/Berlin']], ['Stuttgart', ['Europe/Berlin']], ['Solingen', ['Europe/Berlin']], ['Siegen', ['Europe/Berlin']], ['Sch\xF6neberg', ['Europe/Berlin']], ['Salzgitter', ['Europe/Berlin']], ['Saarbr\xFCcken', ['Europe/Berlin']], ['Rostock', ['Europe/Berlin']], ['Reutlingen', ['Europe/Berlin']], ['Remscheid', ['Europe/Berlin']], ['Regensburg', ['Europe/Berlin']], ['Recklinghausen', ['Europe/Berlin']], ['Prenzlauer Berg', ['Europe/Berlin']], ['Potsdam', ['Europe/Berlin']], ['Porz am Rhein', ['Europe/Berlin']], ['Pforzheim', ['Europe/Berlin']], ['Paderborn', ['Europe/Berlin']], ['Osnabr\xFCck', ['Europe/Berlin']], ['Oldenburg', ['Europe/Berlin']], ['Offenbach', ['Europe/Berlin']], ['Oberhausen', ['Europe/Berlin']], ['N\xFCrnberg', ['Europe/Berlin']], ['Nippes', ['Europe/Berlin']], ['Neue Neustadt', ['Europe/Berlin']], ['Neuss', ['Europe/Berlin']], ['Neuk\xF6lln', ['Europe/Berlin']], ['M\xFCnster', ['Europe/Berlin']], ['Munich', ['Europe/Berlin']], ['M\xFClheim', ['Europe/Berlin']], ['M\xF6nchengladbach', ['Europe/Berlin']], ['Moers', ['Europe/Berlin']], ['Marzahn', ['Europe/Berlin']], ['Mannheim', ['Europe/Berlin']], ['Mainz', ['Europe/Berlin']], ['Magdeburg', ['Europe/Berlin']], ['Ludwigshafen am Rhein', ['Europe/Berlin']], ['L\xFCbeck', ['Europe/Berlin']], ['Leverkusen', ['Europe/Berlin']], ['Leipzig', ['Europe/Berlin']], ['Kreuzberg', ['Europe/Berlin']], ['Krefeld', ['Europe/Berlin']], ['K\xF6ln', ['Europe/Berlin']], ['Koblenz', ['Europe/Berlin']], ['Kleinzschocher', ['Europe/Berlin']], ['Kiel', ['Europe/Berlin']], ['Kassel', ['Europe/Berlin']], ['Karlsruhe', ['Europe/Berlin']], ['Jena', ['Europe/Berlin']], ['Ingolstadt', ['Europe/Berlin']], ['Hildesheim', ['Europe/Berlin']], ['Herne', ['Europe/Berlin']], ['Heilbronn', ['Europe/Berlin']], ['Heidelberg', ['Europe/Berlin']], ['Harburg', ['Europe/Berlin']], ['Hannover', ['Europe/Berlin']], ['Hamm', ['Europe/Berlin']], ['Wandsbek', ['Europe/Berlin']], ['Marienthal', ['Europe/Berlin']], ['Hamburg-Mitte', ['Europe/Berlin']], ['Eimsb\xFCttel', ['Europe/Berlin']], ['Altona', ['Europe/Berlin']], ['Hamburg', ['Europe/Berlin']], ['Halle (Saale)', ['Europe/Berlin']], ['Hagen', ['Europe/Berlin']], ['Gro\xDFzschocher', ['Europe/Berlin']], ['G\xF6ttingen', ['Europe/Berlin']], ['Gera', ['Europe/Berlin']], ['Gelsenkirchen', ['Europe/Berlin']], ['F\xFCrth', ['Europe/Berlin']], ['Friedrichshain', ['Europe/Berlin']], ['Freiburg', ['Europe/Berlin']], ['Frankfurt am Main', ['Europe/Berlin']], ['Essen', ['Europe/Berlin']], ['Erlangen', ['Europe/Berlin']], ['Erfurt', ['Europe/Berlin']], ['D\xFCsseldorf', ['Europe/Berlin']], ['Duisburg', ['Europe/Berlin']], ['Dresden', ['Europe/Berlin']], ['Dortmund', ['Europe/Berlin']], ['Darmstadt', ['Europe/Berlin']], ['Chemnitz', ['Europe/Berlin']], ['Charlottenburg', ['Europe/Berlin']], ['Bremerhaven', ['Europe/Berlin']], ['Bremen', ['Europe/Berlin']], ['Braunschweig', ['Europe/Berlin']], ['Bottrop', ['Europe/Berlin']], ['Bonn', ['Europe/Berlin']], ['Bochum', ['Europe/Berlin']], ['Bielefeld', ['Europe/Berlin']], ['Berlin', ['Europe/Berlin']], ['Bergisch Gladbach', ['Europe/Berlin']], ['Augsburg', ['Europe/Berlin']], ['Aachen', ['Europe/Berlin']], ['Mitte', ['Europe/Berlin']], ['Bochum-Hordel', ['Europe/Berlin']], ['Bergedorf', ['Europe/Berlin']], ['Hamburg-Nord', ['Europe/Berlin']], ['Rodenkirchen', ['Europe/Berlin']], ['Djibouti', ['Africa/Djibouti']], ['Odense', ['Europe/Copenhagen']], ['Copenhagen', ['Europe/Copenhagen']], ['\xC5rhus', ['Europe/Copenhagen']], ['Aalborg', ['Europe/Copenhagen']], ['Santo Domingo', ['America/Santo_Domingo']], ['Santiago de los Caballeros', ['America/Santo_Domingo']], ['San Pedro de Macor\xEDs', ['America/Santo_Domingo']], ['San Francisco de Macor\xEDs', ['America/Santo_Domingo']], ['Puerto Plata', ['America/Santo_Domingo']], ['Salvale\xF3n de Hig\xFCey', ['America/Santo_Domingo']], ['Punta Cana', ['America/Santo_Domingo']], ['La Romana', ['America/Santo_Domingo']], ['Concepci\xF3n de La Vega', ['America/Santo_Domingo']], ['San Crist\xF3bal', ['America/Caracas', 'America/Santo_Domingo']], ['Bella Vista', ['America/Santo_Domingo']], ['Santo Domingo Oeste', ['America/Santo_Domingo']], ['Santo Domingo Este', ['America/Santo_Domingo']], ['Boumerdas', ['Africa/Algiers']], ['Tlemcen', ['Africa/Algiers']], ['Tizi Ouzou', ['Africa/Algiers']], ['Tiaret', ['Africa/Algiers']], ['T\xE9bessa', ['Africa/Algiers']], ['Souk Ahras', ['Africa/Algiers']], ['Skikda', ['Africa/Algiers']], ['Sidi Bel Abb\xE8s', ['Africa/Algiers']], ['S\xE9tif', ['Africa/Algiers']], ['Sa\xEFda', ['Africa/Algiers']], ['Relizane', ['Africa/Algiers']], ['Oum el Bouaghi', ['Africa/Algiers']], ['Ouargla', ['Africa/Algiers']], ['Oran', ['Africa/Algiers']], ['M\u2019sila', ['Africa/Algiers']], ['Mostaganem', ['Africa/Algiers']], ['M\xE9d\xE9a', ['Africa/Algiers']], ['Mascara', ['Africa/Algiers']], ['Laghouat', ['Africa/Algiers']], ['Khenchela', ['Africa/Algiers']], ['Jijel', ['Africa/Algiers']], ['Guelma', ['Africa/Algiers']], ['El Oued', ['Africa/Algiers']], ['El Eulma', ['Africa/Algiers']], ['Chlef', ['Africa/Algiers']], ['El Achir', ['Africa/Algiers']], ['Ech Chettia', ['Africa/Algiers']], ['Djelfa', ['Africa/Algiers']], ['Constantine', ['Africa/Algiers']], ['Bordj el Kiffan', ['Africa/Algiers']], ['Bordj Bou Arr\xE9ridj', ['Africa/Algiers']], ['Blida', ['Africa/Algiers']], ['Biskra', ['Africa/Algiers']], ['Beja\xEFa', ['Africa/Algiers']], ['B\xE9char', ['Africa/Algiers']], ['Batna', ['Africa/Algiers']], ['Baraki', ['Africa/Algiers']], ['Bab Ezzouar', ['Africa/Algiers']], ['Annaba', ['Africa/Algiers']], ['Algiers', ['Africa/Algiers']], ['A\xEFn Oussera', ['Africa/Algiers']], ['A\xEFn Be\xEFda', ['Africa/Algiers']], ['District of Taher', ['Africa/Algiers']], ['Santo Domingo de los Colorados', ['America/Guayaquil']], ['Riobamba', ['America/Guayaquil']], ['Quito', ['America/Guayaquil']], ['Quevedo', ['America/Guayaquil']], ['Portoviejo', ['America/Guayaquil']], ['Milagro', ['America/Guayaquil']], ['Manta', ['America/Guayaquil']], ['Machala', ['America/Guayaquil']], ['Loja', ['America/Guayaquil']], ['Latacunga', ['America/Guayaquil']], ['Ibarra', ['America/Guayaquil']], ['Guayaquil', ['America/Guayaquil']], ['Eloy Alfaro', ['America/Guayaquil']], ['Daule', ['America/Guayaquil']], ['Cuenca', ['America/Guayaquil']], ['Ambato', ['America/Guayaquil']], ['Tartu', ['Europe/Tallinn']], ['Tallinn', ['Europe/Tallinn']], ['Zefta', ['Africa/Cairo']], ['\u0162im\u0101', ['Africa/Cairo']], ['\u0162an\u0163\u0101', ['Africa/Cairo']], ['\u0162alkh\u0101', ['Africa/Cairo']], ['\u0162ah\u0163\u0101', ['Africa/Cairo']], ['Sohag', ['Africa/Cairo']], ['Sinn\u016Bris', ['Africa/Cairo']], ['Shubr\u0101 al Khaymah', ['Africa/Cairo']], ['Shib\u012Bn al Kawm', ['Africa/Cairo']], ['Sam\u0101l\u016B\u0163', ['Africa/Cairo']], ['Rosetta', ['Africa/Cairo']], ['Qin\u0101', ['Africa/Cairo']], ['Qaly\u016Bb', ['Africa/Cairo']], ['M\u012Bt Ghamr', ['Africa/Cairo']], ['Mun\u016Bf', ['Africa/Cairo']], ['Mersa Matruh', ['Africa/Cairo']], ['Manfal\u016B\u0163', ['Africa/Cairo']], ['Mallaw\u012B', ['Africa/Cairo']], ['Magh\u0101ghah', ['Africa/Cairo']], ['Mad\u012Bnat Sittah Ukt\u016Bbar', ['Africa/Cairo']], ['Al \u2018\u0100shir min Rama\u1E11\u0101n', ['Africa/Cairo']], ['Kird\u0101sah', ['Africa/Cairo']], ['Kawm Umb\u016B', ['Africa/Cairo']], ['Kafr ash Shaykh', ['Africa/Cairo']], ['Kafr ad Daww\u0101r', ['Africa/Cairo']], ['Girga', ['Africa/Cairo']], ['Idk\u016B', ['Africa/Cairo']], ['Idf\u016B', ['Africa/Cairo']], ['\u1E28alw\u0101n', ['Africa/Cairo']], ['F\u0101q\u016Bs', ['Africa/Cairo']], ['Damietta', ['Africa/Cairo']], ['Dis\u016Bq', ['Africa/Cairo']], ['Dikirnis', ['Africa/Cairo']], ['Dayr\u016B\u0163', ['Africa/Cairo']], ['Damanh\u016Br', ['Africa/Cairo']], ['B\u016Bsh', ['Africa/Cairo']], ['Port Said', ['Africa/Cairo']], ['Bilq\u0101s', ['Africa/Cairo']], ['Bilbays', ['Africa/Cairo']], ['Ban\u012B Suwayf', ['Africa/Cairo']], ['Ban\u012B Maz\u0101r', ['Africa/Cairo']], ['Banh\u0101', ['Africa/Cairo']], ['Zagazig', ['Africa/Cairo']], ['Asy\u016B\u0163', ['Africa/Cairo']], ['Aswan', ['Africa/Cairo']], ['Suez', ['Africa/Cairo']], ['As Sinbill\u0101wayn', ['Africa/Cairo']], ['Ashm\u016Bn', ['Africa/Cairo']], ['Luxor', ['Africa/Cairo']], ['Cairo', ['Africa/Cairo']], ['Al Miny\u0101', ['Africa/Cairo']], ['Al Ma\u0163ar\u012Byah', ['Africa/Cairo']], ['Al Manzalah', ['Africa/Cairo']], ['Al Man\u015F\u016Brah', ['Africa/Cairo']], ['Al Ma\u1E29allah al Kubr\xE1', ['Africa/Cairo']], ['Al Khu\u015F\u016B\u015F', ['Africa/Cairo']], ['Giza', ['Africa/Cairo']], ['Ismailia', ['Africa/Cairo']], ['Alexandria', ['Africa/Cairo', 'America/New_York']], ['Al \u1E28aw\u0101mid\u012Byah', ['Africa/Cairo']], ['Hurghada', ['Africa/Cairo']], ['Al Fayy\u016Bm', ['Africa/Cairo']], ['Al Fashn', ['Africa/Cairo']], ['Arish', ['Africa/Cairo']], ['Akhm\u012Bm', ['Africa/Cairo']], ['Ab\u016B T\u012Bj', ['Africa/Cairo']], ['Ab\u016B Kab\u012Br', ['Africa/Cairo']], ['Abn\u016Bb', ['Africa/Cairo']], ['New Cairo', ['Africa/Cairo']], ["Al-'Ub\u016Br", ['Africa/Cairo']], ['El Aai\xFAn', ['Africa/El_Aaiun']], ['Laayoune', ['Africa/El_Aaiun']], ['Asmara', ['Africa/Asmara']], ['Valencia', ['America/Caracas', 'Europe/Madrid', 'America/Los_Angeles']], ['Torrevieja', ['Europe/Madrid']], ['Telde', ['Atlantic/Canary']], ['Sevilla', ['Europe/Madrid']], ['Santa Cruz de Tenerife', ['Atlantic/Canary']], ['La Laguna', ['Atlantic/Canary']], ['Palma', ['Europe/Madrid']], ['Murcia', ['Europe/Madrid']], ['Marbella', ['Europe/Madrid']], ['M\xE1laga', ['Europe/Madrid']], ['Las Palmas de Gran Canaria', ['Atlantic/Canary']], ['Jerez de la Frontera', ['Europe/Madrid']], ['Ja\xE9n', ['Europe/Madrid']], ['Huelva', ['Europe/Madrid']], ['Granada', ['Europe/Madrid']], ['Elche', ['Europe/Madrid']], ['Dos Hermanas', ['Europe/Madrid']], ['Castell\xF3 de la Plana', ['Europe/Madrid']], ['Cadiz', ['Asia/Manila', 'Europe/Madrid']], ['Badajoz', ['Europe/Madrid']], ['Almer\xEDa', ['Europe/Madrid']], ['Alicante', ['Europe/Madrid']], ['Algeciras', ['Europe/Madrid']], ['Albacete', ['Europe/Madrid']], ['Zaragoza', ['Europe/Madrid']], ['Gasteiz / Vitoria', ['Europe/Madrid']], ['Villaverde', ['Europe/Madrid']], ['Vigo', ['Europe/Madrid']], ['Valladolid', ['Europe/Madrid']], ['Torrej\xF3n de Ardoz', ['Europe/Madrid']], ['Tetu\xE1n de las Victorias', ['Europe/Madrid']], ['Terrassa', ['Europe/Madrid']], ['Tarragona', ['Europe/Madrid']], ['Santander', ['Europe/Madrid']], ['Santa Coloma de Gramenet', ['Europe/Madrid']], ['Donostia / San Sebasti\xE1n', ['Europe/Madrid']], ['Sant Andreu', ['Europe/Madrid']], ['Salamanca', ['America/Mexico_City', 'Europe/Madrid']], ['Sabadell', ['Europe/Madrid']], ['Reus', ['Europe/Madrid']], ['Puente de Vallecas', ['Europe/Madrid']], ['Parla', ['Europe/Madrid']], ['Pamplona', ['Europe/Madrid']], ['Oviedo', ['Europe/Madrid']], ['Ourense', ['Europe/Madrid']], ['M\xF3stoles', ['Europe/Madrid']], ['Moratalaz', ['Europe/Madrid']], ['Matar\xF3', ['Europe/Madrid']], ['Madrid', ['Europe/Madrid']], ['Logro\xF1o', ['Europe/Madrid']], ['Lleida', ['Europe/Madrid']], ['Le\xF3n', ['America/Managua', 'Europe/Madrid']], ['Legan\xE9s', ['Europe/Madrid']], ['A Coru\xF1a', ['Europe/Madrid']], ["L'Hospitalet de Llobregat", ['Europe/Madrid']], ['Hortaleza', ['Europe/Madrid']], ['Gr\xE0cia', ['Europe/Madrid']], ['Gij\xF3n', ['Europe/Madrid']], ['Getafe', ['Europe/Madrid']], ['Fuenlabrada', ['Europe/Madrid']], ['Ciudad Lineal', ['Europe/Madrid']], ['Chamart\xEDn', ['Europe/Madrid']], ['Burgos', ['Europe/Madrid']], ['Bilbao', ['Europe/Madrid']], ['Barcelona', ['Europe/Madrid', 'America/Caracas']], ['Badalona', ['Europe/Madrid']], ['Alcorc\xF3n', ['Europe/Madrid']], ['Alcobendas', ['Europe/Madrid']], ['Alcal\xE1 de Henares', ['Europe/Madrid']], ['Nou Barris', ['Europe/Madrid']], ['Moncloa-Aravaca', ['Europe/Madrid']], ['Eixample', ['Europe/Madrid']], ['Sarri\xE0-Sant Gervasi', ['Europe/Madrid']], ['Horta-Guinard\xF3', ['Europe/Madrid']], ['Sants-Montju\xEFc', ['Europe/Madrid']], ['Sant Mart\xED', ['Europe/Madrid']], ['Ciutat Vella', ['Europe/Madrid']], ['Arganzuela', ['Europe/Madrid']], ['San Blas-Canillejas', ['Europe/Madrid']], ['Latina', ['Europe/Madrid']], ['Usera', ['Europe/Madrid']], ['Chamber\xED', ['Europe/Madrid']], ['Carabanchel', ['Europe/Madrid']], ['Madrid Centro', ['Europe/Madrid']], ['Retiro', ['Europe/Madrid']], ['Delicias', ['Europe/Madrid']], ['Fuencarral-El Pardo', ['Europe/Madrid']], ['Nazr\u0113t', ['Africa/Addis_Ababa']], ["Mek'ele", ['Africa/Addis_Ababa']], ['Jimma', ['Africa/Addis_Ababa']], ['Gondar', ['Africa/Addis_Ababa']], ['Dire Dawa', ['Africa/Addis_Ababa']], ['Des\u0113', ['Africa/Addis_Ababa']], ['Bishoftu', ['Africa/Addis_Ababa']], ['Bahir Dar', ['Africa/Addis_Ababa']], ['Hawassa', ['Africa/Addis_Ababa']], ['Addis Ababa', ['Africa/Addis_Ababa']], ['Vantaa', ['Europe/Helsinki']], ['Turku', ['Europe/Helsinki']], ['Tampere', ['Europe/Helsinki']], ['Oulu', ['Europe/Helsinki']], ['Lahti', ['Europe/Helsinki']], ['Kuopio', ['Europe/Helsinki']], ['Jyv\xE4skyl\xE4', ['Europe/Helsinki']], ['Helsinki', ['Europe/Helsinki']], ['Espoo', ['Europe/Helsinki']], ['Villeurbanne', ['Europe/Paris']], ['Tours', ['Europe/Paris']], ['Toulouse', ['Europe/Paris']], ['Toulon', ['Europe/Paris']], ['Strasbourg', ['Europe/Paris']], ['Saint-\xC9tienne', ['Europe/Paris']], ['Rouen', ['Europe/Paris']], ['Rennes', ['Europe/Paris']], ['Reims', ['Europe/Paris']], ['Perpignan', ['Europe/Paris']], ['Paris', ['Europe/Paris']], ['Orl\xE9ans', ['Europe/Paris']], ['N\xEEmes', ['Europe/Paris']], ['Nice', ['Europe/Paris']], ['Nantes', ['Europe/Paris']], ['Nancy', ['Europe/Paris']], ['Mulhouse', ['Europe/Paris']], ['Montpellier', ['Europe/Paris']], ['Metz', ['Europe/Paris']], ['Marseille', ['Europe/Paris']], ['Lyon', ['Europe/Paris']], ['Limoges', ['Europe/Paris']], ['Lille', ['Europe/Paris']], ['Le Mans', ['Europe/Paris']], ['Le Havre', ['Europe/Paris']], ['Grenoble', ['Europe/Paris']], ['Dijon', ['Europe/Paris']], ['Clermont-Ferrand', ['Europe/Paris']], ['Caen', ['Europe/Paris']], ['Boulogne-Billancourt', ['Europe/Paris']], ['Bordeaux', ['Europe/Paris']], ['Besan\xE7on', ['Europe/Paris']], ['Argenteuil', ['Europe/Paris']], ['Angers', ['Europe/Paris']], ['Amiens', ['Europe/Paris']], ['Aix-en-Provence', ['Europe/Paris']], ['Lyon 03', ['Europe/Paris']], ['Saint-Quentin-en-Yvelines', ['Europe/Paris']], ['Cergy-Pontoise', ['Europe/Paris']], ['Port-Gentil', ['Africa/Libreville']], ['Libreville', ['Africa/Libreville']], ['York', ['Europe/London']], ['Worcester', ['America/New_York', 'Africa/Johannesburg', 'Europe/London']], ['Wolverhampton', ['Europe/London']], ['Woking', ['Europe/London']], ['Wigan', ['Europe/London']], ['City of Westminster', ['Europe/London']], ['West Bromwich', ['Europe/London']], ['Watford', ['Europe/London']], ['Warrington', ['Europe/London']], ['Walthamstow', ['Europe/London']], ['Walsall', ['Europe/London']], ['Tottenham', ['Europe/London']], ['Swindon', ['Europe/London']], ['Swansea', ['Europe/London']], ['Sutton Coldfield', ['Europe/London']], ['Sutton', ['Europe/London']], ['Sunderland', ['Europe/London']], ['Stoke-on-Trent', ['Europe/London']], ['Stockport', ['Europe/London']], ['Southend-on-Sea', ['Europe/London']], ['Southampton', ['Europe/London']], ['Slough', ['Europe/London']], ['Sheffield', ['Europe/London']], ['Saint Peters', ['Europe/London']], ['St Helens', ['Europe/London']], ['Rotherham', ['Europe/London']], ['Reading', ['Europe/London']], ['Preston', ['Europe/London']], ['Portsmouth', ['Europe/London']], ['Poole', ['Europe/London']], ['Plymouth', ['Europe/London']], ['Peterborough', ['Europe/London']], ['Oxford', ['Europe/London']], ['Oldham', ['Europe/London']], ['Nottingham', ['Europe/London']], ['Norwich', ['Europe/London']], ['Northampton', ['Europe/London']], ['Newport', ['Europe/London']], ['Newcastle upon Tyne', ['Europe/London']], ['Newcastle under Lyme', ['Europe/London']], ['Milton Keynes', ['Europe/London']], ['Middlesbrough', ['Europe/London']], ['Mansfield', ['Europe/London']], ['Manchester', ['Europe/London', 'America/New_York']], ['Maidstone', ['Europe/London']], ['Luton', ['Europe/London']], ['Liverpool', ['Europe/London']], ['Lincoln', ['America/Chicago', 'Europe/London']], ['Leicester', ['Europe/London']], ['Leeds', ['Europe/London']], ['Kingston upon Hull', ['Europe/London']], ['Islington', ['Europe/London']], ['Ipswich', ['Europe/London']], ['Huddersfield', ['Europe/London']], ['High Wycombe', ['Europe/London']], ['Hastings', ['Europe/London']], ['Grimsby', ['Europe/London']], ['Gloucester', ['Europe/London']], ['Glasgow', ['Europe/London']], ['Gillingham', ['Europe/London']], ['Exeter', ['Europe/London']], ['Enfield Town', ['Europe/London']], ['Edinburgh', ['Europe/London']], ['Eastbourne', ['Europe/London']], ['Dundee', ['Europe/London']], ['Dudley', ['Europe/London']], ['Doncaster', ['Europe/London']], ['Derby', ['Europe/London']], ['Dagenham', ['Europe/London']], ['Croydon', ['Europe/London']], ['Crawley', ['Europe/London']], ['Coventry', ['Europe/London']], ['Colchester', ['Europe/London']], ['Chesterfield', ['Europe/London']], ['Cheltenham', ['Europe/London']], ['Chelmsford', ['Europe/London']], ['Cardiff', ['Europe/London']], ['Burton upon Trent', ['Europe/London']], ['Burnley', ['Europe/London']], ['Bristol', ['Europe/London']], ['Brighton', ['Europe/London']], ['Brent', ['Europe/London']], ['Bradford', ['Europe/London']], ['Bournemouth', ['Europe/London']], ['Bolton', ['Europe/London']], ['Blackpool', ['Europe/London']], ['Blackburn', ['Europe/London']], ['Birmingham', ['Europe/London', 'America/Chicago']], ['Birkenhead', ['Europe/London']], ['Bexley', ['Europe/London']], ['Belfast', ['Europe/London']], ['Bedford', ['Europe/London']], ['Basingstoke', ['Europe/London']], ['Basildon', ['Europe/London']], ['Aberdeen', ['Europe/London', 'Asia/Hong_Kong']], ['Telford', ['Europe/London']], ['Becontree', ['Europe/London']], ['Mendip', ['Europe/London']], ['Archway', ['Europe/London']], ['Tbilisi', ['Asia/Tbilisi']], ['Kutaisi', ['Asia/Tbilisi']], ['Batumi', ['Asia/Tbilisi']], ['Teshi Old Town', ['Africa/Accra']], ['Tema', ['Africa/Accra']], ['Tamale', ['Africa/Accra']], ['Takoradi', ['Africa/Accra']], ['Sekondi-Takoradi', ['Africa/Accra']], ['Obuase', ['Africa/Accra']], ['Medina Estates', ['Africa/Accra']], ['Kumasi', ['Africa/Accra']], ['Cape Coast', ['Africa/Accra']], ['Atsiaman', ['Africa/Accra']], ['Accra', ['Africa/Accra']], ['Serekunda', ['Africa/Banjul']], ['Nz\xE9r\xE9kor\xE9', ['Africa/Conakry']], ['Kindia', ['Africa/Conakry']], ['Kankan', ['Africa/Conakry']], ['Conakry', ['Africa/Conakry']], ['Camayenne', ['Africa/Conakry']], ['Malabo', ['Africa/Malabo']], ['Bata', ['Africa/Malabo']], ['Piraeus', ['Europe/Athens']], ['Perist\xE9ri', ['Europe/Athens']], ['P\xE1tra', ['Europe/Athens']], ['L\xE1risa', ['Europe/Athens']], ['Kallith\xE9a', ['Europe/Athens']], ['Ir\xE1kleion', ['Europe/Athens']], ['Athens', ['Europe/Athens', 'America/New_York']], ['Thessalon\xEDki', ['Europe/Athens']], ['Villa Nueva', ['America/Guatemala']], ['Villa Canales', ['America/Guatemala']], ['Totonicap\xE1n', ['America/Guatemala']], ['San Juan Sacatep\xE9quez', ['America/Guatemala']], ['Quetzaltenango', ['America/Guatemala']], ['Puerto Barrios', ['America/Guatemala']], ['Petapa', ['America/Guatemala']], ['Mixco', ['America/Guatemala']], ['Jutiapa', ['America/Guatemala']], ['Jalapa', ['America/Guatemala']], ['Escuintla', ['America/Guatemala']], ['Cob\xE1n', ['America/Guatemala']], ['Guatemala City', ['America/Guatemala']], ['Chiquimula', ['America/Guatemala']], ['Bissau', ['Africa/Bissau']], ['Georgetown', ['America/Guyana']], ['Tsuen Wan', ['Asia/Hong_Kong']], ['Yuen Long Kau Hui', ['Asia/Hong_Kong']], ['Tuen Mun', ['Asia/Hong_Kong']], ['Tsing Yi Town', ['Asia/Hong_Kong']], ['Tseung Kwan O', ['Asia/Hong_Kong']], ['Tin Shui Wai', ['Asia/Hong_Kong']], ['Tai Po', ['Asia/Hong_Kong']], ['Sha Tin', ['Asia/Hong_Kong']], ['Ma On Shan', ['Asia/Hong_Kong']], ['Kwai Chung', ['Asia/Hong_Kong']], ['Kowloon', ['Asia/Hong_Kong']], ['Hong Kong', ['Asia/Hong_Kong']], ['Fanling', ['Asia/Hong_Kong']], ['Tung Chung', ['Asia/Hong_Kong']], ['Tegucigalpa', ['America/Tegucigalpa']], ['San Pedro Sula', ['America/Tegucigalpa']], ['La Ceiba', ['America/Tegucigalpa']], ['El Progreso', ['America/Tegucigalpa']], ['Choloma', ['America/Tegucigalpa']], ['Zagreb', ['Europe/Zagreb']], ['Split', ['Europe/Zagreb']], ['Rijeka', ['Europe/Zagreb']], ['Port-de-Paix', ['America/Port-au-Prince']], ['Port-au-Prince', ['America/Port-au-Prince']], ['Tigwav', ['America/Port-au-Prince']], ['P\xE9tionville', ['America/Port-au-Prince']], ['L\xE9og\xE2ne', ['America/Port-au-Prince']], ['Jacmel', ['America/Port-au-Prince']], ['Delmas 73', ['America/Port-au-Prince']], ['Croix-des-Bouquets', ['America/Port-au-Prince']], ['Les Cayes', ['America/Port-au-Prince']], ['Carrefour', ['America/Port-au-Prince']], ['Okap', ['America/Port-au-Prince']], ['Szeged', ['Europe/Budapest']], ['Ny\xEDregyh\xE1za', ['Europe/Budapest']], ['Miskolc', ['Europe/Budapest']], ['Debrecen', ['Europe/Budapest']], ['Zugl\xF3', ['Europe/Budapest']], ['Sz\xE9kesfeh\xE9rv\xE1r', ['Europe/Budapest']], ['P\xE9cs', ['Europe/Budapest']], ['Kecskem\xE9t', ['Europe/Budapest']], ['Gy\u0151r', ['Europe/Budapest']], ['Budapest', ['Europe/Budapest']], ['Budapest XI. ker\xFClet', ['Europe/Budapest']], ['Budapest XIII. ker\xFClet', ['Europe/Budapest']], ['Budapest III. ker\xFClet', ['Europe/Budapest']], ['Tebingtinggi', ['Asia/Jakarta']], ['Tanjungbalai', ['Asia/Jakarta']], ['Sunggal', ['Asia/Jakarta']], ['Rantauprapat', ['Asia/Jakarta']], ['Percut', ['Asia/Jakarta']], ['Perbaungan', ['Asia/Jakarta']], ['Pematangsiantar', ['Asia/Jakarta']], ['Padangsidempuan', ['Asia/Jakarta']], ['Medan', ['Asia/Jakarta']], ['Lhokseumawe', ['Asia/Jakarta']], ['Langsa', ['Asia/Jakarta']], ['Kisaran', ['Asia/Jakarta']], ['Binjai', ['Asia/Jakarta']], ['Belawan', ['Asia/Jakarta']], ['Banda Aceh', ['Asia/Jakarta']], ['Yogyakarta', ['Asia/Jakarta']], ['Weru', ['Asia/Jakarta']], ['Ungaran', ['Asia/Jakarta']], ['Makassar', ['Asia/Makassar']], ['Ternate', ['Asia/Jayapura']], ['Tegal', ['Asia/Jakarta']], ['Tasikmalaya', ['Asia/Jakarta']], ['Tarakan', ['Asia/Makassar']], ['Tanjung Pinang', ['Asia/Jakarta']], ['Tanjung Pandan', ['Asia/Jakarta']], ['Bandar Lampung', ['Asia/Jakarta']], ['Tangerang', ['Asia/Jakarta']], ['Surakarta', ['Asia/Jakarta']], ['Surabaya', ['Asia/Jakarta']], ['Sumedang Utara', ['Asia/Jakarta']], ['Sumedang', ['Asia/Jakarta']], ['Sukabumi', ['Asia/Jakarta']], ['Sorong', ['Asia/Jayapura']], ['Soreang', ['Asia/Jakarta']], ['Situbondo', ['Asia/Jakarta']], ['Singosari', ['Asia/Jakarta']], ['Singkawang', ['Asia/Pontianak']], ['Singaraja', ['Asia/Makassar']], ['Sidoarjo', ['Asia/Jakarta']], ['Serang', ['Asia/Jakarta']], ['Sepatan', ['Asia/Jakarta']], ['Semarang', ['Asia/Jakarta']], ['Sawangan', ['Asia/Jakarta']], ['Samarinda', ['Asia/Makassar']], ['Salatiga', ['Asia/Jakarta']], ['Rengasdengklok', ['Asia/Jakarta']], ['Rangkasbitung', ['Asia/Jakarta']], ['Purwokerto', ['Asia/Jakarta']], ['Purwodadi', ['Asia/Jakarta']], ['Purwakarta', ['Asia/Jakarta']], ['Probolinggo', ['Asia/Jakarta']], ['Pontianak', ['Asia/Pontianak']], ['Plumbon', ['Asia/Jakarta']], ['Prabumulih', ['Asia/Jakarta']], ['Pemalang', ['Asia/Jakarta']], ['Pekanbaru', ['Asia/Jakarta']], ['Pekalongan', ['Asia/Jakarta']], ['Payakumbuh', ['Asia/Jakarta']], ['Pati', ['Asia/Jakarta']], ['Pasuruan', ['Asia/Jakarta']], ['Paseh', ['Asia/Jakarta']], ['Pasarkemis', ['Asia/Jakarta']], ['Parung', ['Asia/Jakarta']], ['Parepare', ['Asia/Makassar']], ['Pangkalpinang', ['Asia/Jakarta']], ['Pamulang', ['Asia/Jakarta']], ['Pamanukan', ['Asia/Jakarta']], ['Palu', ['Asia/Makassar']], ['Palopo', ['Asia/Makassar']], ['Palembang', ['Asia/Jakarta']], ['Palangkaraya', ['Asia/Pontianak']], ['Padang', ['Asia/Jakarta']], ['Mojokerto', ['Asia/Jakarta']], ['Metro', ['Asia/Jakarta']], ['Mataram', ['Asia/Makassar']], ['Martapura', ['Asia/Makassar']], ['Manokwari', ['Asia/Jayapura']], ['Manado', ['Asia/Makassar']], ['Malang', ['Asia/Jakarta']], ['Magelang', ['Asia/Jakarta']], ['Madiun', ['Asia/Jakarta']], ['Lumajang', ['Asia/Jakarta']], ['Lubuklinggau', ['Asia/Jakarta']], ['Loa Janan', ['Asia/Makassar']], ['Lembang', ['Asia/Jakarta']], ['Lawang', ['Asia/Jakarta']], ['Labuan Bajo', ['Asia/Makassar']], ['Kresek', ['Asia/Jakarta']], ['Klaten', ['Asia/Jakarta']], ['Kendari', ['Asia/Makassar']], ['Kedungwuni', ['Asia/Jakarta']], ['Kediri', ['Asia/Jakarta']], ['Jombang', ['Asia/Jakarta']], ['Jember', ['Asia/Jakarta']], ['Jambi City', ['Asia/Jakarta']], ['Jakarta', ['Asia/Jakarta']], ['Indramayu', ['Asia/Jakarta']], ['Grogol', ['Asia/Jakarta']], ['Gorontalo', ['Asia/Makassar']], ['Dumai', ['Asia/Jakarta']], ['Depok', ['Asia/Jakarta']], ['Denpasar', ['Asia/Makassar']], ['Curug', ['Asia/Jakarta']], ['Citeureup', ['Asia/Jakarta']], ['Cirebon', ['Asia/Jakarta']], ['Ciputat', ['Asia/Jakarta']], ['Cimahi', ['Asia/Jakarta']], ['Cileunyi', ['Asia/Jakarta']], ['Cileungsir', ['Asia/Jakarta']], ['Cilacap', ['Asia/Jakarta']], ['Cikarang', ['Asia/Jakarta']], ['Cikampek', ['Asia/Jakarta']], ['Cibinong', ['Asia/Jakarta']], ['Ciamis', ['Asia/Jakarta']], ['Ciampea', ['Asia/Jakarta']], ['Bontang', ['Asia/Makassar']], ['Bogor', ['Asia/Jakarta']], ['Blitar', ['Asia/Jakarta']], ['Bima', ['Asia/Makassar']], ['Bengkulu', ['Asia/Jakarta']], ['Bekasi', ['Asia/Jakarta']], ['Baubau', ['Asia/Makassar']], ['Baturaja', ['Asia/Jakarta']], ['Batu', ['Asia/Jakarta']], ['Batang', ['Asia/Jakarta']], ['Banyuwangi', ['Asia/Jakarta']], ['Banjarmasin', ['Asia/Makassar']], ['Banjaran', ['Asia/Jakarta']], ['Banjar', ['Asia/Jakarta']], ['Bangil', ['Asia/Jakarta']], ['Bandung', ['Asia/Jakarta']], ['Balikpapan', ['Asia/Makassar']], ['Astanajapura', ['Asia/Jakarta']], ['Arjawinangun', ['Asia/Jakarta']], ['Ambon', ['Asia/Jayapura']], ['Adiwerna', ['Asia/Jakarta']], ['Padalarang', ['Asia/Jakarta']], ['Cikupa', ['Asia/Jakarta']], ['Teluknaga', ['Asia/Jakarta']], ['Kupang', ['Asia/Makassar']], ['Merauke', ['Asia/Jayapura']], ['Jayapura', ['Asia/Jayapura']], ['Batam', ['Asia/Jakarta']], ['South Tangerang', ['Asia/Jakarta']], ['Dublin', ['Europe/Dublin']], ['Cork', ['Europe/Dublin']], ['South Dublin', ['Europe/Dublin']], ['Jerusalem', ['Asia/Jerusalem']], ['Jaffa', ['Asia/Jerusalem']], ['Tel Aviv', ['Asia/Jerusalem']], ['Rishon LeTsiyyon', ['Asia/Jerusalem']], ['Re\u1E96ovot', ['Asia/Jerusalem']], ['Ramat Gan', ['Asia/Jerusalem']], ['Peta\u1E96 Tiqva', ['Asia/Jerusalem']], ['Netanya', ['Asia/Jerusalem']], ['Kfar Saba', ['Asia/Jerusalem']], ['H\u0331olon', ['Asia/Jerusalem']], ['Haifa', ['Asia/Jerusalem']], ['Bet Shemesh', ['Asia/Jerusalem']], ['Bnei Brak', ['Asia/Jerusalem']], ['Beersheba', ['Asia/Jerusalem']], ['Bat Yam', ['Asia/Jerusalem']], ['Ashkelon', ['Asia/Jerusalem']], ['Ashdod', ['Asia/Jerusalem']], ['West Jerusalem', ['Asia/Jerusalem']], ['Yelahanka', ['Asia/Kolkata']], ['Yavatm\u0101l', ['Asia/Kolkata']], ['Yavatmal', ['Asia/Kolkata']], ['Yamun\u0101nagar', ['Asia/Kolkata']], ['Yamunanagar', ['Asia/Kolkata']], ['Wardha', ['Asia/Kolkata']], ['Warangal', ['Asia/Kolkata']], ['Vizianagaram', ['Asia/Kolkata']], ['Visakhapatnam', ['Asia/Kolkata']], ['Vir\u0101r', ['Asia/Kolkata']], ['Virar', ['Asia/Kolkata']], ['Vijayawada', ['Asia/Kolkata']], ['Vidisha', ['Asia/Kolkata']], ['Ver\u0101val', ['Asia/Kolkata']], ['Veraval', ['Asia/Kolkata']], ['Vellore', ['Asia/Kolkata']], ['Vejalpur', ['Asia/Kolkata']], ['Vasco da Gama', ['Asia/Kolkata']], ['Varanasi', ['Asia/Kolkata']], ['Vadodara', ['Asia/Kolkata']], ['Uppal Kalan', ['Asia/Kolkata']], ['Unn\u0101o', ['Asia/Kolkata']], ['Unnao', ['Asia/Kolkata']], ['Ulhasnagar', ['Asia/Kolkata']], ['Ujjain', ['Asia/Kolkata']], ['Udupi', ['Asia/Kolkata']], ['Udg\u012Br', ['Asia/Kolkata']], ['Udgir', ['Asia/Kolkata']], ['Udaipur', ['Asia/Kolkata']], ['Tumk\u016Br', ['Asia/Kolkata']], ['Tumkur', ['Asia/Kolkata']], ['Tonk', ['Asia/Kolkata']], ['Tit\u0101garh', ['Asia/Kolkata']], ['Titagarh', ['Asia/Kolkata']], ['Tiruvottiy\u016Br', ['Asia/Kolkata']], ['Tiruvottiyur', ['Asia/Kolkata']], ['Tiruvann\u0101malai', ['Asia/Kolkata']], ['Tiruvannamalai', ['Asia/Kolkata']], ['Tiruppur', ['Asia/Kolkata']], ['Tirupati', ['Asia/Kolkata']], ['Tirunelveli', ['Asia/Kolkata']], ['Tiruchirappalli', ['Asia/Kolkata']], ['Thrissur', ['Asia/Kolkata']], ['Thoothukudi', ['Asia/Kolkata']], ['Thiruvananthapuram', ['Asia/Kolkata']], ['Th\u0101nesar', ['Asia/Kolkata']], ['Thanesar', ['Asia/Kolkata']], ['Th\u0101ne', ['Asia/Kolkata']], ['Thane', ['Asia/Kolkata']], ['Teni', ['Asia/Kolkata']], ['Tanjore', ['Asia/Kolkata']], ['Tambaram', ['Asia/Kolkata']], ['T\u0101depalleg\u016Bdem', ['Asia/Kolkata']], ['Tadepallegudem', ['Asia/Kolkata']], ['Suri\u0101pet', ['Asia/Kolkata']], ['Suriapet', ['Asia/Kolkata']], ['Surendranagar', ['Asia/Kolkata']], ['Surat', ['Asia/Kolkata']], ['Sult\u0101npur', ['Asia/Kolkata']], ['Sultanpur', ['Asia/Kolkata']], ['S\u016Bj\u0101ngarh', ['Asia/Kolkata']], ['Sujangarh', ['Asia/Kolkata']], ['Srinagar', ['Asia/Kolkata']], ['Srikakulam', ['Asia/Kolkata']], ['Soy\u012Bbug', ['Asia/Kolkata']], ['Son\u012Bpat', ['Asia/Kolkata']], ['Sonipat', ['Asia/Kolkata']], ['Sol\u0101pur', ['Asia/Kolkata']], ['Solapur', ['Asia/Kolkata']], ['Soibugh', ['Asia/Kolkata']], ['Siw\u0101n', ['Asia/Kolkata']], ['Siwan', ['Asia/Kolkata']], ['Sivakasi', ['Asia/Kolkata']], ['S\u012Bt\u0101pur', ['Asia/Kolkata']], ['Sitapur', ['Asia/Kolkata']], ['Sirsa', ['Asia/Kolkata']], ['Singrauli', ['Asia/Kolkata']], ['Silvassa', ['Asia/Kolkata']], ['Siliguri', ['Asia/Kolkata']], ['Silchar', ['Asia/Kolkata']], ['S\u012Bkar', ['Asia/Kolkata']], ['Sikar', ['Asia/Kolkata']], ['Shyamnagar', ['Asia/Kolkata']], ['Shr\u012Br\u0101mpur', ['Asia/Kolkata']], ['Shrirampur', ['Asia/Kolkata']], ['Shivpuri', ['Asia/Kolkata']], ['Shivaji Nagar', ['Asia/Kolkata']], ['Shimoga', ['Asia/Kolkata']], ['Shimla', ['Asia/Kolkata']], ['Shillong', ['Asia/Kolkata']], ['Sh\u0101ntipur', ['Asia/Kolkata']], ['Shantipur', ['Asia/Kolkata']], ['Sh\u0101hj\u0101npur', ['Asia/Kolkata']], ['Shahjanpur', ['Asia/Kolkata']], ['Serilingampalle', ['Asia/Kolkata']], ['Seoni', ['Asia/Kolkata']], ['Secunderabad', ['Asia/Kolkata']], ['Saw\u0101i M\u0101dhopur', ['Asia/Kolkata']], ['Sawai Madhopur', ['Asia/Kolkata']], ['Saugor', ['Asia/Kolkata']], ['Satna', ['Asia/Kolkata']], ['Satara', ['Asia/Kolkata']], ['S\u0101ngli', ['Asia/Kolkata']], ['Sangli', ['Asia/Kolkata']], ['Sambhal', ['Asia/Kolkata']], ['Sambalpur', ['Asia/Kolkata']], ['Salem', ['Asia/Kolkata', 'America/Los_Angeles']], ['Saharsa', ['Asia/Kolkata']], ['Sah\u0101ranpur', ['Asia/Kolkata']], ['Saharanpur', ['Asia/Kolkata']], ['Roorkee', ['Asia/Kolkata']], ['Rohtak', ['Asia/Kolkata']], ['Rohini', ['Asia/Kolkata']], ['Robertsonpet', ['Asia/Kolkata']], ['Rishra', ['Asia/Kolkata']], ['Rew\u0101ri', ['Asia/Kolkata']], ['Rewari', ['Asia/Kolkata']], ['Rewa', ['Asia/Kolkata']], ['Raurkela', ['Asia/Kolkata']], ['Ratl\u0101m', ['Asia/Kolkata']], ['Ratlam', ['Asia/Kolkata']], ['R\u0101nipet', ['Asia/Kolkata']], ['Ranipet', ['Asia/Kolkata']], ['R\u0101n\u012Bganj', ['Asia/Kolkata']], ['Raniganj', ['Asia/Kolkata']], ['Ranchi', ['Asia/Kolkata']], ['R\u0101mpur', ['Asia/Kolkata']], ['Rampur', ['Asia/Kolkata']], ['R\u0101mgundam', ['Asia/Kolkata']], ['Ramagundam', ['Asia/Kolkata']], ['Rajpur Sonarpur', ['Asia/Kolkata']], ['Rajnandgaon', ['Asia/Kolkata']], ['R\u0101jkot', ['Asia/Kolkata']], ['Rajkot', ['Asia/Kolkata']], ['Rajapalaiyam', ['Asia/Kolkata']], ['R\u0101jahmundry', ['Asia/Kolkata']], ['Rajahmundry', ['Asia/Kolkata']], ['R\u0101j-N\u0101ndgaon', ['Asia/Kolkata']], ['Raipur', ['Asia/Kolkata']], ['Raigarh', ['Asia/Kolkata']], ['R\u0101iganj', ['Asia/Kolkata']], ['Raiganj', ['Asia/Kolkata']], ['R\u0101ich\u016Br', ['Asia/Kolkata']], ['Raichur', ['Asia/Kolkata']], ['Raebareli', ['Asia/Kolkata']], ['Quthbullapur', ['Asia/Kolkata']], ['Puruliya', ['Asia/Kolkata']], ['Purnia', ['Asia/Kolkata']], ['Puri', ['Asia/Kolkata']], ['Pune', ['Asia/Kolkata']], ['Pun\u0101sa', ['Asia/Kolkata']], ['Punasa', ['Asia/Kolkata']], ['Pudukkottai', ['Asia/Kolkata']], ['Puducherry', ['Asia/Kolkata']], ['Proddat\u016Br', ['Asia/Kolkata']], ['Proddatur', ['Asia/Kolkata']], ['Port Blair', ['Asia/Kolkata']], ['Porbandar', ['Asia/Kolkata']], ['Ponn\u0101ni', ['Asia/Kolkata']], ['Ponnani', ['Asia/Kolkata']], ['Pondicherry', ['Asia/Kolkata']], ['Pimpri', ['Asia/Kolkata']], ['P\u012Blibh\u012Bt', ['Asia/Kolkata']], ['Pilibhit', ['Asia/Kolkata']], ['Phusro', ['Asia/Kolkata']], ['Phagw\u0101ra', ['Asia/Kolkata']], ['Phagwara', ['Asia/Kolkata']], ['Patna', ['Asia/Kolkata']], ['Pati\u0101la', ['Asia/Kolkata']], ['Patiala', ['Asia/Kolkata']], ['Path\u0101nkot', ['Asia/Kolkata']], ['Pathankot', ['Asia/Kolkata']], ['Patan', ['Asia/Kathmandu']], ['P\u0101tan', ['Asia/Kathmandu', 'Asia/Kolkata']], ['Parbhani', ['Asia/Kolkata']], ['Panvel', ['Asia/Kolkata']], ['P\u0101n\u012Bpat', ['Asia/Kolkata']], ['Panipat', ['Asia/Kolkata']], ['P\u0101nih\u0101ti', ['Asia/Kolkata']], ['Panihati', ['Asia/Kolkata']], ['Panaji', ['Asia/Kolkata']], ['Panchkula', ['Asia/Kolkata']], ['Palwal', ['Asia/Kolkata']], ['Pall\u0101varam', ['Asia/Kolkata']], ['Pallavaram', ['Asia/Kolkata']], ['P\u0101li', ['Asia/Kolkata']], ['Pali', ['Asia/Kolkata']], ['P\u0101lgh\u0101t', ['Asia/Kolkata']], ['Palghat', ['Asia/Kolkata']], ['P\u0101lanpur', ['Asia/Kolkata']], ['Palanpur', ['Asia/Kolkata']], ['Orai', ['Asia/Kolkata']], ['Ooty', ['Asia/Kolkata']], ['Ongole', ['Asia/Kolkata']], ['Nowrangapur', ['Asia/Kolkata']], ['Noida', ['Asia/Kolkata']], ['Niz\u0101m\u0101b\u0101d', ['Asia/Kolkata']], ['Nizamabad', ['Asia/Kolkata']], ['Neyveli', ['Asia/Kolkata']], ['New Delhi', ['Asia/Kolkata']], ['Nellore', ['Asia/Kolkata']], ['Navsari', ['Asia/Kolkata']], ['Navi Mumbai', ['Asia/Kolkata']], ['Navadw\u012Bp', ['Asia/Kolkata']], ['Navadwip', ['Asia/Kolkata']], ['Nashik', ['Asia/Kolkata']], ['Narela', ['Asia/Kolkata']], ['N\u0101ngloi J\u0101t', ['Asia/Kolkata']], ['Nangloi Jat', ['Asia/Kolkata']], ['Nandy\u0101l', ['Asia/Kolkata']], ['Nandyal', ['Asia/Kolkata']], ['Nandurbar', ['Asia/Kolkata']], ['Nanded', ['Asia/Kolkata']], ['Nalgonda', ['Asia/Kolkata']], ['Najafgarh', ['Asia/Kolkata']], ['Naih\u0101ti', ['Asia/Kolkata']], ['Naihati', ['Asia/Kolkata']], ['Nagpur', ['Asia/Kolkata']], ['N\u0101gercoil', ['Asia/Kolkata']], ['Nagercoil', ['Asia/Kolkata']], ['Nagda', ['Asia/Kolkata']], ['Nadi\u0101d', ['Asia/Kolkata']], ['Nadiad', ['Asia/Kolkata']], ['Mysore', ['Asia/Kolkata']], ['Muzaffarpur', ['Asia/Kolkata']], ['Muzaffarnagar', ['Asia/Kolkata']], ['Murw\u0101ra', ['Asia/Kolkata']], ['Murwara', ['Asia/Kolkata']], ['Mumbai', ['Asia/Kolkata']], ['Mulugu', ['Asia/Kolkata']], ['Motihari', ['Asia/Kolkata']], ['Moth\u012Bh\u0101ri', ['Asia/Kolkata']], ['Mormugao', ['Asia/Kolkata']], ['Morena', ['Asia/Kolkata']], ['Morbi', ['Asia/Kolkata']], ['Mor\u0101d\u0101b\u0101d', ['Asia/Kolkata']], ['Moradabad', ['Asia/Kolkata']], ['Monghyr', ['Asia/Kolkata']], ['Mohali', ['Asia/Kolkata']], ['Moga', ['Asia/Kolkata']], ['Mirz\u0101pur', ['Asia/Kolkata']], ['Mirzapur', ['Asia/Kolkata']], ['Miryalaguda', ['Asia/Kolkata']], ['Miri\u0101lg\u016Bda', ['Asia/Kolkata']], ['Meerut', ['Asia/Kolkata']], ['Medin\u012Bpur', ['Asia/Kolkata']], ['Medinipur', ['Asia/Kolkata']], ['Mau', ['Asia/Kolkata']], ['Mathura', ['Asia/Kolkata']], ['Mangalore', ['Asia/Kolkata']], ['Mandya', ['Asia/Kolkata']], ['Mandsaur', ['Asia/Kolkata']], ['Malkajgiri', ['Asia/Kolkata']], ['M\u0101ler Kotla', ['Asia/Kolkata']], ['Maler kotla', ['Asia/Kolkata']], ['M\u0101legaon', ['Asia/Kolkata']], ['Malegaon', ['Asia/Kolkata']], ['Malappuram', ['Asia/Kolkata']], ['Maheshtala', ['Asia/Kolkata']], ['Mahb\u016Bbnagar', ['Asia/Kolkata']], ['Mahbubnagar', ['Asia/Kolkata']], ['Madurai', ['Asia/Kolkata']], ['Madras', ['Asia/Kolkata']], ['Madhyamgram', ['Asia/Kolkata']], ['Madanapalle', ['Asia/Kolkata']], ['Machil\u012Bpatnam', ['Asia/Kolkata']], ['Machilipatnam', ['Asia/Kolkata']], ['Ludhi\u0101na', ['Asia/Kolkata']], ['Ludhiana', ['Asia/Kolkata']], ['Lucknow', ['Asia/Kolkata']], ['Loni', ['Asia/Kolkata']], ['Leh', ['Asia/Kolkata']], ['Latur', ['Asia/Kolkata']], ['Lalitpur', ['Asia/Kolkata']], ['Lal Bahadur Nagar', ['Asia/Kolkata']], ['Lakh\u012Bmpur', ['Asia/Kolkata']], ['Lakhimpur', ['Asia/Kolkata']], ['Ladakh', ['Asia/Kolkata']], ['Kurnool', ['Asia/Kolkata']], ['Kumbakonam', ['Asia/Kolkata']], ['Kumarapalayam', ['Asia/Kolkata']], ['Kulti', ['Asia/Kolkata']], ['K\u016Bkatpalli', ['Asia/Kolkata']], ['Kukatpalli', ['Asia/Kolkata']], ['Krishnanagar', ['Asia/Kolkata']], ['Kozhikode', ['Asia/Kolkata']], ['Kota', ['Asia/Kolkata']], ['Korba', ['Asia/Kolkata']], ['Kollam', ['Asia/Kolkata']], ['Kolkata', ['Asia/Kolkata']], ['Kolh\u0101pur', ['Asia/Kolkata']], ['Kolhapur', ['Asia/Kolkata']], ['Kol\u0101r', ['Asia/Kolkata']], ['Kolar', ['Asia/Kolkata']], ['Kohima', ['Asia/Kolkata']], ['Kishangarh', ['Asia/Kolkata']], ['Khurja', ['Asia/Kolkata']], ['Khardah', ['Asia/Kolkata']], ['Kharagpur', ['Asia/Kolkata']], ['Khanna', ['Asia/Kolkata']], ['Khandwa', ['Asia/Kolkata']], ['Khammam', ['Asia/Kolkata']], ['Kavaratti', ['Asia/Kolkata']], ['Katihar', ['Asia/Kolkata']], ['Kashipur', ['Asia/Kolkata']], ['Karur', ['Asia/Kolkata']], ['Karol B\u0101gh', ['Asia/Kolkata']], ['Karol Bagh', ['Asia/Kolkata']], ['Karn\u0101l', ['Asia/Kolkata']], ['Karnal', ['Asia/Kolkata']], ['Kar\u012Bmnagar', ['Asia/Kolkata']], ['Karimnagar', ['Asia/Kolkata']], ['Kargil', ['Asia/Kolkata']], ['Karaikudi', ['Asia/Kolkata']], ['K\u0101raikkudi', ['Asia/Kolkata']], ['Kanpur', ['Asia/Kolkata']], ['K\u0101nchr\u0101p\u0101ra', ['Asia/Kolkata']], ['Kanchrapara', ['Asia/Kolkata']], ['Kanchipuram', ['Asia/Kolkata']], ['K\u0101m\u0101rh\u0101ti', ['Asia/Kolkata']], ['Kamarhati', ['Asia/Kolkata']], ['Kaly\u0101n', ['Asia/Kolkata']], ['Kalyan', ['Asia/Kolkata']], ['Kallakurichi', ['Asia/Kolkata']], ['K\u0101kin\u0101da', ['Asia/Kolkata']], ['Kakinada', ['Asia/Kolkata']], ['Kaithal', ['Asia/Kolkata']], ['J\u016Bn\u0101gadh', ['Asia/Kolkata']], ['Junagadh', ['Asia/Kolkata']], ['Jodhpur', ['Asia/Kolkata']], ['J\u012Bnd', ['Asia/Kolkata']], ['Jind', ['Asia/Kolkata']], ['Jhunjhun\u016Bn', ['Asia/Kolkata']], ['Jhunjhunun', ['Asia/Kolkata']], ['Jh\u0101nsi', ['Asia/Kolkata']], ['Jhansi', ['Asia/Kolkata']], ['Jetpur', ['Asia/Kolkata']], ['Jaunpur', ['Asia/Kolkata']], ['J\u0101muria', ['Asia/Kolkata']], ['Jamuria', ['Asia/Kolkata']], ['Jamshedpur', ['Asia/Kolkata']], ['Jamnagar', ['Asia/Kolkata']], ['Jammu', ['Asia/Kolkata']], ['Jalp\u0101iguri', ['Asia/Kolkata']], ['Jalpaiguri', ['Asia/Kolkata']], ['J\u0101lna', ['Asia/Kolkata']], ['Jalna', ['Asia/Kolkata']], ['Jalgaon', ['Asia/Kolkata']], ['Jalandhar', ['Asia/Kolkata']], ['Jaipur', ['Asia/Kolkata']], ['Jaigaon', ['Asia/Kolkata']], ['Jag\u0101dhri', ['Asia/Kolkata']], ['Jagadhri', ['Asia/Kolkata']], ['Jabalpur', ['Asia/Kolkata']], ['It\u0101rsi', ['Asia/Kolkata']], ['Itarsi', ['Asia/Kolkata']], ['Itanagar', ['Asia/Kolkata']], ['Ingr\u0101j B\u0101z\u0101r', ['Asia/Kolkata']], ['Ingraj Bazar', ['Asia/Kolkata']], ['Indore', ['Asia/Kolkata']], ['Imph\u0101l', ['Asia/Kolkata']], ['Imphal', ['Asia/Kolkata']], ['Ichalkaranji', ['Asia/Kolkata']], ['Hyder\u0101b\u0101d', ['Asia/Kolkata']], ['Hugli', ['Asia/Kolkata']], ['Hubli', ['Asia/Kolkata']], ['Hos\u016Br', ['Asia/Kolkata']], ['Hosur', ['Asia/Kolkata']], ['Hospet', ['Asia/Kolkata']], ['Hoshi\u0101rpur', ['Asia/Kolkata']], ['Hoshiarpur', ['Asia/Kolkata']], ['Hoshang\u0101b\u0101d', ['Asia/Kolkata']], ['Hoshangabad', ['Asia/Kolkata']], ['Hisar', ['Asia/Kolkata']], ['Hindupur', ['Asia/Kolkata']], ['Haz\u0101rib\u0101gh', ['Asia/Kolkata']], ['Hazaribagh', ['Asia/Kolkata']], ['H\u0101thras', ['Asia/Kolkata']], ['Hathras', ['Asia/Kolkata']], ['Hassan', ['Asia/Kolkata']], ['Haridwar', ['Asia/Kolkata']], ['Hardo\u012B', ['Asia/Kolkata']], ['Hardoi', ['Asia/Kolkata']], ['H\u0101pur', ['Asia/Kolkata']], ['Hapur', ['Asia/Kolkata']], ['H\u0101ora', ['Asia/Kolkata']], ['Haora', ['Asia/Kolkata']], ['Hanum\u0101ngarh', ['Asia/Kolkata']], ['Hanumangarh', ['Asia/Kolkata']], ['H\u0101l\u012Bsahar', ['Asia/Kolkata']], ['Halisahar', ['Asia/Kolkata']], ['Haldwani', ['Asia/Kolkata']], ['Haldia', ['Asia/Kolkata']], ['H\u0101j\u012Bpur', ['Asia/Kolkata']], ['Hajipur', ['Asia/Kolkata']], ['H\u0101bra', ['Asia/Kolkata']], ['Habra', ['Asia/Kolkata']], ['Gy\u0101npur', ['Asia/Kolkata']], ['Gyanpur', ['Asia/Kolkata']], ['Gwalior', ['Asia/Kolkata']], ['Guwahati', ['Asia/Kolkata']], ['Gurgaon', ['Asia/Kolkata']], ['Guntur', ['Asia/Kolkata']], ['Guntakal Junction', ['Asia/Kolkata']], ['Guna', ['Asia/Kolkata']], ['Gulbarga', ['Asia/Kolkata']], ['Gudiv\u0101da', ['Asia/Kolkata']], ['Gudivada', ['Asia/Kolkata']], ['Greater Noida', ['Asia/Kolkata']], ['Gos\u0101ba', ['Asia/Kolkata']], ['Gosaba', ['Asia/Kolkata']], ['Gorakhpur', ['Asia/Kolkata']], ['Gondi\u0101', ['Asia/Kolkata']], ['Gondia', ['Asia/Kolkata']], ['Gondal', ['Asia/Kolkata']], ['Gond\u0101 City', ['Asia/Kolkata']], ['Gonda City', ['Asia/Kolkata']], ['Godhra', ['Asia/Kolkata']], ['Ghaz\u012Bpur', ['Asia/Kolkata']], ['Ghazipur', ['Asia/Kolkata']], ['Gh\u0101zi\u0101b\u0101d', ['Asia/Kolkata']], ['Ghaziabad', ['Asia/Kolkata']], ['Gaya', ['Asia/Kolkata']], ['Gangtok', ['Asia/Kolkata']], ['Gang\u0101wati', ['Asia/Kolkata']], ['Gangawati', ['Asia/Kolkata']], ['Gang\u0101pur', ['Asia/Kolkata']], ['Gangapur', ['Asia/Kolkata']], ['Gang\u0101nagar', ['Asia/Kolkata']], ['Ganganagar', ['Asia/Kolkata']], ['Gandhinagar', ['Asia/Kolkata']], ['G\u0101ndh\u012Bdh\u0101m', ['Asia/Kolkata']], ['Gandhidham', ['Asia/Kolkata']], ['Gajuwaka', ['Asia/Kolkata']], ['Gadag', ['Asia/Kolkata']], ['Gadag-Betageri', ['Asia/Kolkata']], ['Fyz\u0101b\u0101d', ['Asia/Kolkata']], ['Fyzabad', ['Asia/Kolkata']], ['F\u012Broz\u0101b\u0101d', ['Asia/Kolkata']], ['Firozabad', ['Asia/Kolkata']], ['Ferozepore', ['Asia/Kolkata']], ['Fatehpur', ['Asia/Kolkata']], ['Farrukh\u0101b\u0101d', ['Asia/Kolkata']], ['Farrukhabad', ['Asia/Kolkata']], ['Faridabad', ['Asia/Kolkata']], ['Et\u0101wah', ['Asia/Kolkata']], ['Etawah', ['Asia/Kolkata']], ['Erode', ['Asia/Kolkata']], ['Ellore', ['Asia/Kolkata']], ['Durgapur', ['Asia/Kolkata']], ['Durg', ['Asia/Kolkata']], ['Dombivli', ['Asia/Kolkata']], ['Dispur', ['Asia/Kolkata']], ['Dindigul', ['Asia/Kolkata']], ['Dinapore', ['Asia/Kolkata']], ['Dim\u0101pur', ['Asia/Kolkata']], ['Dimapur', ['Asia/Kolkata']], ['Dibrugarh', ['Asia/Kolkata']], ['Dh\u016Blia', ['Asia/Kolkata']], ['Dhulia', ['Asia/Kolkata']], ['Dhaulpur', ['Asia/Kolkata']], ['Dharmavaram', ['Asia/Kolkata']], ['Dharamshala', ['Asia/Kolkata']], ['Dhanbad', ['Asia/Kolkata']], ['Dewas', ['Asia/Kolkata']], ['Deoria', ['Asia/Kolkata']], ['Deoli', ['Asia/Kolkata']], ['Deoghar', ['Asia/Kolkata']], ['Delhi', ['Asia/Kolkata']], ['Dehri', ['Asia/Kolkata']], ['Dehradun', ['Asia/Kolkata']], ['Dehra D\u016Bn', ['Asia/Kolkata']], ['Davangere', ['Asia/Kolkata']], ['D\u0101rjiling', ['Asia/Kolkata']], ['Darjiling', ['Asia/Kolkata']], ['Darbhanga', ['Asia/Kolkata']], ['Damoh', ['Asia/Kolkata']], ['Daman', ['Asia/Kolkata']], ['Dam Dam', ['Asia/Kolkata']], ['Cuttack', ['Asia/Kolkata']], ['Cuddapah', ['Asia/Kolkata']], ['Cuddalore', ['Asia/Kolkata']], ['Coimbatore', ['Asia/Kolkata']], ['Cochin', ['Asia/Kolkata']], ['Ch\u016Bru', ['Asia/Kolkata']], ['Churu', ['Asia/Kolkata']], ['Chittaurgarh', ['Asia/Kolkata']], ['Chitradurga', ['Asia/Kolkata']], ['Chirmiri', ['Asia/Kolkata']], ['Chikmagal\u016Br', ['Asia/Kolkata']], ['Chikmagalur', ['Asia/Kolkata']], ['Chhindw\u0101ra', ['Asia/Kolkata']], ['Chhindwara', ['Asia/Kolkata']], ['Chhatarpur', ['Asia/Kolkata']], ['Chennai', ['Asia/Kolkata']], ['Ch\u0101s', ['Asia/Kolkata']], ['Chas', ['Asia/Kolkata']], ['Ch\u0101pra', ['Asia/Kolkata']], ['Chapra', ['Asia/Kolkata']], ['Chanduasi', ['Asia/Kolkata']], ['Chand\u012Bgarh', ['Asia/Kolkata']], ['Chandigarh', ['Asia/Kolkata']], ['Chandannagar', ['Asia/Kolkata']], ['Ch\u0101nda', ['Asia/Kolkata']], ['Chanda', ['Asia/Kolkata']], ['Calcutta', ['Asia/Kolkata']], ['Burh\u0101npur', ['Asia/Kolkata']], ['Burhanpur', ['Asia/Kolkata']], ['Bulandshahr', ['Asia/Kolkata']], ['Budaun', ['Asia/Kolkata']], ['Brahmapur', ['Asia/Kolkata']], ['Bot\u0101d', ['Asia/Kolkata']], ['Botad', ['Asia/Kolkata']], ['Borivli', ['Asia/Kolkata']], ['Bok\u0101ro', ['Asia/Kolkata']], ['Bokaro', ['Asia/Kolkata']], ['Bilimora', ['Asia/Kolkata']], ['Bil\u0101spur', ['Asia/Kolkata']], ['Bilaspur', ['Asia/Kolkata']], ['B\u012Bkaner', ['Asia/Kolkata']], ['Bikaner', ['Asia/Kolkata']], ['Bijapur', ['Asia/Kolkata']], ['Bih\u0101r Shar\u012Bf', ['Asia/Kolkata']], ['Bihar Sharif', ['Asia/Kolkata']], ['B\u012Bdar', ['Asia/Kolkata']], ['Bidar', ['Asia/Kolkata']], ['Bhus\u0101val', ['Asia/Kolkata']], ['Bhusaval', ['Asia/Kolkata']], ['Bhuj', ['Asia/Kolkata']], ['Bhubaneshwar', ['Asia/Kolkata']], ['Bhop\u0101l', ['Asia/Kolkata']], ['Bhopal', ['Asia/Kolkata']], ['Bhiw\u0101ni', ['Asia/Kolkata']], ['Bhiwani', ['Asia/Kolkata']], ['Bhiwandi', ['Asia/Kolkata']], ['Bhind', ['Asia/Kolkata']], ['Bh\u012Bmavaram', ['Asia/Kolkata']], ['Bhimavaram', ['Asia/Kolkata']], ['Bh\u012Blw\u0101ra', ['Asia/Kolkata']], ['Bhilwara', ['Asia/Kolkata']], ['Bhilai', ['Asia/Kolkata']], ['Bhayandar', ['Asia/Kolkata']], ['Bhavnagar', ['Asia/Kolkata']], ['Bh\u0101tp\u0101ra', ['Asia/Kolkata']], ['Bhatpara', ['Asia/Kolkata']], ['Bhar\u016Bch', ['Asia/Kolkata']], ['Bharuch', ['Asia/Kolkata']], ['Bharatpur', ['Asia/Kolkata', 'Asia/Kathmandu']], ['Bhararisain', ['Asia/Kolkata']], ['Bh\u0101galpur', ['Asia/Kolkata']], ['Bhagalpur', ['Asia/Kolkata']], ['Bhadreswar', ['Asia/Kolkata']], ['Bhadr\u0101vati', ['Asia/Kolkata']], ['Bhadravati', ['Asia/Kolkata']], ['Bettiah', ['Asia/Kolkata']], ['Bengaluru', ['Asia/Kolkata']], ['Bellary', ['Asia/Kolkata']], ['Belgaum', ['Asia/Kolkata']], ['Begusarai', ['Asia/Kolkata']], ['Be\u0101war', ['Asia/Kolkata']], ['Beawar', ['Asia/Kolkata']], ['Bathinda', ['Asia/Kolkata']], ['Bat\u0101la', ['Asia/Kolkata']], ['Batala', ['Asia/Kolkata']], ['Bast\u012B', ['Asia/Kolkata']], ['Basti', ['Asia/Kolkata']], ['B\u0101rsi', ['Asia/Kolkata']], ['Barsi', ['Asia/Kolkata']], ['Barn\u0101la', ['Asia/Kolkata']], ['Barnala', ['Asia/Kolkata']], ['Bareilly', ['Asia/Kolkata']], ['Barddham\u0101n', ['Asia/Kolkata']], ['Barddhaman', ['Asia/Kolkata']], ['B\u0101r\u0101sat', ['Asia/Kolkata']], ['Barasat', ['Asia/Kolkata']], ['Baranagar', ['Asia/Kolkata']], ['B\u0101r\u0101kpur', ['Asia/Kolkata']], ['Barakpur', ['Asia/Kolkata']], ['B\u0101nsb\u0101ria', ['Asia/Kolkata']], ['Bansbaria', ['Asia/Kolkata']], ['B\u0101nkura', ['Asia/Kolkata']], ['Bankura', ['Asia/Kolkata']], ['Bangaon', ['Asia/Kolkata']], ['Bangalore', ['Asia/Kolkata']], ['B\u0101nda', ['Asia/Kolkata']], ['Banda', ['Asia/Kolkata']], ['B\u0101lurgh\u0101t', ['Asia/Kolkata']], ['Balurghat', ['Asia/Kolkata']], ['B\u0101li', ['Asia/Kolkata']], ['Bali', ['Asia/Kolkata']], ['Balasore', ['Asia/Kolkata']], ['Baidyab\u0101ti', ['Asia/Kolkata']], ['Baidyabati', ['Asia/Kolkata']], ['Bahraigh', ['Asia/Kolkata']], ['Baharampur', ['Asia/Kolkata']], ['Bah\u0101durgarh', ['Asia/Kolkata']], ['Bahadurgarh', ['Asia/Kolkata']], ['Bagaha', ['Asia/Kolkata']], ['Badlapur', ['Asia/Kolkata']], ['Azamgarh', ['Asia/Kolkata']], ['\u0100vadi', ['Asia/Kolkata']], ['Avadi', ['Asia/Kolkata']], ['Aurangabad', ['Asia/Kolkata']], ['Ashoknagar Kalyangarh', ['Asia/Kolkata']], ['\u0100sansol', ['Asia/Kolkata']], ['Asansol', ['Asia/Kolkata']], ['Arrah', ['Asia/Kolkata']], ['Andrott', ['Asia/Kolkata']], ['Anantapur', ['Asia/Kolkata']], ['Anand', ['Asia/Kolkata']], ['Amroha', ['Asia/Kolkata']], ['Amritsar', ['Asia/Kolkata']], ['Amr\u0101vati', ['Asia/Kolkata']], ['Amravati', ['Asia/Kolkata']], ['Ambur', ['Asia/Kolkata']], ['Ambatt\u016Br', ['Asia/Kolkata']], ['Ambattur', ['Asia/Kolkata']], ['Amb\u0101la', ['Asia/Kolkata']], ['Ambala', ['Asia/Kolkata']], ['Amarn\u0101th', ['Asia/Kolkata']], ['Amarnath', ['Asia/Kolkata']], ['Amaravati', ['Asia/Kolkata']], ['Alwar', ['Asia/Kolkata']], ['Allah\u0101b\u0101d', ['Asia/Kolkata']], ['Allahabad', ['Asia/Kolkata']], ['Al\u012Bgarh', ['Asia/Kolkata']], ['Aligarh', ['Asia/Kolkata']], ['Alappuzha', ['Asia/Kolkata']], ['Alandur', ['Asia/Kolkata']], ['Akola', ['Asia/Kolkata']], ['Ajmer', ['Asia/Kolkata']], ['Aizawl', ['Asia/Kolkata']], ['Airoli', ['Asia/Kolkata']], ['Ahmedabad', ['Asia/Kolkata']], ['Ahmadnagar', ['Asia/Kolkata']], ['Agra', ['Asia/Kolkata']], ['Agartala', ['Asia/Kolkata']], ['\u0100doni', ['Asia/Kolkata']], ['Adoni', ['Asia/Kolkata']], ['\u0100dil\u0101b\u0101d', ['Asia/Kolkata']], ['Adilabad', ['Asia/Kolkata']], ['Achalpur', ['Asia/Kolkata']], ['Abohar', ['Asia/Kolkata']], ['Umm Qa\u015Fr', ['Asia/Baghdad']], ['S\u012Bnah', ['Asia/Baghdad']], ['S\u0101marr\u0101\u2019', ['Asia/Baghdad']], ['Kirkuk', ['Asia/Baghdad']], ['Karbala', ['Asia/Baghdad']], ['Erbil', ['Asia/Baghdad']], ['Soran', ['Asia/Baghdad']], ['Dihok', ['Asia/Baghdad']], ['Baqubah', ['Asia/Baghdad']], ['Baghdad', ['Asia/Baghdad']], ['Az Zubayr', ['Asia/Baghdad']], ['As Sulaym\u0101n\u012Byah', ['Asia/Baghdad']], ['As Samawah', ['Asia/Baghdad']], ['Ramadi', ['Asia/Baghdad']], ['Nasiriyah', ['Asia/Baghdad']], ['Najaf', ['Asia/Baghdad']], ['Al Maw\u015Fil al Jad\u012Bdah', ['Asia/Baghdad']], ['Mosul', ['Asia/Baghdad']], ['Al K\u016Bt', ['Asia/Baghdad']], ['Kufa', ['Asia/Baghdad']], ['Al \u1E28illah', ['Asia/Baghdad']], ['Al F\u0101w', ['Asia/Baghdad']], ['Al Fall\u016Bjah', ['Asia/Baghdad']], ['Basrah', ['Asia/Baghdad']], ['Al \u2018Am\u0101rah', ['Asia/Baghdad']], ['Ad D\u012Bw\u0101n\u012Byah', ['Asia/Baghdad']], ['Ab\u016B Ghurayb', ['Asia/Baghdad']], ['Al Ba\u015Frah al Qad\u012Bmah', ['Asia/Baghdad']], ['\u0100z\u0101dshahr', ['Asia/Tehran']], ['Kahr\u012Bz', ['Asia/Tehran']], ['Qarchak', ['Asia/Tehran']], ['Zanj\u0101n', ['Asia/Tehran']], ['Yazd', ['Asia/Tehran']], ['Var\u0101m\u012Bn', ['Asia/Tehran']], ['Torbat-e \u1E28eydar\u012Byeh', ['Asia/Tehran']], ['Tehran', ['Asia/Tehran']], ['Tabriz', ['Asia/Tehran']], ['Sirjan', ['Asia/Tehran']], ['Shiraz', ['Asia/Tehran']], ['Shahr-e Kord', ['Asia/Tehran']], ['Semnan', ['Asia/Tehran']], ['S\u0101veh', ['Asia/Tehran']], ['Sari', ['Asia/Tehran']], ['Saqqez', ['Asia/Tehran']], ['Sanandaj', ['Asia/Tehran']], ['Sabzevar', ['Asia/Tehran']], ['Rasht', ['Asia/Tehran']], ['Rafsanj\u0101n', ['Asia/Tehran']], ['Q\u016Bch\u0101n', ['Asia/Tehran']], ['Qom', ['Asia/Tehran']], ['Qazvin', ['Asia/Tehran']], ['P\u0101rs\u0101b\u0101d', ['Asia/Tehran']], ['Or\u016Bm\u012Byeh', ['Asia/Tehran']], ['Neysh\u0101b\u016Br', ['Asia/Tehran']], ['Naz\u0327ar\u0101b\u0101d', ['Asia/Tehran']], ['M\u012B\u0101ndo\u0101b', ['Asia/Tehran']], ['Masjed Soleym\u0101n', ['Asia/Tehran']], ['Mashhad', ['Asia/Tehran']], ['Marvdasht', ['Asia/Tehran']], ['Marand', ['Asia/Tehran']], ['Mal\u0101yer', ['Asia/Tehran']], ['Mah\u0101b\u0101d', ['Asia/Tehran']], ['K\u016Bhdasht', ['Asia/Tehran']], ['Khowy', ['Asia/Tehran']], ['Khorramshahr', ['Asia/Tehran']], ['Khorramabad', ['Asia/Tehran']], ['Kermanshah', ['Asia/Tehran']], ['Kerman', ['Asia/Tehran']], ['Karaj', ['Asia/Tehran']], ['\u012Al\u0101m', ['Asia/Tehran']], ['Hamad\u0101n', ['Asia/Tehran']], ['Gorg\u0101n', ['Asia/Tehran']], ['Gonbad-e K\u0101v\u016Bs', ['Asia/Tehran']], ['Shahrud', ['Asia/Tehran']], ['Bushehr', ['Asia/Tehran']], ['B\u016Bk\u0101n', ['Asia/Tehran']], ['Bor\u016Bjerd', ['Asia/Tehran']], ['Bojn\u016Brd', ['Asia/Tehran']], ['B\u012Brjand', ['Asia/Tehran']], ['B\u0101neh', ['Asia/Tehran']], ['Bandar-e Anzal\u012B', ['Asia/Tehran']], ['Bandar Abbas', ['Asia/Tehran']], ['B\u0101bol', ['Asia/Tehran']], ['Ardab\u012Bl', ['Asia/Tehran']], ['Ar\u0101k', ['Asia/Tehran']], ['\u0100mol', ['Asia/Tehran']], ['Ahvaz', ['Asia/Tehran']], ['Abadan', ['Asia/Tehran']], ['Najaf\u0101b\u0101d', ['Asia/Tehran']], ['Khomeyn\u012B Shahr', ['Asia/Tehran']], ['Isfahan', ['Asia/Tehran']], ['Z\u0101bol', ['Asia/Tehran']], ['Zahedan', ['Asia/Tehran']], ['Iranshahr', ['Asia/Tehran']], ['Pasragad Branch', ['Asia/Tehran']], ['Reykjav\xEDk', ['Atlantic/Reykjavik']], ['Siracusa', ['Europe/Rome']], ['Reggio Calabria', ['Europe/Rome']], ['Palermo', ['Europe/Rome']], ['Messina', ['Europe/Rome']], ['Catania', ['Europe/Rome']], ['Cagliari', ['Europe/Rome']], ['Vicenza', ['Europe/Rome']], ['Verona', ['Europe/Rome']], ['Udine', ['Europe/Rome']], ['Trieste', ['Europe/Rome']], ['Trento', ['Europe/Rome']], ['Turin', ['Europe/Rome']], ['Terni', ['Europe/Rome']], ['Taranto', ['Europe/Rome']], ['Salerno', ['Europe/Rome']], ['Rome', ['Europe/Rome']], ['Rimini', ['Europe/Rome']], ["Reggio nell'Emilia", ['Europe/Rome']], ['Prato', ['Europe/Rome']], ['Pisa', ['Europe/Rome']], ['Piacenza', ['Europe/Rome']], ['Pescara', ['Europe/Rome']], ['Perugia', ['Europe/Rome']], ['Parma', ['Europe/Rome']], ['Padova', ['Europe/Rome']], ['Novara', ['Europe/Rome']], ['Naples', ['Europe/Rome']], ['Monza', ['Europe/Rome']], ['Modena', ['Europe/Rome']], ['Milan', ['Europe/Rome']], ['Mestre', ['Europe/Rome']], ['Livorno', ['Europe/Rome']], ['Genoa', ['Europe/Rome']], ['Forl\xEC', ['Europe/Rome']], ['Foggia', ['Europe/Rome']], ['Florence', ['Europe/Rome']], ['Brescia', ['Europe/Rome']], ['Bolzano', ['Europe/Rome']], ['Bologna', ['Europe/Rome']], ['Bergamo', ['Europe/Rome']], ['Bari', ['Europe/Rome']], ['Arezzo', ['Europe/Rome']], ['Acilia-Castel Fusano-Ostia Antica', ['Europe/Rome']], ['Spanish Town', ['America/Jamaica']], ['Portmore', ['America/Jamaica']], ['New Kingston', ['America/Jamaica']], ['W\u0101d\u012B as S\u012Br', ['Asia/Amman']], ['Irbid', ['Asia/Amman']], ['Zarqa', ['Asia/Amman']], ['As Sal\u0163', ['Asia/Amman']], ['Ar Ramth\u0101', ['Asia/Amman']], ['Amman', ['Asia/Amman']], ['\u2018Ajl\u016Bn', ['Asia/Amman']], ['Russeifa', ['Asia/Amman']], ['Atsugi', ['Asia/Tokyo']], ['Akashi', ['Asia/Tokyo']], ['Zama', ['Asia/Tokyo']], ['Yono', ['Asia/Tokyo']], ['Yonago', ['Asia/Tokyo']], ['Yokosuka', ['Asia/Tokyo']], ['Yokohama', ['Asia/Tokyo']], ['Yokkaichi', ['Asia/Tokyo']], ['Honmachi', ['Asia/Tokyo']], ['Yao', ['Asia/Tokyo']], ['Yamaguchi', ['Asia/Tokyo']], ['Yaizu', ['Asia/Tokyo']], ['Utsunomiya', ['Asia/Tokyo']], ['Urayasu', ['Asia/Tokyo']], ['Uji', ['Asia/Tokyo']], ['Ueda', ['Asia/Tokyo']], ['Ube', ['Asia/Tokyo']], ['Tsuyama', ['Asia/Tokyo']], ['Tsuruoka', ['Asia/Tokyo']], ['Tsu', ['Asia/Tokyo']], ['Toyota', ['Asia/Tokyo']], ['Toyonaka', ['Asia/Tokyo']], ['Toyokawa', ['Asia/Tokyo']], ['Toyohashi', ['Asia/Tokyo']], ['Toyama', ['Asia/Tokyo']], ['Tottori', ['Asia/Tokyo']], ['Tondabayashich\u014D', ['Asia/Tokyo']], ['Tokyo', ['Asia/Tokyo']], ['Tokuyama', ['Asia/Tokyo']], ['Tokushima', ['Asia/Tokyo']], ['Tokorozawa', ['Asia/Tokyo']], ['Tochigi', ['Asia/Tokyo']], ['Nishi-Tokyo-shi', ['Asia/Tokyo']], ['Takatsuki', ['Asia/Tokyo']], ['Takasaki', ['Asia/Tokyo']], ['Takarazuka', ['Asia/Tokyo']], ['Takaoka', ['Asia/Tokyo']], ['Takamatsu', ['Asia/Tokyo']], ['Tajimi', ['Asia/Tokyo']], ['Suzuka', ['Asia/Tokyo']], ['Suita', ['Asia/Tokyo']], ['S\u014Dka', ['Asia/Tokyo']], ['Shizuoka', ['Asia/Tokyo']], ['Shimonoseki', ['Asia/Tokyo']], ['Minato', ['Asia/Tokyo']], ['Seto', ['Asia/Tokyo']], ['Sasebo', ['Asia/Tokyo']], ['Sano', ['Asia/Tokyo']], ['Sandach\u014D', ['Asia/Tokyo']], ['Sakai', ['Asia/Tokyo']], ['Saga', ['Asia/Tokyo']], ['Oyama', ['Asia/Tokyo']], ['\u014Ctsu', ['Asia/Tokyo']], ['\u014Cta', ['Asia/Tokyo']], ['Osaka', ['Asia/Tokyo']], ['\u014Cmuta', ['Asia/Tokyo']], ['\u014Cme', ['Asia/Tokyo']], ['Okazaki', ['Asia/Tokyo']], ['Okayama', ['Asia/Tokyo']], ['\u014Cita', ['Asia/Tokyo']], ['\u014Cgaki', ['Asia/Tokyo']], ['Odawara', ['Asia/Tokyo']], ['Numazu', ['Asia/Tokyo']], ['Noda', ['Asia/Tokyo']], ['Nobeoka', ['Asia/Tokyo']], ['Nishio', ['Asia/Tokyo']], ['Nishinomiya-hama', ['Asia/Tokyo']], ['Niihama', ['Asia/Tokyo']], ['Niigata', ['Asia/Tokyo']], ['Nara-shi', ['Asia/Tokyo']], ['Naha', ['Asia/Tokyo']], ['Nagoya', ['Asia/Tokyo']], ['Nagasaki', ['Asia/Tokyo']], ['Nagareyama', ['Asia/Tokyo']], ['Nagaoka', ['Asia/Tokyo']], ['Nagano', ['Asia/Tokyo']], ['Musashino', ['Asia/Tokyo']], ['Moriguchi', ['Asia/Tokyo']], ['Miyazaki', ['Asia/Tokyo']], ['Miyakonoj\u014D', ['Asia/Tokyo']], ['Mishima', ['Asia/Tokyo']], ['Mino', ['Asia/Tokyo']], ['Minamirinkan', ['Asia/Tokyo']], ['Matsumoto', ['Asia/Tokyo']], ['Matsue', ['Asia/Tokyo']], ['Matsudo', ['Asia/Tokyo']], ['Matsubara', ['Asia/Tokyo']], ['Maebashi', ['Asia/Tokyo']], ['Machida', ['Asia/Tokyo']], ['Kyoto', ['Asia/Tokyo']], ['Kusatsu', ['Asia/Tokyo']], ['Kurume', ['Asia/Tokyo']], ['Kure', ['Asia/Tokyo']], ['Kurashiki', ['Asia/Tokyo']], ['Kumamoto', ['Asia/Tokyo']], ['Kumagaya', ['Asia/Tokyo']], ['Koshigaya', ['Asia/Tokyo']], ['Komatsu', ['Asia/Tokyo']], ['Komaki', ['Asia/Tokyo']], ['Kokubunji', ['Asia/Tokyo']], ['Koga', ['Asia/Tokyo']], ['K\u014Dfu', ['Asia/Tokyo']], ['Kochi', ['Asia/Tokyo']], ['Kobe', ['Asia/Tokyo']], ['Kitakyushu', ['Asia/Tokyo']], ['Kishiwada', ['Asia/Tokyo']], ['Kisarazu', ['Asia/Tokyo']], ['Kiry\u016B', ['Asia/Tokyo']], ['Kazo', ['Asia/Tokyo']], ['Kawasaki', ['Asia/Tokyo']], ['Kawanishi', ['Asia/Tokyo']], ['Kawaguchi', ['Asia/Tokyo']], ['Kawagoe', ['Asia/Tokyo']], ['Kasukabe', ['Asia/Tokyo']], ['Kasugai', ['Asia/Tokyo']], ['Kashiwa', ['Asia/Tokyo']], ['Kashihara-shi', ['Asia/Tokyo']], ['Kariya', ['Asia/Tokyo']], ['Karatsu', ['Asia/Tokyo']], ['Kanazawa', ['Asia/Tokyo']], ['Kamirenjaku', ['Asia/Tokyo']], ['Kamakura', ['Asia/Tokyo']], ['Kakogawach\u014D-honmachi', ['Asia/Tokyo']], ['Kakegawa', ['Asia/Tokyo']], ['Kakamigahara', ['Asia/Tokyo']], ['Kagoshima', ['Asia/Tokyo']], ['Kadoma', ['Asia/Tokyo', 'Africa/Harare']], ['Izumo', ['Asia/Tokyo']], ['Izumi', ['Asia/Tokyo']], ['Iwatsuki', ['Asia/Tokyo']], ['Iwakuni', ['Asia/Tokyo']], ['Itami', ['Asia/Tokyo']], ['Isesaki', ['Asia/Tokyo']], ['Isehara', ['Asia/Tokyo']], ['Ise', ['Asia/Tokyo']], ['Isahaya', ['Asia/Tokyo']], ['Inazawa', ['Asia/Tokyo']], ['Ikoma', ['Asia/Tokyo']], ['Iida', ['Asia/Tokyo']], ['Ichinomiya', ['Asia/Tokyo']], ['Ibaraki', ['Asia/Tokyo']], ['H\u014Dfu', ['Asia/Tokyo']], ['Hiroshima', ['Asia/Tokyo']], ['Hiratsuka', ['Asia/Tokyo']], ['Hirakata', ['Asia/Tokyo']], ['Hino', ['Asia/Tokyo']], ['Himeji', ['Asia/Tokyo']], ['Hikone', ['Asia/Tokyo']], ['Higashi-\u014Dsaka', ['Asia/Tokyo']], ['Handa', ['Asia/Tokyo']], ['Hamamatsu', ['Asia/Tokyo']], ['Hadano', ['Asia/Tokyo']], ['Hachi\u014Dji', ['Asia/Tokyo']], ['Gifu-shi', ['Asia/Tokyo']], ['Honch\u014D', ['Asia/Tokyo']], ['Fukuyama', ['Asia/Tokyo']], ['Fukuoka', ['Asia/Tokyo']], ['Fukui-shi', ['Asia/Tokyo']], ['Fukayach\u014D', ['Asia/Tokyo']], ['Fujisawa', ['Asia/Tokyo']], ['Fujinomiya', ['Asia/Tokyo']], ['Fujieda', ['Asia/Tokyo']], ['Dait\u014D', ['Asia/Tokyo']], ['Ch\u014Dfu', ['Asia/Tokyo']], ['Chikushino-shi', ['Asia/Tokyo']], ['Chigasaki', ['Asia/Tokyo']], ['Beppu', ['Asia/Tokyo']], ['Ashikaga', ['Asia/Tokyo']], ['Anj\u014D', ['Asia/Tokyo']], ['Amagasaki', ['Asia/Tokyo']], ['Ageoshimo', ['Asia/Tokyo']], ['Okinawa', ['Asia/Tokyo']], ['Sayama', ['Asia/Tokyo']], ['Asaka', ['Asia/Tokyo']], ['Shimotoda', ['Asia/Tokyo']], ['Wakayama', ['Asia/Tokyo']], ['Matsuyama', ['Asia/Tokyo']], ['Yamagata', ['Asia/Tokyo']], ['Tsukuba', ['Asia/Tokyo']], ['Sendai', ['Asia/Tokyo']], ['Sakura', ['Asia/Tokyo']], ['Narita', ['Asia/Tokyo']], ['Morioka', ['Asia/Tokyo']], ['Mito', ['Asia/Tokyo']], ['K\u014Driyama', ['Asia/Tokyo']], ['Katsuta', ['Asia/Tokyo']], ['Iwaki', ['Asia/Tokyo']], ['Ishinomaki', ['Asia/Tokyo']], ['Ichinoseki', ['Asia/Tokyo']], ['Ichihara', ['Asia/Tokyo']], ['Hitachi', ['Asia/Tokyo']], ['Fukushima', ['Asia/Tokyo']], ['Chiba', ['Asia/Tokyo']], ['Akita', ['Asia/Tokyo']], ['Abiko', ['Asia/Tokyo']], ['Tomakomai', ['Asia/Tokyo']], ['Sapporo', ['Asia/Tokyo']], ['Otaru', ['Asia/Tokyo']], ['Obihiro', ['Asia/Tokyo']], ['Kushiro', ['Asia/Tokyo']], ['Kitami', ['Asia/Tokyo']], ['Hirosaki', ['Asia/Tokyo']], ['Hakodate', ['Asia/Tokyo']], ['Hachinohe', ['Asia/Tokyo']], ['Ebetsu', ['Asia/Tokyo']], ['Asahikawa', ['Asia/Tokyo']], ['Aomori', ['Asia/Tokyo']], ['Neyagawa', ['Asia/Tokyo']], ['Hitachi-Naka', ['Asia/Tokyo']], ['Tama', ['Asia/Tokyo']], ['Iruma', ['Asia/Tokyo']], ['Nasushiobara', ['Asia/Tokyo']], ['Inzai', ['Asia/Tokyo']], ['\u014Csaki', ['Asia/Tokyo']], ['Kani', ['Asia/Tokyo']], ['J\u014Detsu', ['Asia/Tokyo']], ['Habikino', ['Asia/Tokyo']], ['Saitama', ['Asia/Tokyo']], ['Higashimurayama', ['Asia/Tokyo']], ['Kirishima', ['Asia/Tokyo']], ['Nakano', ['Asia/Tokyo']], ['Kuwana', ['Asia/Tokyo']], ['Yamato', ['Asia/Tokyo']], ['Fuch\u016B', ['Asia/Tokyo']], ['Thika', ['Africa/Nairobi']], ['Ruiru', ['Africa/Nairobi']], ['Nakuru', ['Africa/Nairobi']], ['Nairobi', ['Africa/Nairobi']], ['Mombasa', ['Africa/Nairobi']], ['Malindi', ['Africa/Nairobi']], ['Limuru', ['Africa/Nairobi']], ['Kitale', ['Africa/Nairobi']], ['Kisumu', ['Africa/Nairobi']], ['Kisii', ['Africa/Nairobi']], ['Kikuyu', ['Africa/Nairobi']], ['Kakamega', ['Africa/Nairobi']], ['Eldoret', ['Africa/Nairobi']], ['Osh', ['Asia/Bishkek']], ['Jalal-Abad', ['Asia/Bishkek']], ['Bishkek', ['Asia/Bishkek']], ['Phnom Penh', ['Asia/Phnom_Penh']], ['Takeo', ['Asia/Phnom_Penh']], ['Siem Reap', ['Asia/Phnom_Penh']], ['Battambang', ['Asia/Phnom_Penh']], ['W\u014Fnsan', ['Asia/Pyongyang']], ['Sunch\u2019\u014Fn', ['Asia/Pyongyang']], ['Songnim-ni', ['Asia/Pyongyang']], ['Sariw\u014Fn', ['Asia/Pyongyang']], ['Pyongyang', ['Asia/Pyongyang']], ['P\u2019y\u014Fngs\u014Fng', ['Asia/Pyongyang']], ['Namp\u2019o', ['Asia/Pyongyang']], ['Kaes\u014Fng', ['Asia/Pyongyang']], ['H\u016Dngnam', ['Asia/Pyongyang']], ['Hamh\u016Dng', ['Asia/Pyongyang']], ['Haeju', ['Asia/Pyongyang']], ['Sin\u016Diju', ['Asia/Pyongyang']], ['Manp\u2019o', ['Asia/Pyongyang']], ['Kanggye', ['Asia/Pyongyang']], ['Hyesan', ['Asia/Pyongyang']], ['Chongjin', ['Asia/Pyongyang']], ['Yangju', ['Asia/Seoul']], ['W\u014Fnju', ['Asia/Seoul']], ['Ulsan', ['Asia/Seoul']], ['Uijeongbu-si', ['Asia/Seoul']], ['Daejeon', ['Asia/Seoul']], ['Daegu', ['Asia/Seoul']], ['Suwon', ['Asia/Seoul']], ['Suncheon', ['Asia/Seoul']], ['Seoul', ['Asia/Seoul']], ['Sangju', ['Asia/Seoul']], ['Busan', ['Asia/Seoul']], ['Bucheon-si', ['Asia/Seoul']], ['Pohang', ['Asia/Seoul']], ['Osan', ['Asia/Seoul']], ['Mokpo', ['Asia/Seoul']], ['Masan', ['Asia/Seoul']], ['Gyeongsan-si', ['Asia/Seoul']], ['Gyeongju', ['Asia/Seoul']], ['Gwangju', ['Asia/Seoul']], ['Guri-si', ['Asia/Seoul']], ['Gunsan', ['Asia/Seoul']], ['Gunpo', ['Asia/Seoul']], ['Gumi', ['Asia/Seoul']], ['Goyang-si', ['Asia/Seoul']], ['Kimhae', ['Asia/Seoul']], ['Gimcheon', ['Asia/Seoul']], ['Gangneung', ['Asia/Seoul']], ['Iksan', ['Asia/Seoul']], ['Incheon', ['Asia/Seoul']], ['Icheon-si', ['Asia/Seoul']], ['Hwaseong-si', ['Asia/Seoul']], ['Chungju', ['Asia/Seoul']], ['Chuncheon', ['Asia/Seoul']], ['Jeonju', ['Asia/Seoul']], ['Cheongju-si', ['Asia/Seoul']], ['Cheonan', ['Asia/Seoul']], ['Chinju', ['Asia/Seoul']], ['Jeju City', ['Asia/Seoul']], ['Changwon', ['Asia/Seoul']], ['Anyang-si', ['Asia/Seoul']], ['Ansan-si', ['Asia/Seoul']], ['Andong', ['Asia/Seoul']], ['Yeosu', ['Asia/Seoul']], ['Tonghae', ['Asia/Seoul']], ['Seongnam-si', ['Asia/Seoul']], ['Hanam', ['Asia/Seoul']], ['Hwado', ['Asia/Seoul']], ['Gwangmyeong', ['Asia/Seoul']], ['Seogwipo', ['Asia/Seoul']], ['Sejong', ['Asia/Seoul']], ['Jeongeup', ['Asia/Seoul']], ['\u1E28awall\u012B', ['Asia/Kuwait']], ['As S\u0101lim\u012Byah', ['Asia/Kuwait']], ['Al A\u1E29mad\u012B', ['Asia/Kuwait']], ['\u015Eab\u0101\u1E29 as S\u0101lim', ['Asia/Kuwait']], ['Zhanaozen', ['Asia/Aqtau']], ['Oral', ['Asia/Oral']], ['Karaganda', ['Asia/Almaty']], ['Karagandy', ['Asia/Almaty']], ['Atyrau', ['Asia/Atyrau']], ['Aktobe', ['Asia/Aqtobe']], ['Shevchenko', ['Asia/Aqtau']], ['Zhezqazghan', ['Asia/Almaty']], ['Taraz', ['Asia/Almaty']], ['Turkestan', ['Asia/Almaty']], ['Temirtau', ['Asia/Almaty']], ['Taldykorgan', ['Asia/Almaty']], ['Shymkent', ['Asia/Almaty']], ['Semey', ['Asia/Almaty']], ['Rudnyy', ['Asia/Qostanay']], ['Kyzylorda', ['Asia/Qyzylorda']], ['Kostanay', ['Asia/Qostanay']], ['Petropavl', ['Asia/Almaty']], ['Pavlodar', ['Asia/Almaty']], ['Ust-Kamenogorsk', ['Asia/Almaty']], ['Kokshetau', ['Asia/Almaty']], ['Ekibastuz', ['Asia/Almaty']], ['Astana', ['Asia/Almaty']], ['Almaty', ['Asia/Almaty']], ['Vientiane', ['Asia/Vientiane']], ['Savannakhet', ['Asia/Vientiane']], ['Tripoli', ['Africa/Tripoli', 'Asia/Beirut']], ['Tyre', ['Asia/Beirut']], ['Sidon', ['Asia/Beirut']], ['Ra\u2019s Bayr\u016Bt', ['Asia/Beirut']], ['Beirut', ['Asia/Beirut']], ['Nabat\xEEy\xE9 et Tahta', ['Asia/Beirut']], ['Trincomalee', ['Asia/Colombo']], ['Pita Kotte', ['Asia/Colombo']], ['Negombo', ['Asia/Colombo']], ['Dehiwala-Mount Lavinia', ['Asia/Colombo']], ['Moratuwa', ['Asia/Colombo']], ['Maharagama', ['Asia/Colombo']], ['Sri Jayewardenepura Kotte', ['Asia/Colombo']], ['Kandy', ['Asia/Colombo']], ['Kalmunai', ['Asia/Colombo']], ['Jaffna', ['Asia/Colombo']], ['Monrovia', ['Africa/Monrovia']], ['Maseru', ['Africa/Maseru']], ['Vilnius', ['Europe/Vilnius']], ['\u0160iauliai', ['Europe/Vilnius']], ['Klaip\u0117da', ['Europe/Vilnius']], ['Kaunas', ['Europe/Vilnius']], ['Riga', ['Europe/Riga']], ['Daugavpils', ['Europe/Riga']], ['Tobruk', ['Africa/Tripoli']], ['Benghazi', ['Africa/Tripoli']], ['Ajdabiya', ['Africa/Tripoli']], ['Zliten', ['Africa/Tripoli']], ['Tarhuna', ['Africa/Tripoli']], ['T\u0101j\u016Br\u0101\u2019', ['Africa/Tripoli']], ['Sirte', ['Africa/Tripoli']], ['\u015Eabr\u0101tah', ['Africa/Tripoli']], ['Sabh\u0101', ['Africa/Tripoli']], ['Mi\u015Fr\u0101tah', ['Africa/Tripoli']], ['Zawiya', ['Africa/Tripoli']], ['Az Z\u0101w\u012Byah', ['Africa/Tripoli']], ['Al Ajaylat', ['Africa/Tripoli']], ['Al Khums', ['Africa/Tripoli']], ['Al Jumayl', ['Africa/Tripoli']], ['Al Jad\u012Bd', ['Africa/Tripoli']], ['T\xE9touan', ['Africa/Casablanca']], ['Temara', ['Africa/Casablanca']], ['Taza', ['Africa/Casablanca']], ['Tangier', ['Africa/Casablanca']], ['Settat', ['Africa/Casablanca']], ['Sale', ['Africa/Casablanca']], ['Safi', ['Africa/Casablanca']], ['Rabat', ['Africa/Casablanca']], ['Oujda-Angad', ['Africa/Casablanca']], ['Nador', ['Africa/Casablanca']], ['Mohammedia', ['Africa/Casablanca']], ['Mekn\xE8s', ['Africa/Casablanca']], ['Marrakesh', ['Africa/Casablanca']], ['Larache', ['Africa/Casablanca']], ['Ksar El Kebir', ['Africa/Casablanca']], ['Khouribga', ['Africa/Casablanca']], ['Kenitra', ['Africa/Casablanca']], ['F\xE8s al Bali', ['Africa/Casablanca']], ['F\xE8s', ['Africa/Casablanca']], ['El Jadid', ['Africa/Casablanca']], ['Casablanca', ['Africa/Casablanca']], ['Beni Mellal', ['Africa/Casablanca']], ['Khemisset', ['Africa/Casablanca']], ['Al Hoce\xEFma', ['Africa/Casablanca']], ['Agadir', ['Africa/Casablanca']], ['Sal\xE9 Al Jadida', ['Africa/Casablanca']], ['Tiraspol', ['Europe/Chisinau']], ['Chisinau', ['Europe/Chisinau']], ['Bender', ['Europe/Chisinau']], ['B\u0103l\u0163i', ['Europe/Chisinau']], ['Podgorica', ['Europe/Podgorica']], ['Toamasina', ['Indian/Antananarivo']], ['Toliara', ['Indian/Antananarivo']], ['Mahajanga', ['Indian/Antananarivo']], ['Fianarantsoa', ['Indian/Antananarivo']], ['Antsiranana', ['Indian/Antananarivo']], ['Antsirabe', ['Indian/Antananarivo']], ['Antananarivo', ['Indian/Antananarivo']], ['Ambovombe', ['Indian/Antananarivo']], ['Skopje', ['Europe/Skopje']], ['Sikasso', ['Africa/Bamako']], ['S\xE9gou', ['Africa/Bamako']], ['Mopti', ['Africa/Bamako']], ['Bamako', ['Africa/Bamako']], ['Yenangyaung', ['Asia/Yangon']], ['Taungoo', ['Asia/Yangon']], ['Thaton', ['Asia/Yangon']], ['Dawei', ['Asia/Yangon']], ['Taunggyi', ['Asia/Yangon']], ['Sittwe', ['Asia/Yangon']], ['Yangon', ['Asia/Yangon']], ['Pyay', ['Asia/Yangon']], ['Bago', ['Asia/Yangon']], ['Pakokku', ['Asia/Yangon']], ['Myingyan', ['Asia/Yangon']], ['Mawlamyine', ['Asia/Yangon']], ['Monywa', ['Asia/Yangon']], ['Myeik', ['Asia/Yangon']], ['Meiktila', ['Asia/Yangon']], ['Pyin Oo Lwin', ['Asia/Yangon']], ['Mandalay', ['Asia/Yangon']], ['Lashio', ['Asia/Yangon']], ['K\u0113ng Tung', ['Asia/Yangon']], ['Hinthada', ['Asia/Yangon']], ['Pathein', ['Asia/Yangon']], ['Nay Pyi Taw', ['Asia/Yangon']], ['Kyain Seikgyi Township', ['Asia/Yangon']], ['Ulan Bator', ['Asia/Ulaanbaatar']], ['Macau', ['Asia/Macau']], ['Nouakchott', ['Africa/Nouakchott']], ['Vacoas', ['Indian/Mauritius']], ['Port Louis', ['Indian/Mauritius']], ['Beau Bassin-Rose Hill', ['Indian/Mauritius']], ['Male', ['Indian/Maldives']], ['Mzuzu', ['Africa/Blantyre']], ['Lilongwe', ['Africa/Blantyre']], ['Blantyre', ['Africa/Blantyre']], ['Ciudad Valles', ['America/Mexico_City']], ['Xochimilco', ['America/Mexico_City']], ['Xico', ['America/Mexico_City']], ['\xC1lvaro Obreg\xF3n', ['America/Mexico_City']], ['Villahermosa', ['America/Mexico_City']], ['Gustavo Adolfo Madero', ['America/Mexico_City']], ['Veracruz', ['America/Mexico_City']], ['Tuxtla', ['America/Mexico_City']], ['Tulancingo', ['America/Mexico_City']], ['Toluca', ['America/Mexico_City']], ['Tlalpan', ['America/Mexico_City']], ['Tlalnepantla', ['America/Mexico_City']], ['Tl\xE1huac', ['America/Mexico_City']], ['Texcoco de Mora', ['America/Mexico_City']], ['Cuautitl\xE1n Izcalli', ['America/Mexico_City']], ['Tehuac\xE1n', ['America/Mexico_City']], ['Tapachula', ['America/Mexico_City']], ['Tampico', ['America/Monterrey']], ['Santa Mar\xEDa Chimalhuac\xE1n', ['America/Mexico_City']], ['San Pablo de las Salinas', ['America/Mexico_City']], ['San Juan del R\xEDo', ['America/Mexico_City']], ['Tuxtepec', ['America/Mexico_City']], ['San Crist\xF3bal de las Casas', ['America/Mexico_City']], ['Reynosa', ['America/Matamoros']], ['Puebla', ['America/Mexico_City']], ['Poza Rica de Hidalgo', ['America/Mexico_City']], ['Playa del Carmen', ['America/Cancun']], ['Pachuca de Soto', ['America/Mexico_City']], ['Orizaba', ['America/Mexico_City']], ['Oaxaca', ['America/Mexico_City']], ['Nuevo Laredo', ['America/Matamoros']], ['Nicol\xE1s Romero', ['America/Mexico_City']], ['Naucalpan de Ju\xE1rez', ['America/Mexico_City']], ['Miramar', ['America/New_York', 'America/Monterrey']], ['Minatitl\xE1n', ['America/Mexico_City']], ['M\xE9rida', ['America/Merida', 'America/Caracas']], ['Heroica Matamoros', ['America/Matamoros']], ['Magdalena Contreras', ['America/Mexico_City']], ['Jiutepec', ['America/Mexico_City']], ['Xalapa de Enr\xEDquez', ['America/Mexico_City']], ['Ixtapaluca', ['America/Mexico_City']], ['Iztapalapa', ['America/Mexico_City']], ['Iztacalco', ['America/Mexico_City']], ['Iguala de la Independencia', ['America/Mexico_City']], ['Ecatepec de Morelos', ['America/Mexico_City']], ['Cuernavaca', ['America/Mexico_City']], ['Cuautla', ['America/Mexico_City']], ['Cuautitl\xE1n', ['America/Mexico_City']], ['Delegaci\xF3n Cuajimalpa de Morelos', ['America/Mexico_City']], ['Coyoac\xE1n', ['America/Mexico_City']], ['Coatzacoalcos', ['America/Mexico_City']], ['Coacalco', ['America/Mexico_City']], ['Ciudad Victoria', ['America/Monterrey']], ['Ciudad Nezahualcoyotl', ['America/Mexico_City']], ['Ciudad Madero', ['America/Monterrey']], ['Mexico City', ['America/Mexico_City']], ['Ciudad del Carmen', ['America/Merida']], ['Chilpancingo', ['America/Mexico_City']], ['Chicoloapan', ['America/Mexico_City']], ['Chetumal', ['America/Cancun']], ['Chalco', ['America/Mexico_City']], ['Canc\xFAn', ['America/Cancun']], ['Campeche', ['America/Merida']], ['Azcapotzalco', ['America/Mexico_City']], ['Ciudad L\xF3pez Mateos', ['America/Mexico_City']], ['Acapulco de Ju\xE1rez', ['America/Mexico_City']], ['Tepexpan', ['America/Mexico_City']], ['Benito Juarez', ['America/Mexico_City']], ['Venustiano Carranza', ['America/Mexico_City']], ['Miguel Hidalgo', ['America/Mexico_City']], ['Cuauht\xE9moc', ['America/Mexico_City', 'America/Chihuahua']], ['Huixquilucan', ['America/Mexico_City']], ['Ojo de Agua', ['America/Mexico_City']], ['Buenavista', ['America/Mexico_City']], ['Zapopan', ['America/Mexico_City']], ['Zamora', ['America/Mexico_City']], ['Zacatecas', ['America/Mexico_City']], ['Ciudad de Villa de \xC1lvarez', ['America/Mexico_City']], ['Uruapan', ['America/Mexico_City']], ['Torre\xF3n', ['America/Monterrey']], ['Tonal\xE1', ['America/Mexico_City']], ['Tlaquepaque', ['America/Mexico_City']], ['Tijuana', ['America/Tijuana']], ['Tepic', ['America/Mazatlan']], ['Soledad de Graciano S\xE1nchez', ['America/Mexico_City']], ['Santa Catarina', ['America/Monterrey']], ['San Nicol\xE1s de los Garza', ['America/Monterrey']], ['San Luis R\xEDo Colorado', ['America/Hermosillo']], ['San Luis Potos\xED', ['America/Mexico_City']], ['Saltillo', ['America/Monterrey']], ['Santiago de Quer\xE9taro', ['America/Mexico_City']], ['Puerto Vallarta', ['America/Mexico_City']], ['Piedras Negras', ['America/Matamoros']], ['Navojoa', ['America/Hermosillo']], ['Morelia', ['America/Mexico_City']], ['Monterrey', ['America/Monterrey']], ['Monclova', ['America/Monterrey']], ['Mexicali', ['America/Tijuana']], ['Mazatl\xE1n', ['America/Mazatlan']], ['Los Mochis', ['America/Mazatlan']], ['Le\xF3n de los Aldama', ['America/Mexico_City']], ['Ciudad Benito Ju\xE1rez', ['America/Monterrey']], ['Irapuato', ['America/Mexico_City']], ['Parral', ['America/Chihuahua']], ['Nogales', ['America/Hermosillo']], ['Hermosillo', ['America/Hermosillo']], ['Heroica Guaymas', ['America/Hermosillo']], ['Guadalupe', ['America/Monterrey', 'America/Mexico_City']], ['Guadalajara', ['America/Mexico_City']], ['G\xF3mez Palacio', ['America/Monterrey']], ['Ciudad General Escobedo', ['America/Monterrey']], ['San Pedro Garza Garc\xEDa', ['America/Monterrey']], ['Fresnillo', ['America/Mexico_City']], ['Ensenada', ['America/Tijuana']], ['Victoria de Durango', ['America/Monterrey']], ['Culiac\xE1n', ['America/Mazatlan']], ['Colima', ['America/Mexico_City']], ['Ciudad Obreg\xF3n', ['America/Hermosillo']], ['Ciudad Ju\xE1rez', ['America/Ojinaga']], ['Ciudad Delicias', ['America/Chihuahua']], ['Ciudad Acu\xF1a', ['America/Matamoros']], ['Chihuahua', ['America/Chihuahua']], ['Celaya', ['America/Mexico_City']], ['Ciudad Apodaca', ['America/Monterrey']], ['Aguascalientes', ['America/Mexico_City']], ['Benito Ju\xE1rez', ['America/Mexico_City']], ['Colonia del Valle', ['America/Mexico_City']], ['Colonia Lindavista', ['America/Mexico_City']], ['Batu Pahat', ['Asia/Kuala_Lumpur']], ['Kampung Pasir Gudang Baru', ['Asia/Kuala_Lumpur']], ['Skudai', ['Asia/Kuala_Lumpur']], ['Johor Bahru', ['Asia/Kuala_Lumpur']], ['Kluang', ['Asia/Kuala_Lumpur']], ['Muar', ['Asia/Kuala_Lumpur']], ['Shah Alam', ['Asia/Kuala_Lumpur']], ['Klang', ['Asia/Kuala_Lumpur']], ['Kota Kinabalu', ['Asia/Kuching']], ['Lahad Datu', ['Asia/Kuching']], ['Sandakan', ['Asia/Kuching']], ['Tawau', ['Asia/Kuching']], ['Kulim', ['Asia/Kuala_Lumpur']], ['Taiping', ['Asia/Kuala_Lumpur']], ['Ipoh', ['Asia/Kuala_Lumpur']], ['Kuala Terengganu', ['Asia/Kuala_Lumpur']], ['Malacca', ['Asia/Kuala_Lumpur']], ['Seremban', ['Asia/Kuala_Lumpur']], ['Sepang', ['Asia/Kuala_Lumpur']], ['Butterworth', ['Asia/Kuala_Lumpur']], ['Bukit Mertajam', ['Asia/Kuala_Lumpur']], ['Tasek Glugor', ['Asia/Kuala_Lumpur']], ['George Town', ['Asia/Kuala_Lumpur', 'America/Cayman']], ['Rawang', ['Asia/Kuala_Lumpur']], ['Petaling Jaya', ['Asia/Kuala_Lumpur']], ['Kuala Lumpur', ['Asia/Kuala_Lumpur']], ['Ampang', ['Asia/Kuala_Lumpur']], ['Kuantan', ['Asia/Kuala_Lumpur']], ['Sungai Petani', ['Asia/Kuala_Lumpur']], ['Kuching', ['Asia/Kuching']], ['Sibu', ['Asia/Kuching']], ['Alor Setar', ['Asia/Kuala_Lumpur']], ['Kota Bharu', ['Asia/Kuala_Lumpur']], ['Bintulu', ['Asia/Kuching']], ['Miri', ['Asia/Kuching']], ['Kampung Sungai Ara', ['Asia/Kuala_Lumpur']], ['Kampung Baru Subang', ['Asia/Kuala_Lumpur']], ['Subang Jaya', ['Asia/Kuala_Lumpur']], ['Xai-Xai', ['Africa/Maputo']], ['Tete', ['Africa/Maputo']], ['Ressano Garcia', ['Africa/Maputo']], ['Quelimane', ['Africa/Maputo']], ['Pemba', ['Africa/Maputo']], ['Nampula', ['Africa/Maputo']], ['Nacala', ['Africa/Maputo']], ['Maxixe', ['Africa/Maputo']], ['Matola', ['Africa/Maputo']], ['Maputo', ['Africa/Maputo']], ['Mandimba', ['Africa/Maputo']], ['Lichinga', ['Africa/Maputo']], ['Chimoio', ['Africa/Maputo']], ['Beira', ['Africa/Maputo']], ['Windhoek', ['Africa/Windhoek']], ['Zinder', ['Africa/Niamey']], ['Niamey', ['Africa/Niamey']], ['Maradi', ['Africa/Niamey']], ['Agadez', ['Africa/Niamey']], ['Zaria', ['Africa/Lagos']], ['Warri', ['Africa/Lagos']], ['Uyo', ['Africa/Lagos']], ['Uromi', ['Africa/Lagos']], ['Umuahia', ['Africa/Lagos']], ['Ugep', ['Africa/Lagos']], ['Suleja', ['Africa/Lagos']], ['Sokoto', ['Africa/Lagos']], ['Saki', ['Africa/Lagos']], ['Shagamu', ['Africa/Lagos']], ['Sapele', ['Africa/Lagos']], ['Port Harcourt', ['Africa/Lagos']], ['Pindiga', ['Africa/Lagos']], ['Oyo', ['Africa/Lagos']], ['Owo', ['Africa/Lagos']], ['Owerri', ['Africa/Lagos']], ['Osogbo', ['Africa/Lagos']], ['Onitsha', ['Africa/Lagos']], ['Ondo', ['Africa/Lagos']], ['Okrika', ['Africa/Lagos']], ['Okigwe', ['Africa/Lagos']], ['Okene', ['Africa/Lagos']], ['Offa', ['Africa/Lagos']], ['Nsukka', ['Africa/Lagos']], ['Nnewi', ['Africa/Lagos']], ['Nkpor', ['Africa/Lagos']], ['Nguru', ['Africa/Lagos']], ['Mubi', ['Africa/Lagos']], ['Modakeke', ['Africa/Lagos']], ['Minna', ['Africa/Lagos']], ['Makurdi', ['Africa/Lagos']], ['Maiduguri', ['Africa/Lagos']], ['Lekki', ['Africa/Lagos']], ['Lagos', ['Africa/Lagos']], ['Lafiagi', ['Africa/Lagos']], ['Lafia', ['Africa/Lagos']], ['Kisi', ['Africa/Lagos']], ['Katsina', ['Africa/Lagos']], ['Kano', ['Africa/Lagos']], ['Kaduna', ['Africa/Lagos']], ['Jos', ['Africa/Lagos']], ['Jimeta', ['Africa/Lagos']], ['Jalingo', ['Africa/Lagos']], ['Iwo', ['Africa/Lagos']], ['Ise-Ekiti', ['Africa/Lagos']], ['Inisa', ['Africa/Lagos']], ['Ilorin', ['Africa/Lagos']], ['Ilobu', ['Africa/Lagos']], ['Ilesa', ['Africa/Lagos']], ['Ila Orangun', ['Africa/Lagos']], ['Ikot Ekpene', ['Africa/Lagos']], ['Ikirun', ['Africa/Lagos']], ['Ikire', ['Africa/Lagos']], ['Ikere-Ekiti', ['Africa/Lagos']], ['Ikeja', ['Africa/Lagos']], ['Ijero-Ekiti', ['Africa/Lagos']], ['Ijebu-Ode', ['Africa/Lagos']], ['Ijebu-Igbo', ['Africa/Lagos']], ['Igboho', ['Africa/Lagos']], ['Ibadan', ['Africa/Lagos']], ['Hadejia', ['Africa/Lagos']], ['Gusau', ['Africa/Lagos']], ['Gombe', ['Africa/Lagos']], ['Gbongan', ['Africa/Lagos']], ['Gashua', ['Africa/Lagos']], ['Funtua', ['Africa/Lagos']], ['Esuk Oron', ['Africa/Lagos']], ['Enugu', ['Africa/Lagos']], ['Ejigbo', ['Africa/Lagos']], ['Efon-Alaaye', ['Africa/Lagos']], ['Ebute Ikorodu', ['Africa/Lagos']], ['Calabar', ['Africa/Lagos']], ['Buguma', ['Africa/Lagos']], ['Birnin Kebbi', ['Africa/Lagos']], ['Bida', ['Africa/Lagos']], ['Benin City', ['Africa/Lagos']], ['Bauchi', ['Africa/Lagos']], ['Bama', ['Africa/Lagos']], ['Azare', ['Africa/Lagos']], ['Awka', ['Africa/Lagos']], ['Atani', ['Africa/Lagos']], ['Amaigbo', ['Africa/Lagos']], ['Akure', ['Africa/Lagos']], ['Ado-Ekiti', ['Africa/Lagos']], ['Abuja', ['Africa/Lagos']], ['Abeokuta', ['Africa/Lagos']], ['Abakaliki', ['Africa/Lagos']], ['Aba', ['Africa/Lagos']], ['Chakwama', ['Africa/Lagos']], ['Matagalpa', ['America/Managua']], ['Masaya', ['America/Managua']], ['Managua', ['America/Managua']], ['Chinandega', ['America/Managua']], ['Zwolle', ['Europe/Amsterdam']], ['Zoetermeer', ['Europe/Amsterdam']], ['Zaanstad', ['Europe/Amsterdam']], ['Venlo', ['Europe/Amsterdam']], ['Utrecht', ['Europe/Amsterdam']], ['Tilburg', ['Europe/Amsterdam']], ["'s-Hertogenbosch", ['Europe/Amsterdam']], ['The Hague', ['Europe/Amsterdam']], ['Rotterdam', ['Europe/Amsterdam']], ['Nijmegen', ['Europe/Amsterdam']], ['Maastricht', ['Europe/Amsterdam']], ['Leiden', ['Europe/Amsterdam']], ['Hoofddorp', ['Europe/Amsterdam']], ['Hengelo', ['Europe/Amsterdam']], ['Haarlem', ['Europe/Amsterdam']], ['Groningen', ['Europe/Amsterdam']], ['Enschede', ['Europe/Amsterdam']], ['Eindhoven', ['Europe/Amsterdam']], ['Dordrecht', ['Europe/Amsterdam']], ['Breda', ['Europe/Amsterdam']], ['Arnhem', ['Europe/Amsterdam']], ['Apeldoorn', ['Europe/Amsterdam']], ['Amsterdam', ['Europe/Amsterdam']], ['Amersfoort', ['Europe/Amsterdam']], ['Almere Stad', ['Europe/Amsterdam']], ['Trondheim', ['Europe/Oslo']], ['Stavanger', ['Europe/Oslo']], ['Oslo', ['Europe/Oslo']], ['Drammen', ['Europe/Oslo']], ['Bergen', ['Europe/Oslo']], ['Pokhara', ['Asia/Kathmandu']], ['Kathmandu', ['Asia/Kathmandu']], ['Dhar\u0101n', ['Asia/Kathmandu']], ['Birga\xF1j', ['Asia/Kathmandu']], ['Biratnagar', ['Asia/Kathmandu']], ['Wellington', ['Pacific/Auckland']], ['North Shore', ['Pacific/Auckland']], ['Manukau City', ['Pacific/Auckland']], ['Lower Hutt', ['Pacific/Auckland']], ['Dunedin', ['Pacific/Auckland']], ['Christchurch', ['Pacific/Auckland']], ['Auckland', ['Pacific/Auckland']], ['Tauranga', ['Pacific/Auckland']], ['Sohar', ['Asia/Muscat']], ['\u015Eal\u0101lah', ['Asia/Muscat']], ['Muscat', ['Asia/Muscat']], ['\u2018Ibr\u012B', ['Asia/Muscat']], ['Bawshar', ['Asia/Muscat']], ['As Suwayq', ['Asia/Muscat']], ['Seeb', ['Asia/Muscat']], ['San Miguelito', ['America/Panama']], ['Panam\xE1', ['America/Panama']], ['Panama City', ['America/Panama']], ['Juan D\xEDaz', ['America/Panama']], ['Trujillo', ['America/Lima']], ['Sullana', ['America/Lima']], ['Pucallpa', ['America/Lima']], ['Piura', ['America/Lima']], ['Iquitos', ['America/Lima']], ['Huaraz', ['America/Lima']], ['Hu\xE1nuco', ['America/Lima']], ['Chimbote', ['America/Lima']], ['Chiclayo', ['America/Lima']], ['Cajamarca', ['America/Lima']], ['Tacna', ['America/Lima']], ['Santiago de Surco', ['America/Lima']], ['Puno', ['America/Lima']], ['Lima', ['America/Lima']], ['Juliaca', ['America/Lima']], ['Ica', ['America/Lima']], ['Huancayo', ['America/Lima']], ['Cusco', ['America/Lima']], ['Chincha Alta', ['America/Lima']], ['Callao', ['America/Lima']], ['Ayacucho', ['America/Lima']], ['Arequipa', ['America/Lima']], ['Santa Anita - Los Ficus', ['America/Lima']], ['San Martin', ['America/Lima']], ['San Francisco De Borja', ['America/Lima']], ['Port Moresby', ['Pacific/Port_Moresby']], ['Zamboanga', ['Asia/Manila']], ['Urdaneta', ['Asia/Manila']], ['Tuguegarao', ['Asia/Manila']], ['Taytay', ['Asia/Manila']], ['Tarlac City', ['Asia/Manila']], ['Tanza', ['Asia/Manila']], ['Talisay', ['Asia/Manila']], ['Magugpo Poblacion', ['Asia/Manila']], ['Taguig', ['Asia/Manila']], ['Tacloban', ['Asia/Manila']], ['Silang', ['Asia/Manila']], ['Santol', ['Asia/Manila']], ['Santa Cruz', ['Asia/Manila']], ['San Pedro', ['Asia/Manila']], ['San Pablo', ['Asia/Manila']], ['San Mateo', ['Asia/Manila', 'America/Los_Angeles']], ['San Jose del Monte', ['Asia/Manila']], ['San Jose', ['America/Los_Angeles', 'Asia/Manila', 'America/Costa_Rica']], ['San Fernando', ['Asia/Manila']], ['Roxas City', ['Asia/Manila']], ['Quezon City', ['Asia/Manila']], ['Pulong Santa Cruz', ['Asia/Manila']], ['Puerto Princesa', ['Asia/Manila']], ['Pasay', ['Asia/Manila']], ['Paranaque City', ['Asia/Manila']], ['Panalanoy', ['Asia/Manila']], ['Pagadian', ['Asia/Manila']], ['Ormoc', ['Asia/Manila']], ['Olongapo', ['Asia/Manila']], ['Navotas', ['Asia/Manila']], ['Naga', ['Asia/Manila']], ['Muricay', ['Asia/Manila']], ['Rodriguez', ['Asia/Manila']], ['Meycauayan', ['Asia/Manila']], ['Mati', ['Asia/Manila']], ['Marawi City', ['Asia/Manila']], ['Mantampay', ['Asia/Manila']], ['Mansilingan', ['Asia/Manila']], ['Manila', ['Asia/Manila']], ['Mandaue City', ['Asia/Manila']], ['Mandaluyong City', ['Asia/Manila']], ['Malolos', ['Asia/Manila']], ['Makati City', ['Asia/Manila']], ['Mabalacat City', ['Asia/Manila']], ['Lucena', ['Asia/Manila']], ['Lipa City', ['Asia/Manila']], ['Libertad', ['Asia/Manila']], ['Legaspi', ['Asia/Manila']], ['Las Pi\xF1as', ['Asia/Manila']], ['Lapu-Lapu City', ['Asia/Manila']], ['Laoag', ['Asia/Manila']], ['Koronadal', ['Asia/Manila']], ['Kabankalan', ['Asia/Manila']], ['Jolo', ['Asia/Manila']], ['Iriga City', ['Asia/Manila']], ['Imus', ['Asia/Manila']], ['Iloilo', ['Asia/Manila']], ['Iligan City', ['Asia/Manila']], ['Iligan', ['Asia/Manila']], ['Hagonoy', ['Asia/Manila']], ['Guyong', ['Asia/Manila']], ['General Santos', ['Asia/Manila']], ['Dumaguete', ['Asia/Manila']], ['Digos', ['Asia/Manila']], ['Davao', ['Asia/Manila']], ['Dasmari\xF1as', ['Asia/Manila']], ['Dagupan', ['Asia/Manila']], ['Cotabato', ['Asia/Manila']], ['Cebu City', ['Asia/Manila']], ['Cavite City', ['Asia/Manila']], ['Caloocan City', ['Asia/Manila']], ['Calamba', ['Asia/Manila']], ['Cainta', ['Asia/Manila']], ['Cagayan de Oro', ['Asia/Manila']], ['Cabuyao', ['Asia/Manila']], ['Cabanatuan City', ['Asia/Manila']], ['Butuan', ['Asia/Manila']], ['Bulaon', ['Asia/Manila']], ['Budta', ['Asia/Manila']], ['Binangonan', ['Asia/Manila']], ['Bi\xF1an', ['Asia/Manila']], ['Bayawan', ['Asia/Manila']], ['Batangas', ['Asia/Manila']], ['Baliuag', ['Asia/Manila']], ['Baguio', ['Asia/Manila']], ['Bago City', ['Asia/Manila']], ['Bacoor', ['Asia/Manila']], ['Bacolod City', ['Asia/Manila']], ['Antipolo', ['Asia/Manila']], ['Angeles City', ['Asia/Manila']], ['Malingao', ['Asia/Manila']], ['Pasig City', ['Asia/Manila']], ['Khairpur Mir\u2019s', ['Asia/Karachi']], ['Wazirabad', ['Asia/Karachi']], ['Vihari', ['Asia/Karachi']], ['Tordher', ['Asia/Karachi']], ['Tando Allahyar', ['Asia/Karachi']], ['Tando Adam', ['Asia/Karachi']], ['Sukkur', ['Asia/Karachi']], ['Sialkot', ['Asia/Karachi']], ['Shikarpur', ['Asia/Karachi']], ['Shekhupura', ['Asia/Karachi']], ['Shahkot', ['Asia/Karachi']], ['Sargodha', ['Asia/Karachi']], ['Sahiwal', ['Asia/Karachi']], ['Saddiqabad', ['Asia/Karachi']], ['Rawalpindi', ['Asia/Karachi']], ['Rahim Yar Khan', ['Asia/Karachi']], ['Quetta', ['Asia/Karachi']], ['Peshawar', ['Asia/Karachi']], ['Pakpattan', ['Asia/Karachi']], ['Okara', ['Asia/Karachi']], ['New Mirpur', ['Asia/Karachi']], ['Nawabshah', ['Asia/Karachi']], ['Muzaffargarh', ['Asia/Karachi']], ['Muzaffar\u0101b\u0101d', ['Asia/Karachi']], ['Muridke', ['Asia/Karachi']], ['Multan', ['Asia/Karachi']], ['Mirpur Khas', ['Asia/Karachi']], ['Mingora', ['Asia/Karachi']], ['Mardan', ['Asia/Karachi']], ['Mandi Bahauddin', ['Asia/Karachi']], ['Malir Cantonment', ['Asia/Karachi']], ['Larkana', ['Asia/Karachi']], ['Lahore', ['Asia/Karachi']], ['Kotli', ['Asia/Karachi']], ['Kot Addu', ['Asia/Karachi']], ['Kohat', ['Asia/Karachi']], ['Khuzdar', ['Asia/Karachi']], ['Khush\u0101b', ['Asia/Karachi']], ['Khanpur', ['Asia/Karachi']], ['Kasur', ['Asia/Karachi']], ['Karachi', ['Asia/Karachi']], ['Kamoke', ['Asia/Karachi']], ['Kamalia', ['Asia/Karachi']], ['Jhelum', ['Asia/Karachi']], ['Jhang Sadr', ['Asia/Karachi']], ['Jaranwala', ['Asia/Karachi']], ['Jacobabad', ['Asia/Karachi']], ['Islamabad', ['Asia/Karachi']], ['Hyderabad', ['Asia/Karachi', 'Asia/Kolkata']], ['Hafizabad', ['Asia/Karachi']], ['Gujrat', ['Asia/Karachi']], ['Gujranwala', ['Asia/Karachi']], ['Gojra', ['Asia/Karachi']], ['Faisalabad', ['Asia/Karachi']], ['Dera Ismail Khan', ['Asia/Karachi']], ['Dera Ghazi Khan', ['Asia/Karachi']], ['Daska Kalan', ['Asia/Karachi']], ['Dadu', ['Asia/Karachi']], ['Chishtian', ['Asia/Karachi']], ['Chiniot', ['Asia/Karachi']], ['Chakwal', ['Asia/Karachi']], ['Burewala', ['Asia/Karachi']], ['Bhimber', ['Asia/Karachi']], ['Battagram', ['Asia/Karachi']], ['Bahawalpur', ['Asia/Karachi']], ['Bahawalnagar', ['Asia/Karachi']], ['Ahmadpur East', ['Asia/Karachi']], ['Abbottabad', ['Asia/Karachi']], ['Wola', ['Europe/Warsaw']], ['Warsaw', ['Europe/Warsaw']], ['Tarn\xF3w', ['Europe/Warsaw']], ['Targ\xF3wek', ['Europe/Warsaw']], ['\u015Ar\xF3dmie\u015Bcie', ['Europe/Warsaw']], ['Rzesz\xF3w', ['Europe/Warsaw']], ['Radom', ['Europe/Warsaw']], ['Olsztyn', ['Europe/Warsaw']], ['Mokot\xF3w', ['Europe/Warsaw']], ['Lublin', ['Europe/Warsaw']], ['Kielce', ['Europe/Warsaw']], ['Bielany', ['Europe/Warsaw']], ['Bia\u0142ystok', ['Europe/Warsaw']], ['Bia\u0142o\u0142eka', ['Europe/Warsaw']], ['Bemowo', ['Europe/Warsaw']], ['Zielona G\xF3ra', ['Europe/Warsaw']], ['Zabrze', ['Europe/Warsaw']], ['Wroc\u0142aw', ['Europe/Warsaw']], ['W\u0142oc\u0142awek', ['Europe/Warsaw']], ['Wa\u0142brzych', ['Europe/Warsaw']], ['Tychy', ['Europe/Warsaw']], ['Toru\u0144', ['Europe/Warsaw']], ['Szczecin', ['Europe/Warsaw']], ['Sosnowiec', ['Europe/Warsaw']], ['Rybnik', ['Europe/Warsaw']], ['Ruda \u015Al\u0105ska', ['Europe/Warsaw']], ['Pozna\u0144', ['Europe/Warsaw']], ['P\u0142ock', ['Europe/Warsaw']], ['Opole', ['Europe/Warsaw']], ['\u0141\xF3d\u017A', ['Europe/Warsaw']], ['Legnica', ['Europe/Warsaw']], ['Krak\xF3w', ['Europe/Warsaw']], ['Koszalin', ['Europe/Warsaw']], ['Katowice', ['Europe/Warsaw']], ['Kalisz', ['Europe/Warsaw']], ['Gorz\xF3w Wielkopolski', ['Europe/Warsaw']], ['Gliwice', ['Europe/Warsaw']], ['Gdynia', ['Europe/Warsaw']], ['Gda\u0144sk', ['Europe/Warsaw']], ['Elbl\u0105g', ['Europe/Warsaw']], ['D\u0105browa G\xF3rnicza', ['Europe/Warsaw']], ['Cz\u0119stochowa', ['Europe/Warsaw']], ['Chorz\xF3w', ['Europe/Warsaw']], ['Bytom', ['Europe/Warsaw']], ['Bydgoszcz', ['Europe/Warsaw']], ['Bielsko-Biala', ['Europe/Warsaw']], ['Ursyn\xF3w', ['Europe/Warsaw']], ['Praga Po\u0142udnie', ['Europe/Warsaw']], ['Bayam\xF3n', ['America/Puerto_Rico']], ['Carolina', ['America/Puerto_Rico']], ['Ponce', ['America/Puerto_Rico']], ['Rafa\u1E29', ['Asia/Gaza']], ['Kh\u0101n Y\u016Bnis', ['Asia/Gaza']], ['Jab\u0101ly\u0101', ['Asia/Gaza']], ['Gaza', ['Asia/Gaza']], ['Nablus', ['Asia/Hebron']], ['Hebron', ['Asia/Hebron']], ['Al Quds', ['Asia/Hebron']], ['East Jerusalem', ['Asia/Hebron']], ['Set\xFAbal', ['Europe/Lisbon']], ['Queluz', ['Europe/Lisbon']], ['Lisbon', ['Europe/Lisbon']], ['Funchal', ['Atlantic/Madeira']], ['Amadora', ['Europe/Lisbon']], ['Porto', ['Europe/Lisbon']], ['Coimbra', ['Europe/Lisbon']], ['Braga', ['Europe/Lisbon']], ['San Lorenzo', ['America/Asuncion']], ['Lambar\xE9', ['America/Asuncion']], ['Fernando de la Mora', ['America/Asuncion']], ['Ciudad del Este', ['America/Asuncion']], ['Capiat\xE1', ['America/Asuncion']], ['Asunci\xF3n', ['America/Asuncion']], ['Ar Rayy\u0101n', ['Asia/Qatar']], ['Doha', ['Asia/Qatar']], ['Saint-Paul', ['Indian/Reunion']], ['Saint-Denis', ['Indian/Reunion']], ['T\xE2rgu-Mure\u015F', ['Europe/Bucharest']], ['Timi\u015Foara', ['Europe/Bucharest']], ['Suceava', ['Europe/Bucharest']], ['Sibiu', ['Europe/Bucharest']], ['Satu Mare', ['Europe/Bucharest']], ['R\xE2mnicu V\xE2lcea', ['Europe/Bucharest']], ['Ploie\u015Fti', ['Europe/Bucharest']], ['Pite\u015Fti', ['Europe/Bucharest']], ['Piatra Neam\u0163', ['Europe/Bucharest']], ['Oradea', ['Europe/Bucharest']], ['Ia\u015Fi', ['Europe/Bucharest']], ['Gala\u0163i', ['Europe/Bucharest']], ['Drobeta-Turnu Severin', ['Europe/Bucharest']], ['Craiova', ['Europe/Bucharest']], ['Constan\u0163a', ['Europe/Bucharest']], ['Cluj-Napoca', ['Europe/Bucharest']], ['Buz\u0103u', ['Europe/Bucharest']], ['Bucharest', ['Europe/Bucharest']], ['Bra\u015Fov', ['Europe/Bucharest']], ['Br\u0103ila', ['Europe/Bucharest']], ['Boto\u015Fani', ['Europe/Bucharest']], ['Baia Mare', ['Europe/Bucharest']], ['Bac\u0103u', ['Europe/Bucharest']], ['Arad', ['Europe/Bucharest']], ['Sector 1', ['Europe/Bucharest']], ['Sector 2', ['Europe/Bucharest']], ['Sector 3', ['Europe/Bucharest']], ['Sector 4', ['Europe/Bucharest']], ['Sector 5', ['Europe/Bucharest']], ['Sector 6', ['Europe/Bucharest']], ['Zemun', ['Europe/Belgrade']], ['Ni\u0161', ['Europe/Belgrade']], ['Kragujevac', ['Europe/Belgrade']], ['\u010Ca\u010Dak', ['Europe/Belgrade']], ['Belgrade', ['Europe/Belgrade']], ['Subotica', ['Europe/Belgrade']], ['Novi Sad', ['Europe/Belgrade']], ['Zyuzino', ['Europe/Moscow']], ['Zyablikovo', ['Europe/Moscow']], ['Zlatoust', ['Asia/Yekaterinburg']], ['Zhulebino', ['Europe/Moscow']], ['Zheleznodorozhnyy', ['Europe/Moscow']], ['Zelenograd', ['Europe/Moscow']], ['Yoshkar-Ola', ['Europe/Moscow']], ['Yelets', ['Europe/Moscow']], ['Yasenevo', ['Europe/Moscow']], ['Yaroslavl', ['Europe/Moscow']], ['Vykhino-Zhulebino', ['Europe/Moscow']], ['Voronezh', ['Europe/Moscow']], ['Volzhsky', ['Europe/Volgograd']], ['Vologda', ['Europe/Moscow']], ['Volgograd', ['Europe/Volgograd']], ['Volgodonsk', ['Europe/Moscow']], ['Vladimir', ['Europe/Moscow']], ['Vladikavkaz', ['Europe/Moscow']], ['Veshnyaki', ['Europe/Moscow']], ['Velikiye Luki', ['Europe/Moscow']], ['Ulyanovsk', ['Europe/Ulyanovsk']], ['Ukhta', ['Europe/Moscow']], ['Ufa', ['Asia/Yekaterinburg']], ['Tver', ['Europe/Moscow']], ['Tula', ['Europe/Moscow']], ['Tropar\xEBvo', ['Europe/Moscow']], ['Tolyatti', ['Europe/Samara']], ['Tyoply Stan', ['Europe/Moscow']], ['Tekstil\u2019shchiki', ['Europe/Moscow']], ['Tambov', ['Europe/Moscow']], ['Taganrog', ['Europe/Moscow']], ['Taganskiy', ['Europe/Moscow']], ['Syzran\u2019', ['Europe/Samara']], ['Syktyvkar', ['Europe/Moscow']], ['Strogino', ['Europe/Moscow']], ['Sterlitamak', ['Asia/Yekaterinburg']], ['Stavropol\u2019', ['Europe/Moscow']], ['Staryy Oskol', ['Europe/Moscow']], ['Solntsevo', ['Europe/Moscow']], ['Solikamsk', ['Asia/Yekaterinburg']], ['Sochi', ['Europe/Moscow']], ['Smolensk', ['Europe/Moscow']], ['Shchukino', ['Europe/Moscow']], ['Shchelkovo', ['Europe/Moscow']], ['Shakhty', ['Europe/Moscow']], ['Severodvinsk', ['Europe/Moscow']], ['Severnyy', ['Europe/Moscow']], ['Serpukhov', ['Europe/Moscow']], ['Sergiyev Posad', ['Europe/Moscow']], ['Saratov', ['Europe/Saratov']], ['Saransk', ['Europe/Moscow']], ['Saint Petersburg', ['Europe/Moscow']], ['Samara', ['Europe/Samara']], ['Salavat', ['Asia/Yekaterinburg']], ['Rybinsk', ['Europe/Moscow']], ['Ryazan\u2019', ['Europe/Moscow']], ['Rostov-na-Donu', ['Europe/Moscow']], ['Ramenki', ['Europe/Moscow']], ['Pyatigorsk', ['Europe/Moscow']], ['Pushkino', ['Europe/Moscow']], ['Pskov', ['Europe/Moscow']], ['Podolsk', ['Europe/Moscow']], ['Ryazanskiy', ['Europe/Moscow']], ['Petrozavodsk', ['Europe/Moscow']], ['Pervouralsk', ['Asia/Yekaterinburg']], ['Perm', ['Asia/Yekaterinburg']], ['Novo-Peredelkino', ['Europe/Moscow']], ['Penza', ['Europe/Moscow']], ['Orsk', ['Asia/Yekaterinburg']], ['Orenburg', ['Asia/Yekaterinburg']], ['Or\xEBl', ['Europe/Moscow']], ['Orekhovo-Zuyevo', ['Europe/Moscow']], ['Orekhovo-Borisovo Severnoye', ['Europe/Moscow']], ['Oktyabr\u2019skiy', ['Asia/Yekaterinburg']], ['Odintsovo', ['Europe/Moscow']], ['Ochakovo-Matveyevskoye', ['Europe/Moscow']], ['Obninsk', ['Europe/Moscow']], ['Novyye Kuz\u2019minki', ['Europe/Moscow']], ['Novyye Cher\xEBmushki', ['Europe/Moscow']], ['Novotroitsk', ['Asia/Yekaterinburg']], ['Novorossiysk', ['Europe/Moscow']], ['Novomoskovsk', ['Europe/Moscow']], ['Novokuybyshevsk', ['Europe/Samara']], ['Novocherkassk', ['Europe/Moscow']], ['Novocheboksarsk', ['Europe/Moscow']], ['Velikiy Novgorod', ['Europe/Moscow']], ['Noginsk', ['Europe/Moscow']], ['Nizhny Tagil', ['Asia/Yekaterinburg']], ['Nizhniy Novgorod', ['Europe/Moscow']], ['Nizhnekamsk', ['Europe/Moscow']], ['Nevinnomyssk', ['Europe/Moscow']], ['Neftekamsk', ['Asia/Yekaterinburg']], ['Nazran\u2019', ['Europe/Moscow']], ['Nalchik', ['Europe/Moscow']], ['Naberezhnyye Chelny', ['Europe/Moscow']], ['Mytishchi', ['Europe/Moscow']], ['Murom', ['Europe/Moscow']], ['Murmansk', ['Europe/Moscow']], ['Moscow', ['Europe/Moscow']], ['Maykop', ['Europe/Moscow']], ['Mar\u2019ino', ['Europe/Moscow']], ['Makhachkala', ['Europe/Moscow']], ['Magnitogorsk', ['Asia/Yekaterinburg']], ['Lyublino', ['Europe/Moscow']], ['Lyubertsy', ['Europe/Moscow']], ['Lipetsk', ['Europe/Moscow']], ['Tsaritsyno', ['Europe/Moscow']], ['Kuz\u2019minki', ['Europe/Moscow']], ['Kursk', ['Europe/Moscow']], ['Kuybyshev', ['Europe/Samara']], ['Krasnodar', ['Europe/Moscow']], ['Presnenskiy', ['Europe/Moscow']], ['Kovrov', ['Europe/Moscow']], ['Kostroma', ['Europe/Moscow']], ['Kolpino', ['Europe/Moscow']], ['Kolomna', ['Europe/Moscow']], ['Kislovodsk', ['Europe/Moscow']], ['Kirov', ['Europe/Kirov']], ['Khorosh\xEBvo-Mnevniki', ['Europe/Moscow']], ['Khimki', ['Europe/Moscow']], ['Khasavyurt', ['Europe/Moscow']], ['Kazan', ['Europe/Moscow']], ['Kamyshin', ['Europe/Volgograd']], ['Kaluga', ['Europe/Moscow']], ['Korolev', ['Europe/Moscow']], ['Kaliningrad', ['Europe/Kaliningrad']], ['Izmaylovo', ['Europe/Moscow']], ['Izhevsk', ['Europe/Samara']], ['Ivanovskoye', ['Europe/Moscow']], ['Ivanovo', ['Europe/Moscow']], ['Groznyy', ['Europe/Moscow']], ['Gol\u2019yanovo', ['Europe/Moscow']], ['Glazov', ['Europe/Samara']], ['Engels', ['Europe/Saratov']], ['Elista', ['Europe/Moscow']], ['Elektrostal\u2019', ['Europe/Moscow']], ['Dzerzhinsk', ['Europe/Moscow']], ['Dimitrovgrad', ['Europe/Ulyanovsk']], ['Derbent', ['Europe/Moscow']], ['Cherkessk', ['Europe/Moscow']], ['Cherepovets', ['Europe/Moscow']], ['Cher\xEBmushki', ['Europe/Moscow']], ['Cheboksary', ['Europe/Moscow']], ['Bryansk', ['Europe/Moscow']], ['Brateyevo', ['Europe/Moscow']], ['Bogorodskoye', ['Europe/Moscow']], ['Biryul\xEBvo', ['Europe/Moscow']], ['Bibirevo', ['Europe/Moscow']], ['Berezniki', ['Asia/Yekaterinburg']], ['Belgorod', ['Europe/Moscow']], ['Bataysk', ['Europe/Moscow']], ['Balashikha', ['Europe/Moscow']], ['Balakovo', ['Europe/Saratov']], ['Astrakhan', ['Europe/Astrakhan']], ['Arzamas', ['Europe/Moscow']], ['Armavir', ['Europe/Moscow']], ['Arkhangel\u2019sk', ['Europe/Moscow']], ['Al\u2019met\u2019yevsk', ['Europe/Moscow']], ['Alma-Ata', ['Europe/Moscow']], ['Yekaterinburg', ['Asia/Yekaterinburg']], ['Tyumen', ['Asia/Yekaterinburg']], ['Tomsk', ['Asia/Tomsk']], ['Tobolsk', ['Asia/Yekaterinburg']], ['Surgut', ['Asia/Yekaterinburg']], ['Rubtsovsk', ['Asia/Barnaul']], ['Prokop\u2019yevsk', ['Asia/Novokuznetsk']], ['Omsk', ['Asia/Omsk']], ['Noyabrsk', ['Asia/Yekaterinburg']], ['Novosibirsk', ['Asia/Novosibirsk']], ['Novokuznetsk', ['Asia/Novokuznetsk']], ['Norilsk', ['Asia/Krasnoyarsk']], ['Nizhnevartovsk', ['Asia/Yekaterinburg']], ['Nefteyugansk', ['Asia/Yekaterinburg']], ['Miass', ['Asia/Yekaterinburg']], ['Mezhdurechensk', ['Asia/Novokuznetsk']], ['Leninsk-Kuznetsky', ['Asia/Novokuznetsk']], ['Kyzyl', ['Asia/Krasnoyarsk']], ['Kurgan', ['Asia/Yekaterinburg']], ['Krasnoyarsk', ['Asia/Krasnoyarsk']], ['Kisel\xEBvsk', ['Asia/Novokuznetsk']], ['Khanty-Mansiysk', ['Asia/Yekaterinburg']], ['Kemerovo', ['Asia/Novokuznetsk']], ['Kansk', ['Asia/Krasnoyarsk']], ['Kamensk-Ural\u2019skiy', ['Asia/Yekaterinburg']], ['Chelyabinsk', ['Asia/Yekaterinburg']], ['Biysk', ['Asia/Barnaul']], ['Barnaul', ['Asia/Barnaul']], ['Achinsk', ['Asia/Krasnoyarsk']], ['Abakan', ['Asia/Krasnoyarsk']], ['Seversk', ['Asia/Tomsk']], ['Yakutsk', ['Asia/Yakutsk']], ['Vladivostok', ['Asia/Vladivostok']], ['Ust\u2019-Ilimsk', ['Asia/Irkutsk']], ['Ussuriysk', ['Asia/Vladivostok']], ['Ulan-Ude', ['Asia/Irkutsk']], ['Nakhodka', ['Asia/Vladivostok']], ['Komsomolsk-on-Amur', ['Asia/Vladivostok']], ['Khabarovsk', ['Asia/Vladivostok']], ['Irkutsk', ['Asia/Irkutsk']], ['Chita', ['Asia/Chita']], ['Blagoveshchensk', ['Asia/Yakutsk']], ['Art\xEBm', ['Asia/Vladivostok']], ['Angarsk', ['Asia/Irkutsk']], ['Bratsk', ['Asia/Irkutsk']], ['Khabarovsk Vtoroy', ['Asia/Vladivostok']], ['Yuzhno-Sakhalinsk', ['Asia/Sakhalin']], ['Petropavlovsk-Kamchatsky', ['Asia/Kamchatka']], ['Chertanovo Yuzhnoye', ['Europe/Moscow']], ['Orekhovo-Borisovo', ['Europe/Moscow']], ['Petrogradka', ['Europe/Moscow']], ["Vasyl'evsky Ostrov", ['Europe/Moscow']], ['Kalininskiy', ['Europe/Moscow']], ['Krasnogvargeisky', ['Europe/Moscow']], ['Admiralteisky', ['Europe/Moscow']], ['Akademicheskoe', ['Europe/Moscow']], ['Centralniy', ['Europe/Moscow']], ['Kigali', ['Africa/Kigali']], ['Gisenyi', ['Africa/Kigali']], ['Yanbu', ['Asia/Riyadh']], ['Tabuk', ['Asia/Riyadh']], ['Sul\u0163\u0101nah', ['Asia/Riyadh']], ['Sakakah', ['Asia/Riyadh']], ['Najr\u0101n', ['Asia/Riyadh']], ['Mecca', ['Asia/Riyadh']], ['Khamis Mushait', ['Asia/Riyadh']], ['Jizan', ['Asia/Riyadh']], ['Jeddah', ['Asia/Riyadh']], ["Ha'il", ['Asia/Riyadh']], ['Hafar Al-Batin', ['Asia/Riyadh']], ['Buraydah', ['Asia/Riyadh']], ['Az Zulf\u012B', ['Asia/Riyadh']], ['Ta\u2019if', ['Asia/Riyadh']], ['Riyadh', ['Asia/Riyadh']], ['Arar', ['Asia/Riyadh']], ['Qurayyat', ['Asia/Riyadh']], ['Al Mubarraz', ['Asia/Riyadh']], ['Medina', ['Asia/Riyadh']], ['Khobar', ['Asia/Riyadh']], ['Al Kharj', ['Asia/Riyadh']], ['Al Jubayl', ['Asia/Riyadh']], ['Al Huf\u016Bf', ['Asia/Riyadh']], ['Dammam', ['Asia/Riyadh']], ['Abha', ['Asia/Riyadh']], ['Sabt Alalayah', ['Asia/Riyadh']], ['Wad Medani', ['Africa/Khartoum']], ['Omdurman', ['Africa/Khartoum']], ['Singa', ['Africa/Khartoum']], ['Sinnar', ['Africa/Khartoum']], ['Rabak', ['Africa/Khartoum']], ['Nyala', ['Africa/Khartoum']], ['Kosti', ['Africa/Khartoum']], ['Kassala', ['Africa/Khartoum']], ['Atbara', ['Africa/Khartoum']], ['An Nuh\u016Bd', ['Africa/Khartoum']], ['El Obeid', ['Africa/Khartoum']], ['Al Qadarif', ['Africa/Khartoum']], ['Al Man\u0101qil', ['Africa/Khartoum']], ['Khartoum', ['Africa/Khartoum']], ['Geneina', ['Africa/Khartoum']], ['El Fasher', ['Africa/Khartoum']], ['El Daein', ['Africa/Khartoum']], ['Ed Damer', ['Africa/Khartoum']], ['Ad-Damazin', ['Africa/Khartoum']], ['Gereida', ['Africa/Khartoum']], ['Ume\xE5', ['Europe/Stockholm']], ['V\xE4ster\xE5s', ['Europe/Stockholm']], ['Uppsala', ['Europe/Stockholm']], ['Stockholm', ['Europe/Stockholm']], ['Sollentuna', ['Europe/Stockholm']], ['S\xF6dermalm', ['Europe/Stockholm']], ['\xD6rebro', ['Europe/Stockholm']], ['Malm\xF6', ['Europe/Stockholm']], ['Link\xF6ping', ['Europe/Stockholm']], ['Helsingborg', ['Europe/Stockholm']], ['G\xF6teborg', ['Europe/Stockholm']], ['Singapore', ['Asia/Singapore']], ['Geylang', ['Asia/Singapore']], ['Woodlands', ['Asia/Singapore']], ['Ljubljana', ['Europe/Ljubljana']], ['Ko\u0161ice', ['Europe/Bratislava']], ['Bratislava', ['Europe/Bratislava']], ['Koidu', ['Africa/Freetown']], ['Kenema', ['Africa/Freetown']], ['Freetown', ['Africa/Freetown']], ['Bo', ['Africa/Freetown']], ['Ziguinchor', ['Africa/Dakar']], ['Touba', ['Africa/Dakar']], ['Ti\xE9bo', ['Africa/Dakar']], ['Thi\xE8s Nones', ['Africa/Dakar']], ['Thi\xE8s', ['Africa/Dakar']], ['Saint-Louis', ['Africa/Dakar']], ['Pikine', ['Africa/Dakar']], ['Kaolack', ['Africa/Dakar']], ['Dakar', ['Africa/Dakar']], ['Mogadishu', ['Africa/Mogadishu']], ['Marka', ['Africa/Mogadishu']], ['Kismayo', ['Africa/Mogadishu']], ['Jamaame', ['Africa/Mogadishu']], ['Hargeysa', ['Africa/Mogadishu']], ['Berbera', ['Africa/Mogadishu']], ['Baidoa', ['Africa/Mogadishu']], ['Paramaribo', ['America/Paramaribo']], ['Yei', ['Africa/Juba']], ['Winejok', ['Africa/Juba']], ['Wau', ['Africa/Juba']], ['Malakal', ['Africa/Juba']], ['Juba', ['Africa/Juba']], ['Soyapango', ['America/El_Salvador']], ['Santa Ana', ['America/Los_Angeles', 'America/El_Salvador']], ['San Salvador', ['America/El_Salvador']], ['Santa Tecla', ['America/El_Salvador']], ['Mejicanos', ['America/El_Salvador']], ['Apopa', ['America/El_Salvador']], ['Idlib', ['Asia/Damascus']], ['Homs', ['Asia/Damascus']], ['\u1E28am\u0101h', ['Asia/Damascus']], ['Aleppo', ['Asia/Damascus']], ['D\u016Bm\u0101', ['Asia/Damascus']], ['Damascus', ['Asia/Damascus']], ['Deir ez-Zor', ['Asia/Damascus']], ['Ar Raqqah', ['Asia/Damascus']], ['Latakia', ['Asia/Damascus']], ['Al B\u0101b', ['Asia/Damascus']], ['Manzini', ['Africa/Mbabane']], ['Sarh', ['Africa/Ndjamena']], ["N'Djamena", ['Africa/Ndjamena']], ['Moundou', ['Africa/Ndjamena']], ['Sokod\xE9', ['Africa/Lome']], ['Lom\xE9', ['Africa/Lome']], ['Kara', ['Africa/Lome']], ['Surat Thani', ['Asia/Bangkok']], ['Nakhon Si Thammarat', ['Asia/Bangkok']], ['Lampang', ['Asia/Bangkok']], ['Chiang Mai', ['Asia/Bangkok']], ['Udon Thani', ['Asia/Bangkok']], ['Ubon Ratchathani', ['Asia/Bangkok']], ['Si Racha', ['Asia/Bangkok']], ['Samut Prakan', ['Asia/Bangkok']], ['Rayong', ['Asia/Bangkok']], ['Phra Pradaeng', ['Asia/Bangkok']], ['Phitsanulok', ['Asia/Bangkok']], ['Pak Kret', ['Asia/Bangkok']], ['Mueang Nonthaburi', ['Asia/Bangkok']], ['Nakhon Ratchasima', ['Asia/Bangkok']], ['Nakhon Pathom', ['Asia/Bangkok']], ['Bangkok', ['Asia/Bangkok']], ['Khon Kaen', ['Asia/Bangkok']], ['Khlong Luang', ['Asia/Bangkok']], ['Hat Yai', ['Asia/Bangkok']], ['Chon Buri', ['Asia/Bangkok']], ['Istaravshan', ['Asia/Dushanbe']], ['Bokhtar', ['Asia/Dushanbe']], ['K\u016Dlob', ['Asia/Dushanbe']], ['Dushanbe', ['Asia/Dushanbe']], ['Khujand', ['Asia/Dushanbe']], ['Konibodom', ['Asia/Dushanbe']], ['Isfara', ['Asia/Dushanbe']], ['Dili', ['Asia/Dili']], ['Ashgabat', ['Asia/Ashgabat']], ['Da\u015Foguz', ['Asia/Ashgabat']], ['Mary', ['Asia/Ashgabat']], ['T\xFCrkmenabat', ['Asia/Ashgabat']], ['Tunis', ['Africa/Tunis']], ['Sousse', ['Africa/Tunis']], ['Sfax', ['Africa/Tunis']], ['Gab\xE8s', ['Africa/Tunis']], ['Bizerte', ['Africa/Tunis']], ['Kairouan', ['Africa/Tunis']], ['Viran\u015Fehir', ['Europe/Istanbul']], ['Van', ['Europe/Istanbul']], ['U\u015Fak', ['Europe/Istanbul']], ['\u015Eanl\u0131urfa', ['Europe/Istanbul']], ['Turgutlu', ['Europe/Istanbul']], ['Tarsus', ['Europe/Istanbul']], ['Siverek', ['Europe/Istanbul']], ['Sivas', ['Europe/Istanbul']], ['Siirt', ['Europe/Istanbul']], ['Osmaniye', ['Europe/Istanbul']], ['Nazilli', ['Europe/Istanbul']], ['Mersin', ['Europe/Istanbul']], ['Manisa', ['Europe/Istanbul']], ['Malatya', ['Europe/Istanbul']], ['K\xFCtahya', ['Europe/Istanbul']], ['Konya', ['Europe/Istanbul']], ['K\u0131z\u0131ltepe', ['Europe/Istanbul']], ['K\u0131r\u0131kkale', ['Europe/Istanbul']], ['Kayseri', ['Europe/Istanbul']], ['Karaman', ['Europe/Istanbul']], ['Kahramanmara\u015F', ['Europe/Istanbul']], ['\u0130zmir', ['Europe/Istanbul']], ['Isparta', ['Europe/Istanbul']], ['\u0130skenderun', ['Europe/Istanbul']], ['Gaziantep', ['Europe/Istanbul']], ['Eski\u015Fehir', ['Europe/Istanbul']], ['Erzurum', ['Europe/Istanbul']], ['Erzincan', ['Europe/Istanbul']], ['Elaz\u0131\u011F', ['Europe/Istanbul']], ['Diyarbak\u0131r', ['Europe/Istanbul']], ['Denizli', ['Europe/Istanbul']], ['Batman', ['Europe/Istanbul']], ['Bal\u0131kesir', ['Europe/Istanbul']], ['Ayd\u0131n', ['Europe/Istanbul']], ['Antalya', ['Europe/Istanbul']], ['Antakya', ['Europe/Istanbul']], ['Ankara', ['Europe/Istanbul']], ['Alanya', ['Europe/Istanbul']], ['Aksaray', ['Europe/Istanbul']], ['Afyonkarahisar', ['Europe/Istanbul']], ['Ad\u0131yaman', ['Europe/Istanbul']], ['Adana', ['Europe/Istanbul']], ['Batikent', ['Europe/Istanbul']], ['Zonguldak', ['Europe/Istanbul']], ['Zeytinburnu', ['Europe/Istanbul']], ['\xDCsk\xFCdar', ['Europe/Istanbul']], ['Umraniye', ['Europe/Istanbul']], ['Turhal', ['Europe/Istanbul']], ['Trabzon', ['Europe/Istanbul']], ['Tokat', ['Europe/Istanbul']], ['Tekirda\u011F', ['Europe/Istanbul']], ['\u015Ei\u015Fli', ['Europe/Istanbul']], ['Samsun', ['Europe/Istanbul']], ['Ordu', ['Europe/Istanbul']], ['Mustafakemalpa\u015Fa', ['Europe/Istanbul']], ['Maltepe', ['Europe/Istanbul']], ['\u0130zmit', ['Europe/Istanbul']], ['Istanbul', ['Europe/Istanbul']], ['\u0130negol', ['Europe/Istanbul']], ['Gebze', ['Europe/Istanbul']], ['Esenyurt', ['Europe/Istanbul']], ['Esenler', ['Europe/Istanbul']], ['Edirne', ['Europe/Istanbul']], ['Derince', ['Europe/Istanbul']], ['\xC7orum', ['Europe/Istanbul']], ['\xC7orlu', ['Europe/Istanbul']], ['Bursa', ['Europe/Istanbul']], ['Band\u0131rma', ['Europe/Istanbul']], ['Ba\u011Fc\u0131lar', ['Europe/Istanbul']], ['Arnavutk\xF6y', ['Europe/Istanbul']], ['Adapazar\u0131', ['Europe/Istanbul']], ['Ata\u015Fehir', ['Europe/Istanbul']], ['Ba\u015Fak\u015Fehir', ['Europe/Istanbul']], ['Beylikd\xFCz\xFC', ['Europe/Istanbul']], ['B\xFCy\xFCk\xE7ekmece', ['Europe/Istanbul']], ['\xC7ankaya', ['Europe/Istanbul']], ['Bah\xE7elievler', ['Europe/Istanbul']], ['Sultangazi', ['Europe/Istanbul']], ['Sultanbeyli', ['Europe/Istanbul']], ['Sancaktepe', ['Europe/Istanbul']], ['Karaba\u011Flar', ['Europe/Istanbul']], ['Muratpa\u015Fa', ['Europe/Istanbul']], ['Merkezefendi', ['Europe/Istanbul']], ['Douliu', ['Asia/Taipei']], ['Yongkang', ['Asia/Taipei']], ['Yuanlin', ['Asia/Taipei']], ['Taipei', ['Asia/Taipei']], ['Tainan', ['Asia/Taipei']], ['Taichung', ['Asia/Taipei']], ['Shulin', ['Asia/Taipei']], ['Banqiao', ['Asia/Taipei']], ['Sanxia', ['Asia/Taipei']], ['Bade', ['Asia/Taipei']], ['Neihu', ['Asia/Taipei']], ['Nantou', ['Asia/Taipei']], ['Kaohsiung', ['Asia/Taipei']], ['Hualien City', ['Asia/Taipei']], ['Hsinchu', ['Asia/Taipei']], ['Xizhi', ['Asia/Taipei']], ['Keelung', ['Asia/Taipei']], ['Taoyuan City', ['Asia/Taipei']], ['Zanzibar', ['Africa/Dar_es_Salaam']], ['Tanga', ['Africa/Dar_es_Salaam']], ['Tabora', ['Africa/Dar_es_Salaam']], ['Shinyanga', ['Africa/Dar_es_Salaam']], ['Mwanza', ['Africa/Dar_es_Salaam']], ['Musoma', ['Africa/Dar_es_Salaam']], ['Moshi', ['Africa/Dar_es_Salaam']], ['Morogoro', ['Africa/Dar_es_Salaam']], ['Mbeya', ['Africa/Dar_es_Salaam']], ['Kigoma', ['Africa/Dar_es_Salaam']], ['Katumba', ['Africa/Dar_es_Salaam']], ['Iringa', ['Africa/Dar_es_Salaam']], ['Dodoma', ['Africa/Dar_es_Salaam']], ['Dar es Salaam', ['Africa/Dar_es_Salaam']], ['Arusha', ['Africa/Dar_es_Salaam']], ['Songea', ['Africa/Dar_es_Salaam']], ['Zhytomyr', ['Europe/Kiev']], ['Zaporizhzhya', ['Europe/Zaporozhye']], ['Yevpatoriya', ['Europe/Simferopol']], ['Vinnytsya', ['Europe/Kiev']], ['Uzhgorod', ['Europe/Uzhgorod']], ['Ternopil', ['Europe/Kiev']], ['Sievierodonetsk', ['Europe/Zaporozhye']], ['Sumy', ['Europe/Kiev']], ['Sloviansk', ['Europe/Kiev']], ['Simferopol', ['Europe/Simferopol']], ['Sevastopol', ['Europe/Simferopol']], ['Rivne', ['Europe/Kiev']], ['Poltava', ['Europe/Kiev']], ['Pavlohrad', ['Europe/Kiev']], ['Odesa', ['Europe/Kiev']], ['Nikopol', ['Europe/Kiev']], ['Mykolayiv', ['Europe/Kiev']], ['Melitopol', ['Europe/Zaporozhye']], ['Mariupol', ['Europe/Kiev']], ['Makiivka', ['Europe/Kiev']], ['Lviv', ['Europe/Kiev']], ['Lutsk', ['Europe/Kiev']], ['Luhansk', ['Europe/Zaporozhye']], ['Kyiv', ['Europe/Kiev']], ['Kryvyy Rih', ['Europe/Kiev']], ['Kremenchuk', ['Europe/Kiev']], ['Kramatorsk', ['Europe/Kiev']], ['Kropyvnytskyy', ['Europe/Kiev']], ['Khmelnytskyi', ['Europe/Kiev']], ['Kherson', ['Europe/Kiev']], ['Kharkiv', ['Europe/Kiev']], ['Kerch', ['Europe/Simferopol']], ['Ivano-Frankivsk', ['Europe/Kiev']], ['Horlivka', ['Europe/Kiev']], ['Donetsk', ['Europe/Kiev']], ['Dnipro', ['Europe/Kiev']], ['Kamyanske', ['Europe/Kiev']], ['Chernivtsi', ['Europe/Kiev']], ['Chernihiv', ['Europe/Kiev']], ['Cherkasy', ['Europe/Kiev']], ['Bila Tserkva', ['Europe/Kiev']], ['Berdyansk', ['Europe/Zaporozhye']], ['Alchevsk', ['Europe/Zaporozhye']], ['Lira', ['Africa/Kampala']], ['Kampala', ['Africa/Kampala']], ['Gulu', ['Africa/Kampala']], ['Huntsville', ['America/Chicago']], ['Mobile', ['America/Chicago']], ['Montgomery', ['America/Chicago']], ['Little Rock', ['America/Chicago']], ['Washington', ['America/New_York']], ['Brandon', ['America/New_York']], ['Cape Coral', ['America/New_York']], ['Clearwater', ['America/New_York']], ['Coral Springs', ['America/New_York']], ['Davie', ['America/New_York']], ['Fort Lauderdale', ['America/New_York']], ['Gainesville', ['America/New_York']], ['Hialeah', ['America/New_York']], ['Hollywood', ['America/Los_Angeles', 'America/New_York']], ['Jacksonville', ['America/New_York']], ['Lakeland', ['America/New_York']], ['Miami', ['America/New_York']], ['Miami Gardens', ['America/New_York']], ['Orlando', ['America/New_York']], ['Palm Bay', ['America/New_York']], ['Pembroke Pines', ['America/New_York']], ['Pompano Beach', ['America/New_York']], ['Port Saint Lucie', ['America/New_York']], ['St. Petersburg', ['America/New_York']], ['Tallahassee', ['America/New_York']], ['Tampa', ['America/New_York']], ['West Palm Beach', ['America/New_York']], ['Atlanta', ['America/New_York']], ['Columbus', ['America/New_York']], ['Sandy Springs', ['America/New_York']], ['Savannah', ['America/New_York']], ['Springfield', ['America/New_York', 'America/Chicago']], ['Evansville', ['America/Chicago']], ['Indianapolis', ['America/Indiana/Indianapolis']], ['Kansas City', ['America/Chicago']], ['Olathe', ['America/Chicago']], ['Overland Park', ['America/Chicago']], ['Topeka', ['America/Chicago']], ['Wichita', ['America/Chicago']], ['Ironville', ['America/New_York']], ['Lexington', ['America/New_York']], ['Lexington-Fayette', ['America/New_York']], ['Louisville', ['America/Kentucky/Louisville']], ['Meads', ['America/New_York']], ['Baton Rouge', ['America/Chicago']], ['Lafayette', ['America/Chicago']], ['Metairie', ['America/Chicago']], ['Metairie Terrace', ['America/Chicago']], ['New Orleans', ['America/Chicago']], ['Shreveport', ['America/Chicago']], ['Baltimore', ['America/New_York']], ['Columbia', ['America/New_York', 'America/Chicago']], ['East Independence', ['America/Chicago']], ['Independence', ['America/Chicago']], ['St. Louis', ['America/Chicago']], ['Jackson', ['America/Chicago']], ['Cary', ['America/New_York']], ['Charlotte', ['America/New_York']], ['Durham', ['America/New_York']], ['Fayetteville', ['America/New_York']], ['Greensboro', ['America/New_York']], ['High Point', ['America/New_York']], ['Raleigh', ['America/New_York']], ['West Raleigh', ['America/New_York']], ['Wilmington', ['America/New_York']], ['Winston-Salem', ['America/New_York']], ['Cincinnati', ['America/New_York']], ['Dayton', ['America/New_York']], ['Broken Arrow', ['America/Chicago']], ['Norman', ['America/Chicago']], ['Oklahoma City', ['America/Chicago']], ['Tulsa', ['America/Chicago']], ['Philadelphia', ['America/New_York']], ['Charleston', ['America/New_York']], ['North Charleston', ['America/New_York']], ['Chattanooga', ['America/New_York']], ['Clarksville', ['America/Chicago']], ['East Chattanooga', ['America/New_York']], ['Knoxville', ['America/New_York']], ['Memphis', ['America/Chicago']], ['Murfreesboro', ['America/Chicago']], ['Nashville', ['America/Chicago']], ['New South Memphis', ['America/Chicago']], ['Abilene', ['America/Chicago']], ['Arlington', ['America/Chicago', 'America/New_York']], ['Austin', ['America/Chicago']], ['Beaumont', ['America/Chicago']], ['Brownsville', ['America/Chicago']], ['Carrollton', ['America/Chicago']], ['College Station', ['America/Chicago']], ['Corpus Christi', ['America/Chicago']], ['Dallas', ['America/Chicago']], ['Denton', ['America/Chicago']], ['Fort Worth', ['America/Chicago']], ['Frisco', ['America/Chicago']], ['Garland', ['America/Chicago']], ['Grand Prairie', ['America/Chicago']], ['Houston', ['America/Chicago']], ['Irving', ['America/Chicago']], ['Killeen', ['America/Chicago']], ['Laredo', ['America/Chicago']], ['Lewisville', ['America/Chicago']], ['McAllen', ['America/Chicago']], ['McKinney', ['America/Chicago']], ['Mesquite', ['America/Chicago']], ['Pasadena', ['America/Chicago', 'America/Los_Angeles']], ['Pearland', ['America/Chicago']], ['Plano', ['America/Chicago']], ['Richardson', ['America/Chicago']], ['Round Rock', ['America/Chicago']], ['San Antonio', ['America/Chicago']], ['Tyler', ['America/Chicago']], ['Waco', ['America/Chicago']], ['Wichita Falls', ['America/Chicago']], ['Chesapeake', ['America/New_York']], ['East Hampton', ['America/New_York']], ['Hampton', ['America/New_York']], ['Newport News', ['America/New_York']], ['Norfolk', ['America/New_York']], ['Virginia Beach', ['America/New_York']], ['Hartford', ['America/New_York']], ['New Haven', ['America/New_York']], ['North Stamford', ['America/New_York']], ['Stamford', ['America/New_York']], ['Waterbury', ['America/New_York']], ['Cedar Rapids', ['America/Chicago']], ['Davenport', ['America/Chicago']], ['Des Moines', ['America/Chicago']], ['Aurora', ['America/Denver', 'America/Chicago']], ['Chicago', ['America/Chicago']], ['Elgin', ['America/Chicago']], ['Joliet', ['America/Chicago']], ['Naperville', ['America/Chicago']], ['North Peoria', ['America/Chicago']], ['Peoria', ['America/Phoenix', 'America/Chicago']], ['Rockford', ['America/Chicago']], ['Fort Wayne', ['America/Indiana/Indianapolis']], ['South Bend', ['America/Indiana/Indianapolis']], ['Boston', ['America/New_York']], ['Lowell', ['America/New_York']], ['New Bedford', ['America/New_York']], ['South Boston', ['America/New_York']], ['Ann Arbor', ['America/Detroit']], ['Detroit', ['America/Detroit']], ['Grand Rapids', ['America/Detroit']], ['Lansing', ['America/Detroit']], ['Sterling Heights', ['America/Detroit']], ['Warren', ['America/Detroit']], ['Minneapolis', ['America/Chicago']], ['Rochester', ['America/New_York', 'America/Chicago']], ['St. Paul', ['America/Chicago']], ['Saint Paul', ['America/Chicago']], ['Fargo', ['America/Chicago']], ['Omaha', ['America/Chicago']], ['Edison', ['America/New_York']], ['Elizabeth', ['America/New_York']], ['Jersey City', ['America/New_York']], ['Newark', ['America/New_York']], ['Paterson', ['America/New_York']], ['Amherst', ['America/New_York']], ['Astoria', ['America/New_York']], ['Borough Park', ['America/New_York']], ['The Bronx', ['America/New_York']], ['Brooklyn', ['America/New_York']], ['Buffalo', ['America/New_York']], ['Bushwick', ['America/New_York']], ['Corona', ['America/Los_Angeles', 'America/New_York']], ['East Flatbush', ['America/New_York']], ['New York', ['America/New_York']], ['Elmhurst', ['America/New_York']], ['Gravesend', ['America/New_York']], ['Harlem', ['America/New_York']], ['Jamaica', ['America/New_York']], ['Manhattan', ['America/New_York']], ['New York City', ['America/New_York']], ['Queens', ['America/New_York']], ['Sheepshead Bay', ['America/New_York']], ['Staten Island', ['America/New_York']], ['Syracuse', ['America/New_York']], ['Washington Heights', ['America/New_York']], ['Yonkers', ['America/New_York']], ['Akron', ['America/New_York']], ['Cleveland', ['America/New_York']], ['Allentown', ['America/New_York']], ['Pittsburgh', ['America/New_York']], ['Providence', ['America/New_York']], ['Sioux Falls', ['America/Chicago']], ['Green Bay', ['America/Chicago']], ['Madison', ['America/Chicago']], ['Milwaukee', ['America/Chicago']], ['Bridgeport', ['America/New_York']], ['Chandler', ['America/Phoenix']], ['Deer Valley', ['America/Phoenix']], ['Gilbert', ['America/Phoenix']], ['Glendale', ['America/Phoenix', 'America/Los_Angeles']], ['Maryvale', ['America/Phoenix']], ['Mesa', ['America/Phoenix']], ['Phoenix', ['America/Phoenix']], ['Scottsdale', ['America/Phoenix']], ['Surprise', ['America/Phoenix']], ['Tempe', ['America/Phoenix']], ['Tempe Junction', ['America/Phoenix']], ['Tucson', ['America/Phoenix']], ['Anaheim', ['America/Los_Angeles']], ['Antioch', ['America/Los_Angeles']], ['Bakersfield', ['America/Los_Angeles']], ['Bellevue', ['America/Los_Angeles']], ['Berkeley', ['America/Los_Angeles']], ['Burbank', ['America/Los_Angeles']], ['Carlsbad', ['America/Los_Angeles']], ['Carson City', ['America/Los_Angeles']], ['Chico', ['America/Los_Angeles']], ['Chinatown', ['America/Los_Angeles']], ['Chula Vista', ['America/Los_Angeles']], ['Clovis', ['America/Los_Angeles']], ['Concord', ['America/Los_Angeles']], ['Costa Mesa', ['America/Los_Angeles']], ['Daly City', ['America/Los_Angeles']], ['Downey', ['America/Los_Angeles']], ['El Cajon', ['America/Los_Angeles']], ['El Monte', ['America/Los_Angeles']], ['Elk Grove', ['America/Los_Angeles']], ['Enterprise', ['America/Los_Angeles']], ['Escondido', ['America/Los_Angeles']], ['Eugene', ['America/Los_Angeles']], ['Everett', ['America/Los_Angeles']], ['Fairfield', ['America/Los_Angeles']], ['Fontana', ['America/Los_Angeles']], ['Fremont', ['America/Los_Angeles']], ['Fresno', ['America/Los_Angeles']], ['Fullerton', ['America/Los_Angeles']], ['Garden Grove', ['America/Los_Angeles']], ['Gresham', ['America/Los_Angeles']], ['Hayward', ['America/Los_Angeles']], ['Henderson', ['America/Los_Angeles']], ['Hillsboro', ['America/Los_Angeles']], ['Huntington Beach', ['America/Los_Angeles']], ['Inglewood', ['America/Los_Angeles']], ['Irvine', ['America/Los_Angeles']], ['Kent', ['America/Los_Angeles']], ['Koreatown', ['America/Los_Angeles']], ['Lancaster', ['America/Los_Angeles']], ['Las Vegas', ['America/Los_Angeles']], ['Long Beach', ['America/Los_Angeles']], ['Los Angeles', ['America/Los_Angeles']], ['Modesto', ['America/Los_Angeles']], ['Moreno Valley', ['America/Los_Angeles']], ['Murrieta', ['America/Los_Angeles']], ['North Las Vegas', ['America/Los_Angeles']], ['Norwalk', ['America/Los_Angeles']], ['Oakland', ['America/Los_Angeles']], ['Oceanside', ['America/Los_Angeles']], ['Ontario', ['America/Los_Angeles']], ['Orange', ['America/Los_Angeles']], ['Oxnard', ['America/Los_Angeles']], ['Palmdale', ['America/Los_Angeles']], ['Paradise', ['America/Los_Angeles']], ['Pomona', ['America/Los_Angeles']], ['Portland', ['America/Los_Angeles']], ['Rancho Cucamonga', ['America/Los_Angeles']], ['Reno', ['America/Los_Angeles']], ['Renton', ['America/Los_Angeles']], ['Rialto', ['America/Los_Angeles']], ['Riverside', ['America/Los_Angeles']], ['Roseville', ['America/Los_Angeles']], ['Sacramento', ['America/Los_Angeles']], ['Salinas', ['America/Los_Angeles']], ['San Bernardino', ['America/Los_Angeles']], ['San Diego', ['America/Los_Angeles']], ['San Francisco', ['America/Los_Angeles']], ['Santa Clarita', ['America/Los_Angeles']], ['Seattle', ['America/Los_Angeles']], ['Simi Valley', ['America/Los_Angeles']], ['Spokane', ['America/Los_Angeles']], ['Spring Valley', ['America/Los_Angeles']], ['Stockton', ['America/Los_Angeles']], ['Sunnyvale', ['America/Los_Angeles']], ['Sunrise Manor', ['America/Los_Angeles']], ['Tacoma', ['America/Los_Angeles']], ['Temecula', ['America/Los_Angeles']], ['Thousand Oaks', ['America/Los_Angeles']], ['Torrance', ['America/Los_Angeles']], ['Tri-Cities', ['America/Los_Angeles']], ['Universal City', ['America/Los_Angeles']], ['Vallejo', ['America/Los_Angeles']], ['Van Nuys', ['America/Los_Angeles']], ['Victorville', ['America/Los_Angeles']], ['Visalia', ['America/Los_Angeles']], ['Vista', ['America/Los_Angeles']], ['West Covina', ['America/Los_Angeles']], ['Arvada', ['America/Denver']], ['Centennial', ['America/Denver']], ['Colorado Springs', ['America/Denver']], ['Denver', ['America/Denver']], ['Lakewood', ['America/Denver']], ['Pueblo', ['America/Denver']], ['Thornton', ['America/Denver']], ['Westminster', ['America/Denver']], ['Albuquerque', ['America/Denver']], ['Las Cruces', ['America/Denver']], ['Amarillo', ['America/Chicago']], ['El Paso', ['America/Denver']], ['Lubbock', ['America/Chicago']], ['Midland', ['America/Chicago']], ['Odessa', ['America/Chicago']], ['San Angelo', ['America/Chicago']], ['Alhambra', ['America/Phoenix']], ['Boulder', ['America/Denver']], ['Fort Collins', ['America/Denver']], ['Greeley', ['America/Denver']], ['Boise', ['America/Boise']], ['Billings', ['America/Denver']], ['Provo', ['America/Denver']], ['Salt Lake City', ['America/Denver']], ['West Jordan', ['America/Denver']], ['West Valley City', ['America/Denver']], ['Honolulu', ['Pacific/Honolulu']], ['Anchorage', ['America/Anchorage']], ['East Harlem', ['America/New_York']], ['Sunset Park', ['America/New_York']], ['Montevideo', ['America/Montevideo']], ['Nukus', ['Asia/Samarkand']], ['Tirmiz', ['Asia/Samarkand']], ['Shahrisabz', ['Asia/Samarkand']], ['Samarkand', ['Asia/Samarkand']], ['Qarshi', ['Asia/Samarkand']], ['Bukhara', ['Asia/Samarkand']], ['Urganch', ['Asia/Samarkand']], ['Tashkent', ['Asia/Tashkent']], ['Qo\u2018qon', ['Asia/Tashkent']], ['Olmaliq', ['Asia/Tashkent']], ['Navoiy', ['Asia/Samarkand']], ['Namangan', ['Asia/Tashkent']], ['Marg\u2018ilon', ['Asia/Tashkent']], ['Jizzax', ['Asia/Samarkand']], ['Fergana', ['Asia/Tashkent']], ['Chirchiq', ['Asia/Tashkent']], ['Angren', ['Asia/Tashkent']], ['Andijon', ['Asia/Tashkent']], ['Anaco', ['America/Caracas']], ['Alto Barinas', ['America/Caracas']], ['Yaritagua', ['America/Caracas']], ['Valle de La Pascua', ['America/Caracas']], ['Valera', ['America/Caracas']], ['Upata', ['America/Caracas']], ['Turmero', ['America/Caracas']], ['Tinaquillo', ['America/Caracas']], ['T\xE1riba', ['America/Caracas']], ['Santa Teresa del Tuy', ['America/Caracas']], ['San Juan de los Morros', ['America/Caracas']], ['San Felipe', ['America/Caracas']], ['San Carlos', ['America/Caracas']], ['Punto Fijo', ['America/Caracas']], ['Punta Card\xF3n', ['America/Caracas']], ['Puerto La Cruz', ['America/Caracas']], ['Puerto Cabello', ['America/Caracas']], ['Puerto Ayacucho', ['America/Caracas']], ['Porlamar', ['America/Caracas']], ['Petare', ['America/Caracas']], ['Palo Negro', ['America/Caracas']], ['Ocumare del Tuy', ['America/Caracas']], ['Mariara', ['America/Caracas']], ['Maracay', ['America/Caracas']], ['Maracaibo', ['America/Caracas']], ['Los Teques', ['America/Caracas']], ['Los Rastrojos', ['America/Caracas']], ['La Victoria', ['America/Caracas']], ['Guatire', ['America/Caracas']], ['Guarenas', ['America/Caracas']], ['Guanare', ['America/Caracas']], ['Guacara', ['America/Caracas']], ['El Vig\xEDa', ['America/Caracas']], ['El Tigre', ['America/Caracas']], ['El Lim\xF3n', ['America/Caracas']], ['Ejido', ['America/Caracas']], ['Cuman\xE1', ['America/Caracas']], ['C\xFAa', ['America/Caracas']], ['Coro', ['America/Caracas']], ['Ciudad Ojeda', ['America/Caracas']], ['Ciudad Guayana', ['America/Caracas']], ['Ciudad Bol\xEDvar', ['America/Caracas']], ['Charallave', ['America/Caracas']], ['Catia La Mar', ['America/Caracas']], ['Car\xFApano', ['America/Caracas']], ['Carora', ['America/Caracas']], ['Caracas', ['America/Caracas']], ['Calabozo', ['America/Caracas']], ['Cagua', ['America/Caracas']], ['Cabudare', ['America/Caracas']], ['Cabimas', ['America/Caracas']], ['Baruta', ['America/Caracas']], ['Barquisimeto', ['America/Caracas']], ['Barinas', ['America/Caracas']], ['Araure', ['America/Caracas']], ['Acarigua', ['America/Caracas']], ['Matur\xEDn', ['America/Caracas']], ['San Fernando de Apure', ['America/Caracas']], ['Y\xEAn Vinh', ['Asia/Bangkok']], ['V\u0169ng T\xE0u', ['Asia/Ho_Chi_Minh']], ['V\u0129nh Long', ['Asia/Ho_Chi_Minh']], ['V\u0129nh Ch\xE2u', ['Asia/Ho_Chi_Minh']], ['Vinh', ['Asia/Bangkok']], ['Vi\u1EC7t Tr\xEC', ['Asia/Bangkok']], ['Th\u1ED1t N\u1ED1t', ['Asia/Ho_Chi_Minh']], ['Th\u1EDBi Lai', ['Asia/Ho_Chi_Minh']], ['Ho Chi Minh City', ['Asia/Ho_Chi_Minh']], ['Thanh H\xF3a', ['Asia/Bangkok']], ['Th\xE1i Nguy\xEAn', ['Asia/Bangkok']], ['S\xF3c Tr\u0103ng', ['Asia/Ho_Chi_Minh']], ['Sa Dec', ['Asia/Ho_Chi_Minh']], ['R\u1EA1ch Gi\xE1', ['Asia/Ho_Chi_Minh']], ['Qui Nhon', ['Asia/Ho_Chi_Minh']], ['Pleiku', ['Asia/Ho_Chi_Minh']], ['Phan Thi\u1EBFt', ['Asia/Ho_Chi_Minh']], ['\xD4 M\xF4n', ['Asia/Ho_Chi_Minh']], ['Ninh H\xF2a', ['Asia/Ho_Chi_Minh']], ['Nha Trang', ['Asia/Ho_Chi_Minh']], ['Nam \u0110\u1ECBnh', ['Asia/Bangkok']], ['M\u1EF9 Tho', ['Asia/Ho_Chi_Minh']], ['Long Xuy\xEAn', ['Asia/Ho_Chi_Minh']], ['La Gi', ['Asia/Ho_Chi_Minh']], ['Hu\u1EBF', ['Asia/Bangkok']], ['H\u1EA1 Long', ['Asia/Bangkok']], ['H\xF2a B\xECnh', ['Asia/Bangkok']], ['Hanoi', ['Asia/Bangkok']], ['Haiphong', ['Asia/Bangkok']], ['\u0110\u01B0c Tr\u1ECDng', ['Asia/Ho_Chi_Minh']], ['D\u0129 An', ['Asia/Ho_Chi_Minh']], ['Da Nang', ['Asia/Ho_Chi_Minh']], ['\xD0\xE0 L\u1EA1t', ['Asia/Ho_Chi_Minh']], ['C\u1EDD \u0110\u1ECF', ['Asia/Ho_Chi_Minh']], ['Ch\xED Linh', ['Asia/Bangkok']], ['C\u1EA7n Th\u01A1', ['Asia/Ho_Chi_Minh']], ['C\u1EA7n Giu\u1ED9c', ['Asia/Ho_Chi_Minh']], ['Cam Ranh', ['Asia/Ho_Chi_Minh']], ['C\u1EA9m Ph\u1EA3 Mines', ['Asia/Bangkok']], ['C\u1EA9m Ph\u1EA3', ['Asia/Bangkok']], ['C\xE0 Mau', ['Asia/Ho_Chi_Minh']], ['Bu\xF4n Ma Thu\u1ED9t', ['Asia/Ho_Chi_Minh']], ['Bu\xF4n H\u1ED3', ['Asia/Ho_Chi_Minh']], ['B\xECnh Th\u1EE7y', ['Asia/Ho_Chi_Minh']], ['Bi\xEAn H\xF2a', ['Asia/Ho_Chi_Minh']], ['B\u1EA3o L\u1ED9c', ['Asia/Ho_Chi_Minh']], ['B\u1EA1c Li\xEAu', ['Asia/Ho_Chi_Minh']], ['Qu\u1EADn \u0110\u1EE9c Th\u1ECBnh', ['Asia/Ho_Chi_Minh']], ['Huy\u1EC7n L\xE2m H\xE0', ['Asia/Ho_Chi_Minh']], ['Ph\xFA Qu\u1ED1c', ['Asia/Ho_Chi_Minh']], ['Thu\u1EADn An', ['Asia/Ho_Chi_Minh']], ['Prizren', ['Europe/Belgrade']], ['Pristina', ['Europe/Belgrade']], ['Mitrovic\xEB', ['Europe/Belgrade']], ['Taiz', ['Asia/Aden']], ['Sanaa', ['Asia/Aden']], ['Ibb', ['Asia/Aden']], ['Dham\u0101r', ['Asia/Aden']], ['Mukalla', ['Asia/Aden']], ['Al \u1E28udaydah', ['Asia/Aden']], ['Aden', ['Asia/Aden']], ['Roodepoort', ['Africa/Johannesburg']], ['Emalahleni', ['Africa/Johannesburg']], ['Westonaria', ['Africa/Johannesburg']], ['Welkom', ['Africa/Johannesburg']], ['Vryheid', ['Africa/Johannesburg']], ['Virginia', ['Africa/Johannesburg']], ['Vereeniging', ['Africa/Johannesburg']], ['Vanderbijlpark', ['Africa/Johannesburg']], ['Uitenhage', ['Africa/Johannesburg']], ['Tembisa', ['Africa/Johannesburg']], ['Springs', ['Africa/Johannesburg']], ['Soweto', ['Africa/Johannesburg']], ['Rustenburg', ['Africa/Johannesburg']], ['Richards Bay', ['Africa/Johannesburg']], ['Randfontein', ['Africa/Johannesburg']], ['Randburg', ['Africa/Johannesburg']], ['Queenstown', ['Africa/Johannesburg']], ['Pretoria', ['Africa/Johannesburg']], ['Mokopane', ['Africa/Johannesburg']], ['Potchefstroom', ['Africa/Johannesburg']], ['Port Elizabeth', ['Africa/Johannesburg']], ['Pinetown', ['Africa/Johannesburg']], ['Polokwane', ['Africa/Johannesburg']], ['Pietermaritzburg', ['Africa/Johannesburg']], ['Phalaborwa', ['Africa/Johannesburg']], ['Nigel', ['Africa/Johannesburg']], ['Nelspruit', ['Africa/Johannesburg']], ['Mpumalanga', ['Africa/Johannesburg']], ['Middelburg', ['Africa/Johannesburg']], ['Mabopane', ['Africa/Johannesburg']], ['Krugersdorp', ['Africa/Johannesburg']], ['Kroonstad', ['Africa/Johannesburg']], ['Klerksdorp', ['Africa/Johannesburg']], ['Kimberley', ['Africa/Johannesburg']], ['Johannesburg', ['Africa/Johannesburg']], ['George', ['Africa/Johannesburg']], ['eMbalenhle', ['Africa/Johannesburg']], ['East London', ['Africa/Johannesburg']], ['Durban', ['Africa/Johannesburg']], ['Carletonville', ['Africa/Johannesburg']], ['Brits', ['Africa/Johannesburg']], ['Brakpan', ['Africa/Johannesburg']], ['Botshabelo', ['Africa/Johannesburg']], ['Boksburg', ['Africa/Johannesburg']], ['Bloemfontein', ['Africa/Johannesburg']], ['Bhisho', ['Africa/Johannesburg']], ['Benoni', ['Africa/Johannesburg']], ['Alberton', ['Africa/Johannesburg']], ['Centurion', ['Africa/Johannesburg']], ['Paarl', ['Africa/Johannesburg']], ['Cape Town', ['Africa/Johannesburg']], ['Diepsloot', ['Africa/Johannesburg']], ['Ndola', ['Africa/Lusaka']], ['Mufulira', ['Africa/Lusaka']], ['Lusaka', ['Africa/Lusaka']], ['Luanshya', ['Africa/Lusaka']], ['Livingstone', ['Africa/Lusaka']], ['Kitwe', ['Africa/Lusaka']], ['Kabwe', ['Africa/Lusaka']], ['Chingola', ['Africa/Lusaka']], ['Mutare', ['Africa/Harare']], ['Kwekwe', ['Africa/Harare']], ['Harare', ['Africa/Harare']], ['Gweru', ['Africa/Harare']], ['Bulawayo', ['Africa/Harare']], ['Epworth', ['Africa/Harare']], ['Chitungwiza', ['Africa/Harare']], ['Adamstown', ['Pacific/Pitcairn']], ['Alofi', ['Pacific/Niue']], ['Avarua', ['Pacific/Rarotonga']], ['Bandar Seri Begawan', ['Asia/Brunei']], ['Basse-Terre', ['America/Guadeloupe']], ['Basseterre', ['America/Guadeloupe']], ['Belmopan', ['America/Belize']], ['Brades', ['America/Montserrat']], ['Bridgetown', ['America/Barbados']], ['Capitol Hill', ['Pacific/Saipan']], ['Castries', ['America/St_Lucia']], ['Charlotte Amalie', ['America/St_Thomas']], ['Douglas', ['Europe/Isle_of_Man']], ['Flying Fish Cove', ['Indian/Christmas']], ['Fort-de-France', ['America/Martinique']], ['Gitega', ['Africa/Bujumbura']], ['Grand Turk', ['America/Grand_Turk']], ['Gustavia', ['America/St_Barthelemy']], ['Hagta', ['Pacific/Guam']], ['Hag\xE5t\xF1a', ['Pacific/Guam']], ['Honiara', ['Pacific/Guadalcanal']], ['Jamestown', ['Atlantic/St_Helena']], ['Kingstown', ['America/St_Vincent']], ['Lobamba', ['Africa/Mbabane']], ['Mamoudzou', ['Indian/Mayotte']], ['Mata-Utu', ['Pacific/Wallis']], ['Moroni', ['Indian/Comoro']], ['Ngerulmud', ['Pacific/Palau']], ['Nuku`alofa', ['Pacific/Tongatapu']], ["Nuku'alofa", ['Pacific/Tongatapu']], ['Nur-Sultan', ['Asia/Almaty']], ['Oranjestad', ['America/Aruba', 'America/Kralendijk']], ['Pago Pago', ['Pacific/Apia']], ['Kanton', ['Pacific/Kanton']], ['Palikir', ['Pacific/Pohnpei']], ['Papeete', ['Pacific/Tahiti']], ['Philipsburg', ['America/Guadeloupe']], ['Port of Spain', ['America/Port_of_Spain']], ['Port-Vila', ['Pacific/Efate']], ['Rangoon', ['Asia/Yangon']], ['Road Town', ['America/Tortola']], ['Roseau', ['America/Dominica']], ["Saint George's", ['America/Grenada']], ['Saint Helier', ['Europe/Jersey']], ["Saint John's", ['America/St_Johns']], ['Saint-Pierre', ['America/Miquelon']], ['Saint Pierre', ['America/Miquelon']], ['Sao Tome', ['Africa/Sao_Tome']], ['S\xE3o Tom\xE9', ['Africa/Sao_Tome']], ['The Valley', ['America/Anguilla']], ['Tifariti', ['Africa/Casablanca']], ['Torshavn', ['Atlantic/Faroe']], ['T\xF3rshavn', ['Atlantic/Faroe']], ['Valletta', ['Europe/Malta']], ['Yaren', ['Pacific/Nauru']], ['Albany', ['America/New_York', 'America/Chicago', 'Australia/Perth']], ['Annapolis', ['America/New_York']], ['Augusta', ['America/New_York']], ['Dover', ['America/New_York', 'Europe/London']], ['Harrisburg', ['America/New_York']], ['Trenton', ['America/New_York']], ['Bismarck', ['America/Chicago']], ['Jefferson City', ['America/Chicago']], ['Pierre', ['America/Chicago']], ['Olympia', ['America/Los_Angeles', 'Europe/Athens']], ['Cheyenne', ['America/Denver']], ['Helena', ['America/Denver']], ['Frankfort', ['America/Detroit']], ['Juneau', ['America/Juneau']], ['Montpelier', ['America/New_York']], ['Jeffersonville', ['America/Indiana/Indianapolis']], ['Fredericton', ['America/Halifax']], ['Charlottetown', ['America/Halifax']], ['Kralendijk', ['America/Kralendijk']], ['Andorra La Vella', ['Europe/Andorra']], ['King Edward Point', ['Atlantic/South_Georgia']], ['West Island', ['Indian/Cocos']], ['Diego Garcia', ['Indian/Chagos']], ['Suva', ['Pacific/Fiji']], ['Port-aux-Fran\xE7ais', ['Indian/Kerguelen']], ['St. Peter Port', ['Europe/Guernsey']], ['Kuwait City', ['Asia/Kuwait']], ['Ramallah', ['Asia/Gaza']], ['The Bottom', ['America/Kralendijk']], ['Knox', ['America/Indiana/Knox']], ['Marengo', ['America/Indiana/Marengo']], ['Petersburg', ['America/Indiana/Petersburg']], ['Tell City', ['America/Indiana/Tell_City']], ['Vevay', ['America/Indiana/Vevay']], ['Vincennes', ['America/Indiana/Vincennes']], ['Winamac', ['America/Indiana/Winamac']]]),
  ei = new Map([['Afghanistan', ['Asia/Kabul']], ['\xC5land Islands', ['Europe/Mariehamn']], ['Albania', ['Europe/Tirane']], ['Algeria', ['Africa/Algiers']], ['American Samoa', ['Pacific/Pago_Pago']], ['Andorra', ['Europe/Andorra']], ['Angola', ['Africa/Luanda']], ['Anguilla', ['America/Anguilla']], ['Antarctica', ['Antarctica/Casey', 'Antarctica/Davis', 'Antarctica/DumontDUrville', 'Antarctica/Macquarie', 'Antarctica/Mawson', 'Antarctica/McMurdo', 'Antarctica/Palmer', 'Antarctica/Rothera', 'Antarctica/Syowa', 'Antarctica/Troll', 'Antarctica/Vostok']], ['Antigua and Barbuda', ['America/St_Johns']], ['Argentina', ['America/Argentina/Buenos_Aires', 'America/Argentina/Catamarca', 'America/Argentina/Cordoba', 'America/Argentina/Jujuy', 'America/Argentina/La_Rioja', 'America/Argentina/Mendoza', 'America/Argentina/Rio_Gallegos', 'America/Argentina/Salta', 'America/Argentina/San_Juan', 'America/Argentina/San_Luis', 'America/Argentina/Tucuman', 'America/Argentina/Ushuaia']], ['Armenia', ['Asia/Yerevan']], ['Aruba', ['America/Aruba']], ['Ascension', ['Atlantic/St_Helena']], ['Australia', ['Australia/Adelaide', 'Australia/Brisbane', 'Australia/Broken_Hill', 'Australia/Currie', 'Australia/Darwin', 'Australia/Eucla', 'Australia/Hobart', 'Australia/Lindeman', 'Australia/Lord_Howe', 'Australia/Melbourne', 'Australia/Perth', 'Australia/Sydney']], ['Austria', ['Europe/Vienna']], ['Azerbaijan', ['Asia/Baku']], ['Bahamas', ['America/Nassau']], ['Bahrain', ['Asia/Bahrain']], ['Bangladesh', ['Asia/Dhaka']], ['Barbados', ['America/Barbados']], ['Belarus', ['Europe/Minsk']], ['Belgium', ['Europe/Brussels']], ['Belize', ['America/Belize']], ['Benin', ['Africa/Porto-Novo']], ['Bermuda', ['Atlantic/Bermuda']], ['Bhutan', ['Asia/Thimphu']], ['Bolivia', ['America/La_Paz']], ['Bonaire', ['America/Kralendijk']], ['Sint Eustatius', ['America/Kralendijk']], ['Saba', ['America/Kralendijk']], ['Bosnia and Herzegovina', ['Europe/Sarajevo']], ['Botswana', ['Africa/Gaborone']], ['Bouvet Island', ['Europe/Oslo']], ['Brazil', ['America/Araguaina', 'America/Bahia', 'America/Belem', 'America/Boa_Vista', 'America/Campo_Grande', 'America/Cuiaba', 'America/Eirunepe', 'America/Fortaleza', 'America/Maceio', 'America/Manaus', 'America/Noronha', 'America/Porto_Velho', 'America/Recife', 'America/Rio_Branco', 'America/Santarem', 'America/Sao_Paulo']], ['British Indian Ocean Territory', ['Indian/Chagos']], ['British Virgin Islands', ['America/Tortola']], ['Brunei', ['Asia/Brunei']], ['Bulgaria', ['Europe/Sofia']], ['Burkina Faso', ['Africa/Ouagadougou']], ['Burundi', ['Africa/Bujumbura']], ['Cabo Verde', ['Atlantic/Cape_Verde']], ['Cambodia', ['Asia/Phnom_Penh']], ['Cameroon', ['Africa/Douala']], ['Canada', ['America/St_Johns', 'America/Halifax', 'America/Glace_Bay', 'America/Moncton', 'America/Goose_Bay', 'America/Blanc-Sablon', 'America/Montreal', 'America/Toronto', 'America/Nipigon', 'America/Thunder_Bay', 'America/Iqaluit', 'America/Pangnirtung', 'America/Resolute', 'America/Atikokan', 'America/Rankin_Inlet', 'America/Winnipeg', 'America/Rainy_River', 'America/Regina', 'America/Swift_Current', 'America/Edmonton', 'America/Cambridge_Bay', 'America/Yellowknife', 'America/Inuvik', 'America/Creston', 'America/Dawson_Creek', 'America/Fort_Nelson', 'America/Vancouver', 'America/Whitehorse', 'America/Dawson']], ['Cayman Islands', ['America/Cayman']], ['Central African Republic', ['Africa/Bangui']], ['Chad', ['Africa/Ndjamena']], ['Chile', ['America/Santiago', 'America/Punta_Arenas', 'Pacific/Easter']], ['China', ['Asia/Hong_Kong', 'Asia/Macau', 'Asia/Shanghai']], ['Christmas Island', ['Indian/Christmas']], ['Cocos Islands', ['Indian/Cocos']], ['Colombia', ['America/Bogota']], ['Comoros', ['Indian/Comoro']], ['Cook Islands', ['Pacific/Rarotonga']], ['Costa Rica', ['America/Costa_Rica']], ['Croatia', ['Europe/Zagreb']], ['Cuba', ['America/Havana']], ['Cura\xE7ao', ['America/Curacao']], ['Cyprus', ['Asia/Nicosia']], ['Czechia', ['Europe/Prague']], ['Denmark', ['Europe/Copenhagen']], ['Djibouti', ['Africa/Djibouti']], ['Dominica', ['America/Dominica']], ['Dominican Republic', ['America/Santo_Domingo']], ['Democratic Republic of the Congo', ['Africa/Kinshasa']], ['Ecuador', ['America/Guayaquil']], ['Egypt', ['Africa/Cairo']], ['El Salvador', ['America/El_Salvador']], ['Equatorial Guinea', ['Africa/Malabo']], ['Eritrea', ['Africa/Asmara']], ['Estonia', ['Europe/Tallinn']], ['Eswatini', ['Africa/Mbabane']], ['Ethiopia', ['Africa/Addis_Ababa']], ['Falkland Islands', ['Atlantic/Stanley']], ['Faroe Islands', ['Atlantic/Faroe']], ['Fiji', ['Pacific/Fiji']], ['Finland', ['Europe/Helsinki']], ['France', ['Europe/Paris']], ['French Guiana', ['America/Cayenne']], ['French Polynesia', ['Pacific/Tahiti']], ['French Southern Territories', ['Indian/Kerguelen']], ['Gabon', ['Africa/Libreville']], ['Gaza Strip', ['Asia/Gaza']], ['Georgia', ['Asia/Tbilisi']], ['Germany', ['Europe/Berlin']], ['Ghana', ['Africa/Accra']], ['Gibraltar', ['Europe/Gibraltar']], ['Greece', ['Europe/Athens']], ['Greenland', ['America/Nuuk', 'America/Scoresbysund', 'America/Thule']], ['Grenada', ['America/Grenada']], ['Guadeloupe', ['America/Guadeloupe']], ['Guam', ['Pacific/Guam']], ['Guatemala', ['America/Guatemala']], ['Guernsey', ['Europe/Guernsey']], ['Guinea-Bissau', ['Africa/Bissau']], ['Guinea', ['Africa/Conakry']], ['Guyana', ['America/Guyana']], ['Haiti', ['America/Port-au-Prince']], ['Heard Island and McDonald Islands', ['Indian/Kerguelen']], ['Honduras', ['America/Tegucigalpa']], ['Holy See', ['Europe/Vatican']], ['Hong Kong', ['Asia/Hong_Kong']], ['Hungary', ['Europe/Budapest']], ['Iceland', ['Atlantic/Reykjavik']], ['India', ['Asia/Kolkata']], ['Indonesia', ['Asia/Jakarta', 'Asia/Jayapura', 'Asia/Makassar', 'Asia/Pontianak']], ['Iran', ['Asia/Tehran']], ['Iraq', ['Asia/Baghdad']], ['Ireland', ['Europe/Dublin']], ['Isle of Man', ['Europe/Isle_of_Man']], ['Israel', ['Asia/Jerusalem']], ['Italy', ['Europe/Rome']], ['Ivory Coast', ['Africa/Abidjan']], ['Jamaica', ['America/Jamaica']], ['Japan', ['Asia/Tokyo']], ['Jersey', ['Europe/Jersey']], ['Jordan', ['Asia/Amman']], ['Kazakhstan', ['Asia/Almaty', 'Asia/Aqtau', 'Asia/Aqtobe', 'Asia/Atyrau', 'Asia/Oral', 'Asia/Qostanay', 'Asia/Qyzylorda']], ['Kenya', ['Africa/Nairobi']], ['Kiribati', ['Pacific/Kiritimati', 'Pacific/Kanton', 'Pacific/Tarawa']], ['Kosovo', ['Europe/Belgrade']], ['Kuwait', ['Asia/Kuwait']], ['Kyrgyzstan', ['Asia/Bishkek']], ['Laos', ['Asia/Vientiane']], ['Latvia', ['Europe/Riga']], ['Lebanon', ['Asia/Beirut']], ['Lesotho', ['Africa/Maseru']], ['Liberia', ['Africa/Monrovia']], ['Libya', ['Africa/Tripoli']], ['Liechtenstein', ['Europe/Vaduz']], ['Lithuania', ['Europe/Vilnius']], ['Luxembourg', ['Europe/Luxembourg']], ['Macao', ['Asia/Macau']], ['Madagascar', ['Indian/Antananarivo']], ['Malawi', ['Africa/Blantyre']], ['Malaysia', ['Asia/Kuala_Lumpur']], ['Maldives', ['Indian/Maldives']], ['Mali', ['Africa/Bamako']], ['Malta', ['Europe/Malta']], ['Marshall Islands', ['Pacific/Majuro']], ['Martinique', ['America/Martinique']], ['Mauritania', ['Africa/Nouakchott']], ['Mauritius', ['Indian/Mauritius']], ['Mayotte', ['Indian/Mayotte']], ['Mexico', ['America/Cancun', 'America/Chihuahua', 'America/Hermosillo', 'America/Matamoros', 'America/Mexico_City', 'America/Ojinaga', 'America/Tijuana']], ['Micronesia', ['Pacific/Chuuk', 'Pacific/Kosrae', 'Pacific/Pohnpei']], ['Moldova', ['Europe/Chisinau']], ['Monaco', ['Europe/Monaco']], ['Mongolia', ['Asia/Choibalsan', 'Asia/Hovd', 'Asia/Ulaanbaatar']], ['Montenegro', ['Europe/Podgorica']], ['Montserrat', ['America/Montserrat']], ['Morocco', ['Africa/Casablanca']], ['Mozambique', ['Africa/Maputo']], ['Myanmar', ['Asia/Yangon']], ['Namibia', ['Africa/Windhoek']], ['Nauru', ['Pacific/Nauru']], ['Nepal', ['Asia/Kathmandu']], ['Netherlands', ['Europe/Amsterdam']], ['New Caledonia', ['Pacific/Noumea']], ['New Zealand', ['Pacific/Auckland', 'Pacific/Chatham']], ['Nicaragua', ['America/Managua']], ['Niger', ['Africa/Niamey']], ['Nigeria', ['Africa/Lagos']], ['Niue', ['Pacific/Niue']], ['Norfolk Island', ['Pacific/Norfolk']], ['North Korea', ['Asia/Pyongyang']], ['North Macedonia', ['Europe/Skopje']], ['Northern Mariana Islands', ['Pacific/Saipan']], ['Norway', ['Europe/Oslo']], ['Oman', ['Asia/Muscat']], ['Pakistan', ['Asia/Karachi']], ['Palau', ['Pacific/Palau']], ['Palestine', ['Asia/Gaza']], ['Panama', ['America/Panama']], ['Papua New Guinea', ['Pacific/Port_Moresby']], ['Paraguay', ['America/Asuncion']], ['Peru', ['America/Lima']], ['Philippines', ['Asia/Manila']], ['Pitcairn Islands', ['Pacific/Pitcairn']], ['Poland', ['Europe/Warsaw']], ['Portugal', ['Atlantic/Azores', 'Atlantic/Madeira', 'Europe/Lisbon']], ['Puerto Rico', ['America/Puerto_Rico']], ['Qatar', ['Asia/Qatar']], ['Republic of the Congo', ['Africa/Brazzaville']], ['Reunion', ['Indian/Reunion']], ['Romania', ['Europe/Bucharest']], ['Russia', ['Asia/Anadyr', 'Asia/Irkutsk', 'Asia/Kamchatka', 'Asia/Krasnoyarsk', 'Asia/Magadan', 'Asia/Novokuznetsk', 'Asia/Novosibirsk', 'Asia/Omsk', 'Asia/Sakhalin', 'Asia/Srednekolymsk', 'Asia/Ust-Nera', 'Asia/Vladivostok', 'Asia/Yakutsk', 'Asia/Yekaterinburg', 'Europe/Kaliningrad', 'Europe/Kirov', 'Europe/Moscow', 'Europe/Samara', 'Europe/Ulyanovsk', 'Europe/Volgograd']], ['Rwanda', ['Africa/Kigali']], ['Saint Barth\xE9lemy', ['America/St_Barthelemy']], ['Saint Helena', ['Atlantic/St_Helena']], ['Saint Lucia', ['America/St_Lucia']], ['Saint Martin', ['America/Marigot']], ['Saint Pierre and Miquelon', ['America/Miquelon']], ['Samoa', ['Pacific/Apia']], ['San Marino', ['Europe/San_Marino']], ['Sao Tome and Principe', ['Africa/Sao_Tome']], ['Saudi Arabia', ['Asia/Riyadh']], ['Senegal', ['Africa/Dakar']], ['Serbia', ['Europe/Belgrade']], ['Seychelles', ['Indian/Mahe']], ['Sierra Leone', ['Africa/Freetown']], ['Singapore', ['Asia/Singapore']], ['Sint Maarten', ['America/Guadeloupe']], ['Slovakia', ['Europe/Bratislava']], ['Slovenia', ['Europe/Ljubljana']], ['Solomon Islands', ['Pacific/Guadalcanal']], ['Somalia', ['Africa/Mogadishu']], ['South Africa', ['Africa/Johannesburg']], ['South Georgia and the South Sandwich Islands', ['Atlantic/South_Georgia']], ['South Korea', ['Asia/Seoul']], ['South Sudan', ['Africa/Juba']], ['Spain', ['Africa/Ceuta', 'Atlantic/Canary', 'Europe/Madrid']], ['Sri Lanka', ['Asia/Colombo']], ['St Kitts and Nevis', ['America/St_Kitts']], ['Saint Kitts and Nevis', ['America/St_Kitts']], ['Saint Vincent and the Grenadines', ['America/St_Vincent']], ['Sudan', ['Africa/Khartoum']], ['Suriname', ['America/Paramaribo']], ['Svalbard and Jan Mayen', ['Arctic/Longyearbyen']], ['Sweden', ['Europe/Stockholm']], ['Switzerland', ['Europe/Zurich']], ['Syria', ['Asia/Damascus']], ['Taiwan', ['Asia/Taipei']], ['Tajikistan', ['Asia/Dushanbe']], ['Tanzania', ['Africa/Dar_es_Salaam']], ['Thailand', ['Asia/Bangkok']], ['The Gambia', ['Africa/Banjul']], ['Timor-Leste', ['Asia/Dili']], ['Togo', ['Africa/Lome']], ['Tokelau', ['Pacific/Fakaofo']], ['Tonga', ['Pacific/Tongatapu']], ['Trinidad and Tobago', ['America/Port_of_Spain']], ['Tristan da Cunha', ['Atlantic/St_Helena']], ['Tunisia', ['Africa/Tunis']], ['T\xFCrkiye', ['Europe/Istanbul']], ['Turkmenistan', ['Asia/Ashgabat']], ['Turks and Caicos Islands', ['America/Grand_Turk']], ['Tuvalu', ['Pacific/Funafuti']], ['U.S. Outlying Islands', ['Pacific/Apia', 'Pacific/Honolulu', 'Pacific/Midway', 'Pacific/Wake']], ['U.S. Virgin Islands', ['America/St_Thomas']], ['Uganda', ['Africa/Kampala']], ['Ukraine', ['Europe/Kiev']], ['United Arab Emirates', ['Asia/Dubai']], ['United Kingdom', ['Europe/London']], ['United States', ['America/Adak', 'America/Anchorage', 'America/Chicago', 'America/Denver', 'America/Los_Angeles', 'America/New_York', 'Pacific/Honolulu']], ['United States Minor Outlying Islands', ['Pacific/Apia', 'Pacific/Honolulu', 'Pacific/Midway', 'Pacific/Wake']], ['Uruguay', ['America/Montevideo']], ['Uzbekistan', ['Asia/Tashkent']], ['Vanuatu', ['Pacific/Efate']], ['Vatican City', ['Europe/Vatican']], ['Venezuela', ['America/Caracas']], ['Vietnam', ['Asia/Ho_Chi_Minh']], ['Virgin Islands (US)', ['America/St_Thomas']], ['Virgin Islands (UK)', ['America/Tortola']], ['Wallis and Futuna', ['Pacific/Wallis']], ['Western Sahara', ['Africa/El_Aaiun']], ['Yemen', ['Asia/Aden']], ['Zambia', ['Africa/Lusaka']], ['Zimbabwe', ['Africa/Harare']]]),
  Ni = new Map([['Asia/Srednekolymsk', [{
    tzShortName: 'SRET',
    tzFullName: 'Srednekolymsk Time',
    tzOffset: 'GMT+11:00'
  }]], ['America/Punta_Arenas', [{
    tzShortName: 'CLST',
    tzFullName: 'Chile Summer Time',
    tzOffset: 'GMT-03:00'
  }]], ['Europe/Guernsey', [{
    tzShortName: 'BST',
    tzFullName: 'British Summer Time',
    tzOffset: 'GMT+01:00'
  }, {
    tzShortName: 'GMT',
    tzFullName: 'Greenwich Mean Time',
    tzOffset: 'GMT+00:00'
  }]], ['Europe/Isle_of_Man', [{
    tzShortName: 'BST',
    tzFullName: 'British Summer Time',
    tzOffset: 'GMT+01:00'
  }, {
    tzShortName: 'GMT',
    tzFullName: 'Greenwich Mean Time',
    tzOffset: 'GMT+00:00'
  }]], ['Europe/Jersey', [{
    tzShortName: 'BST',
    tzFullName: 'British Summer Time',
    tzOffset: 'GMT+01:00'
  }, {
    tzShortName: 'GMT',
    tzFullName: 'Greenwich Mean Time',
    tzOffset: 'GMT+00:00'
  }]], ['Europe/Istanbul', [{
    tzShortName: 'TRT',
    tzFullName: 'Turkey Time',
    tzOffset: 'GMT+03:00'
  }]], ['Pacific/Bougainville', [{
    tzShortName: 'BST',
    tzFullName: 'Bougainville Standard Time',
    tzOffset: 'GMT+11:00'
  }]], ['America/Montreal', [{
    tzShortName: 'EDT',
    tzFullName: 'Eastern Daylight Time',
    tzOffset: 'GMT-04:00'
  }, {
    tzShortName: 'EST',
    tzFullName: 'Eastern Standard Time',
    tzOffset: 'GMT-05:00'
  }]], ['Asia/Urumqi', [{
    tzShortName: 'XJT',
    tzFullName: '\xDCr\xFCmqi Time',
    tzOffset: 'GMT+06:00'
  }]], ['Africa/Casablanca', [{
    tzShortName: 'WEST',
    tzFullName: 'Western European Summer Time',
    tzOffset: 'GMT+01:00'
  }, {
    tzShortName: 'WET',
    tzFullName: 'Western European Time',
    tzOffset: 'GMT+00:00'
  }]], ['Europe/Ulyanovsk', [{
    tzShortName: 'SAMT',
    tzFullName: 'Samara Standard Time',
    tzOffset: 'GMT+04:00'
  }]], ['Africa/El_Aaiun', [{
    tzShortName: 'WEST',
    tzFullName: 'Western European Summer Time',
    tzOffset: 'GMT+01:00'
  }, {
    tzShortName: 'WET',
    tzFullName: 'Western European Time',
    tzOffset: 'GMT+00:00'
  }]], ['Europe/Astrakhan', [{
    tzShortName: 'SAMT',
    tzFullName: 'Samara Standard Time',
    tzOffset: 'GMT+04:00'
  }]], ['Europe/Saratov', [{
    tzShortName: 'SAMT',
    tzFullName: 'Samara Standard Time',
    tzOffset: 'GMT+04:00'
  }]], ['Asia/Barnaul', [{
    tzShortName: 'KRAT',
    tzFullName: 'Krasnoyarsk Time',
    tzOffset: 'GMT+07:00'
  }]], ['Asia/Krasnoyarsk', [{
    tzShortName: 'KRAT',
    tzFullName: 'Krasnoyarsk Time',
    tzOffset: 'GMT+07:00'
  }]], ['Asia/Novokuznetsk', [{
    tzShortName: 'KRAT',
    tzFullName: 'Krasnoyarsk Time',
    tzOffset: 'GMT+07:00'
  }]], ['Asia/Tomsk', [{
    tzShortName: 'KRAT',
    tzFullName: 'Krasnoyarsk Time',
    tzOffset: 'GMT+07:00'
  }]], ['Antarctica/Palmer', [{
    tzShortName: 'CLST',
    tzFullName: 'Chile Summer Time',
    tzOffset: 'GMT-03:00'
  }]], ['Antarctica/Troll', [{
    tzShortName: 'CEST',
    tzFullName: 'Central European Summer Time',
    tzOffset: 'GMT+02:00'
  }, {
    tzShortName: 'GMT',
    tzFullName: 'Greenwich Mean Time',
    tzOffset: 'GMT+00:00'
  }]], ['Asia/Damascus', [{
    tzShortName: 'EEST',
    tzFullName: 'Eastern European Summer Time',
    tzOffset: 'GMT+03:00'
  }]], ['Asia/Amman', [{
    tzShortName: 'EEST',
    tzFullName: 'Eastern European Summer Time',
    tzOffset: 'GMT+03:00'
  }]], ['Asia/Famagusta', [{
    tzShortName: 'EEST',
    tzFullName: 'Eastern European Summer Time',
    tzOffset: 'GMT+03:00'
  }, {
    tzShortName: 'EET',
    tzFullName: 'Eastern European Time',
    tzOffset: 'GMT+02:00'
  }]], ['Europe/Kirov', [{
    tzShortName: 'MSK',
    tzFullName: 'Moscow Standard Time',
    tzOffset: 'GMT+03:00'
  }]], ['Pacific/Pitcairn', [{
    tzShortName: 'PST',
    tzFullName: 'Pitcairn Time',
    tzOffset: 'GMT-08:00'
  }]]]),
  ri = new Map([['ACDT', ['Australia/Adelaide', 'Australia/Broken_Hill']], ['ACST', ['Australia/Adelaide', 'Australia/Broken_Hill', 'Australia/Darwin']], ['ACT', ['Australia/Adelaide', 'Australia/Broken_Hill', 'Australia/Darwin', 'America/Eirunepe', 'America/Rio_Branco']], ['ACWST', ['Australia/Eucla']], ['ADT', ['America/Anguilla', 'America/Antigua', 'America/Aruba', 'America/Barbados', 'Atlantic/Bermuda', 'America/Blanc-Sablon', 'America/Curacao', 'America/Dominica', 'America/Glace_Bay', 'America/Goose_Bay', 'America/Grenada', 'America/Guadeloupe', 'America/Halifax', 'America/Kralendijk', 'America/Lower_Princes', 'America/Marigot', 'America/Martinique', 'America/Moncton', 'America/Montserrat', 'America/Port_of_Spain', 'America/Puerto_Rico', 'America/St_Barthelemy', 'America/St_Kitts', 'America/St_Lucia', 'America/St_Thomas', 'America/St_Vincent', 'America/Thule', 'America/Tortola']], ['AEDT', ['Antarctica/Macquarie', 'Australia/Brisbane', 'Australia/Currie', 'Australia/Hobart', 'Australia/Lindeman', 'Australia/Melbourne', 'Australia/Sydney']], ['AEST', ['Antarctica/Macquarie', 'Australia/Brisbane', 'Australia/Currie', 'Australia/Hobart', 'Australia/Lindeman', 'Australia/Melbourne', 'Australia/Sydney']], ['AFT', ['Asia/Kabul']], ['AKDT', ['America/Anchorage', 'America/Juneau', 'America/Metlakatla', 'America/Nome', 'America/Sitka', 'America/Yakutat']], ['ALMT', ['Asia/Almaty']], ['AKST', ['America/Anchorage', 'America/Juneau', 'America/Metlakatla', 'America/Nome', 'America/Sitka', 'America/Yakutat']], ['AMST', ['America/Boa_Vista', 'America/Manaus', 'America/Porto_Velho']], ['AMT', ['America/Boa_Vista', 'America/Manaus', 'America/Porto_Velho', 'Asia/Yerevan']], ['ANAT', ['Asia/Anadyr']], ['ART', ['America/Argentina/Buenos_Aires', 'America/Argentina/Catamarca', 'America/Argentina/Cordoba', 'America/Argentina/Jujuy', 'America/Argentina/La_Rioja', 'America/Argentina/Mendoza', 'America/Argentina/Rio_Gallegos', 'America/Argentina/Salta', 'America/Argentina/San_Juan', 'America/Argentina/San_Luis', 'America/Argentina/Tucuman', 'America/Argentina/Ushuaia']], ['AST', ['America/Anguilla', 'America/Antigua', 'America/Aruba', 'America/Barbados', 'Atlantic/Bermuda', 'America/Blanc-Sablon', 'America/Curacao', 'America/Dominica', 'America/Glace_Bay', 'America/Goose_Bay', 'America/Grenada', 'America/Guadeloupe', 'America/Halifax', 'America/Kralendijk', 'America/Lower_Princes', 'America/Marigot', 'America/Martinique', 'America/Moncton', 'America/Montserrat', 'America/Port_of_Spain', 'America/Puerto_Rico', 'America/St_Barthelemy', 'America/St_Kitts', 'America/St_Lucia', 'America/St_Thomas', 'America/St_Vincent', 'America/Thule', 'America/Tortola', 'Asia/Aden', 'Asia/Baghdad', 'Asia/Bahrain', 'Asia/Kuwait', 'Asia/Qatar', 'Asia/Riyadh']], ['AT', ['America/Anguilla', 'America/Antigua', 'America/Aruba', 'America/Barbados', 'Atlantic/Bermuda', 'America/Blanc-Sablon', 'America/Curacao', 'America/Dominica', 'America/Glace_Bay', 'America/Goose_Bay', 'America/Grenada', 'America/Guadeloupe', 'America/Halifax', 'America/Kralendijk', 'America/Lower_Princes', 'America/Marigot', 'America/Martinique', 'America/Moncton', 'America/Montserrat', 'America/Port_of_Spain', 'America/Puerto_Rico', 'America/St_Barthelemy', 'America/St_Kitts', 'America/St_Lucia', 'America/St_Thomas', 'America/St_Vincent', 'America/Thule', 'America/Tortola']], ['AQTT', ['Asia/Aqtobe']], ['AWDT', ['Australia/Perth']], ['AWST', ['Australia/Perth']], ['AZOST', ['Atlantic/Azores']], ['AZOT', ['Atlantic/Azores']], ['AZT', ['Asia/Baku']], ['BDT', ['Asia/Brunei']], ['BIT', ['Pacific/Midway']], ['BNT', ['Asia/Brunei']], ['BOT', ['America/La_Paz']], ['BRST', ['America/Araguaina', 'America/Bahia', 'America/Belem', 'America/Fortaleza', 'America/Maceio', 'America/Recife', 'America/Santarem', 'America/Sao_Paulo']], ['BRT', ['America/Araguaina', 'America/Bahia', 'America/Belem', 'America/Fortaleza', 'America/Maceio', 'America/Recife', 'America/Santarem', 'America/Sao_Paulo']], ['BST', ['Asia/Dhaka', 'Europe/Guernsey', 'Europe/Isle_of_Man', 'Europe/Jersey', 'Europe/London', 'Pacific/Bougainville']], ['BTT', ['Asia/Thimphu']], ['CAT', ['Africa/Blantyre', 'Africa/Bujumbura', 'Africa/Gaborone', 'Africa/Harare', 'Africa/Juba', 'Africa/Khartoum', 'Africa/Kigali', 'Africa/Lubumbashi', 'Africa/Lusaka', 'Africa/Maputo', 'Africa/Windhoek']], ['CCT', ['Indian/Cocos']], ['CDT', ['America/Bahia_Banderas', 'America/Chicago', 'America/Havana', 'America/Indiana/Knox', 'America/Indiana/Tell_City', 'America/Matamoros', 'America/Menominee', 'America/Merida', 'America/Mexico_City', 'America/Monterrey', 'America/North_Dakota/Beulah', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/Ojinaga', 'America/Rainy_River', 'America/Rankin_Inlet', 'America/Resolute', 'America/Winnipeg']], ['CAST', ['Antarctica/Casey']], ['CEST', ['Africa/Ceuta', 'Arctic/Longyearbyen', 'Europe/Amsterdam', 'Europe/Andorra', 'Europe/Belgrade', 'Europe/Berlin', 'Europe/Bratislava', 'Europe/Brussels', 'Europe/Budapest', 'Europe/Busingen', 'Europe/Copenhagen', 'Europe/Gibraltar', 'Europe/Ljubljana', 'Europe/Luxembourg', 'Europe/Madrid', 'Europe/Malta', 'Europe/Monaco', 'Europe/Oslo', 'Europe/Paris', 'Europe/Podgorica', 'Europe/Prague', 'Europe/Rome', 'Europe/San_Marino', 'Europe/Sarajevo', 'Europe/Skopje', 'Europe/Stockholm', 'Europe/Tirane', 'Europe/Vaduz', 'Europe/Vatican', 'Europe/Vienna', 'Europe/Warsaw', 'Europe/Zagreb', 'Europe/Zurich']], ['CET', ['Africa/Algiers', 'Africa/Ceuta', 'Africa/Tunis', 'Arctic/Longyearbyen', 'Europe/Amsterdam', 'Europe/Andorra', 'Europe/Belgrade', 'Europe/Berlin', 'Europe/Bratislava', 'Europe/Brussels', 'Europe/Budapest', 'Europe/Busingen', 'Europe/Copenhagen', 'Europe/Gibraltar', 'Europe/Ljubljana', 'Europe/Luxembourg', 'Europe/Madrid', 'Europe/Malta', 'Europe/Monaco', 'Europe/Oslo', 'Europe/Paris', 'Europe/Podgorica', 'Europe/Prague', 'Europe/Rome', 'Europe/San_Marino', 'Europe/Sarajevo', 'Europe/Skopje', 'Europe/Stockholm', 'Europe/Tirane', 'Europe/Vaduz', 'Europe/Vatican', 'Europe/Vienna', 'Europe/Warsaw', 'Europe/Zagreb', 'Europe/Zurich']], ['CHADT', ['Pacific/Chatham']], ['CHAST', ['Pacific/Chatham']], ['CHOST', ['Asia/Choibalsan']], ['CHOT', ['Asia/Choibalsan']], ['CHST', ['Pacific/Guam', 'Pacific/Saipan']], ['CHUT', ['Pacific/Chuuk']], ['CIST', ['Pacific/Marquesas']], ['CIT', ['Asia/Makassar']], ['CKT', ['Pacific/Rarotonga']], ['CLST', ['America/Santiago', 'America/Punta_Arenas']], ['CLT', ['America/Santiago', 'America/Punta_Arenas']], ['COST', ['America/Bogota']], ['COT', ['America/Bogota']], ['CST', ['America/Bahia_Banderas', 'America/Belize', 'America/Chicago', 'America/Chihuahua', 'America/Costa_Rica', 'America/El_Salvador', 'America/Guatemala', 'America/Havana', 'America/Indiana/Knox', 'America/Indiana/Tell_City', 'America/Managua', 'America/Matamoros', 'America/Menominee', 'America/Merida', 'America/Mexico_City', 'America/Monterrey', 'America/North_Dakota/Beulah', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/Ojinaga', 'America/Rainy_River', 'America/Rankin_Inlet', 'America/Resolute', 'America/Regina', 'America/Swift_Current', 'America/Tegucigalpa', 'America/Winnipeg', 'Asia/Macau', 'Asia/Shanghai', 'Asia/Taipei']], ['CT', ['America/Belize', 'America/Chicago', 'America/Costa_Rica', 'America/El_Salvador', 'America/Guatemala', 'America/Havana', 'America/Indiana/Knox', 'America/Indiana/Tell_City', 'America/Managua', 'America/Matamoros', 'America/Menominee', 'America/Merida', 'America/Mexico_City', 'America/Monterrey', 'America/North_Dakota/Beulah', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/Ojinaga', 'America/Rainy_River', 'America/Rankin_Inlet', 'America/Resolute', 'America/Regina', 'America/Swift_Current', 'America/Tegucigalpa', 'America/Winnipeg', 'America/Bahia_Banderas']], ['CVT', ['Atlantic/Cape_Verde']], ['CWST', ['Australia/Eucla']], ['CXT', ['Indian/Christmas']], ['DAVT', ['Antarctica/Davis']], ['DDUT', ['Antarctica/DumontDUrville']], ['EASST', ['Pacific/Easter']], ['EAST', ['Pacific/Easter']], ['EAT', ['Africa/Addis_Ababa', 'Africa/Asmara', 'Africa/Dar_es_Salaam', 'Africa/Djibouti', 'Africa/Kampala', 'Africa/Mogadishu', 'Africa/Nairobi', 'Indian/Antananarivo', 'Indian/Comoro', 'Indian/Mayotte']], ['ECT', ['America/Guayaquil']], ['EDT', ['America/Detroit', 'America/Grand_Turk', 'America/Indiana/Indianapolis', 'America/Indiana/Marengo', 'America/Indiana/Petersburg', 'America/Indiana/Vevay', 'America/Indiana/Vincennes', 'America/Indiana/Winamac', 'America/Iqaluit', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/Montreal', 'America/Nassau', 'America/New_York', 'America/Nipigon', 'America/Pangnirtung', 'America/Port-au-Prince', 'America/Thunder_Bay', 'America/Toronto']], ['EEST', ['Asia/Amman', 'Asia/Beirut', 'Asia/Damascus', 'Asia/Famagusta', 'Asia/Gaza', 'Asia/Hebron', 'Asia/Nicosia', 'Europe/Athens', 'Europe/Bucharest', 'Europe/Chisinau', 'Europe/Helsinki', 'Europe/Kiev', 'Europe/Mariehamn', 'Europe/Riga', 'Europe/Sofia', 'Europe/Tallinn', 'Europe/Uzhgorod', 'Europe/Vilnius', 'Europe/Zaporozhye']], ['EET', ['Africa/Cairo', 'Africa/Tripoli', 'Asia/Beirut', 'Asia/Famagusta', 'Asia/Gaza', 'Asia/Hebron', 'Asia/Nicosia', 'Europe/Athens', 'Europe/Bucharest', 'Europe/Chisinau', 'Europe/Helsinki', 'Europe/Kaliningrad', 'Europe/Kiev', 'Europe/Mariehamn', 'Europe/Riga', 'Europe/Sofia', 'Europe/Tallinn', 'Europe/Uzhgorod', 'Europe/Vilnius', 'Europe/Zaporozhye']], ['EGST', ['America/Scoresbysund']], ['EGT', ['America/Scoresbysund']], ['EIT', ['Asia/Jayapura']], ['EST', ['America/Atikokan', 'America/Cancun', 'America/Cayman', 'America/Detroit', 'America/Grand_Turk', 'America/Indiana/Indianapolis', 'America/Indiana/Marengo', 'America/Indiana/Petersburg', 'America/Indiana/Vevay', 'America/Indiana/Vincennes', 'America/Indiana/Winamac', 'America/Iqaluit', 'America/Jamaica', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/Montreal', 'America/Nassau', 'America/New_York', 'America/Nipigon', 'America/Panama', 'America/Pangnirtung', 'America/Port-au-Prince', 'America/Santo_Domingo', 'America/Thunder_Bay', 'America/Toronto']], ['ET', ['America/Atikokan', 'America/Cancun', 'America/Cayman', 'America/Detroit', 'America/Grand_Turk', 'America/Indiana/Indianapolis', 'America/Indiana/Marengo', 'America/Indiana/Petersburg', 'America/Indiana/Vevay', 'America/Indiana/Vincennes', 'America/Indiana/Winamac', 'America/Iqaluit', 'America/Jamaica', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/Montreal', 'America/Nassau', 'America/New_York', 'America/Nipigon', 'America/Panama', 'America/Pangnirtung', 'America/Port-au-Prince', 'America/Santo_Domingo', 'America/Thunder_Bay', 'America/Toronto']], ['FET', ['Europe/Minsk']], ['FJT', ['Pacific/Fiji']], ['FKST', ['Atlantic/Stanley']], ['FKT', ['Atlantic/Stanley']], ['FNT', ['America/Noronha']], ['GALT', ['Pacific/Galapagos']], ['GAMT', ['Pacific/Gambier']], ['GET', ['Asia/Tbilisi']], ['GFT', ['America/Cayenne']], ['GILT', ['Pacific/Tarawa']], ['GMT', ['Africa/Abidjan', 'Africa/Accra', 'Africa/Bamako', 'Africa/Banjul', 'Africa/Bissau', 'Africa/Conakry', 'Africa/Dakar', 'Africa/Freetown', 'Africa/Lome', 'Africa/Monrovia', 'Africa/Nouakchott', 'Africa/Ouagadougou', 'Africa/Sao_Tome', 'America/Danmarkshavn', 'Atlantic/Reykjavik', 'Atlantic/St_Helena', 'Europe/Dublin', 'Europe/Guernsey', 'Europe/Isle_of_Man', 'Europe/Jersey', 'Europe/London']], ['GST', ['Asia/Dubai', 'Asia/Muscat', 'Atlantic/South_Georgia']], ['GYT', ['America/Guyana']], ['HADT', ['America/Adak', 'Pacific/Honolulu']], ['HAST', ['America/Adak', 'Pacific/Honolulu']], ['HDT', ['America/Adak', 'Pacific/Honolulu']], ['HKT', ['Asia/Hong_Kong']], ['HMT', ['Indian/Kerguelen']], ['HOVST', ['Asia/Hovd']], ['HOVT', ['Asia/Hovd']], ['HST', ['America/Adak', 'Pacific/Honolulu']], ['ICT', ['Asia/Bangkok', 'Asia/Ho_Chi_Minh', 'Asia/Phnom_Penh', 'Asia/Vientiane']], ['IDT', ['Asia/Jerusalem']], ['IOT', ['Indian/Chagos']], ['IRDT', ['Asia/Tehran']], ['IRKT', ['Asia/Irkutsk']], ['IRST', ['Asia/Tehran']], ['IST', ['Asia/Jerusalem', 'Asia/Colombo', 'Asia/Kolkata', 'Europe/Dublin']], ['JST', ['Asia/Tokyo']], ['KGT', ['Asia/Bishkek']], ['KOST', ['Pacific/Kosrae']], ['KRAT', ['Asia/Barnaul', 'Asia/Krasnoyarsk', 'Asia/Novokuznetsk', 'Asia/Tomsk']], ['KST', ['Asia/Pyongyang', 'Asia/Seoul']], ['KUYT', ['Europe/Samara']], ['LHDT', ['Australia/Lord_Howe']], ['LHST', ['Australia/Lord_Howe']], ['LINT', ['Pacific/Kiritimati']], ['MAGT', ['Asia/Magadan']], ['MART', ['Pacific/Marquesas']], ['MAWT', ['Antarctica/Mawson']], ['MDT', ['America/Boise', 'America/Cambridge_Bay', 'America/Denver', 'America/Edmonton', 'America/Inuvik', 'America/Yellowknife']], ['MHT', ['Pacific/Kwajalein', 'Pacific/Majuro']], ['MIST', ['Antarctica/Macquarie']], ['MIT', ['Pacific/Marquesas']], ['MMT', ['Asia/Yangon']], ['MSK', ['Antarctica/Syowa', 'Europe/Kirov', 'Europe/Minsk', 'Europe/Moscow', 'Europe/Simferopol', 'Europe/Volgograd']], ['MST', ['America/Boise', 'America/Cambridge_Bay', 'America/Creston', 'America/Dawson', 'America/Dawson_Creek', 'America/Denver', 'America/Edmonton', 'America/Fort_Nelson', 'America/Hermosillo', 'America/Inuvik', 'America/Mazatlan', 'America/Phoenix', 'America/Whitehorse', 'America/Yellowknife', 'Asia/Kuala_Lumpur']], ['MT', ['America/Boise', 'America/Cambridge_Bay', 'America/Creston', 'America/Dawson', 'America/Dawson_Creek', 'America/Denver', 'America/Edmonton', 'America/Fort_Nelson', 'America/Hermosillo', 'America/Inuvik', 'America/Mazatlan', 'America/Phoenix', 'America/Whitehorse', 'America/Yellowknife', 'Asia/Kuala_Lumpur']], ['MUT', ['Indian/Mauritius']], ['MVT', ['Indian/Maldives']], ['MYT', ['Asia/Kuala_Lumpur', 'Asia/Kuching']], ['NCT', ['Pacific/Noumea']], ['NDT', ['America/St_Johns']], ['NFDT', ['Pacific/Norfolk']], ['NFT', ['Pacific/Norfolk']], ['NOVT', ['Asia/Novosibirsk']], ['NPT', ['Asia/Kathmandu']], ['NRT', ['Pacific/Nauru']], ['NST', ['America/St_Johns']], ['NT', ['America/St_Johns']], ['NUT', ['Pacific/Niue']], ['NZDT', ['Antarctica/McMurdo', 'Pacific/Auckland']], ['NZST', ['Antarctica/McMurdo', 'Pacific/Auckland']], ['OMST', ['Asia/Omsk']], ['ORAT', ['Asia/Oral']], ['PDT', ['America/Los_Angeles', 'America/Tijuana', 'America/Vancouver']], ['PET', ['America/Lima']], ['PETT', ['Asia/Kamchatka']], ['PGT', ['Pacific/Port_Moresby']], ['PHOT', ['Pacific/Apia', 'Pacific/Kanton']], ['PHT', ['Asia/Manila']], ['PKT', ['Asia/Karachi']], ['PMDT', ['America/Miquelon']], ['PMST', ['America/Miquelon']], ['PONT', ['Pacific/Pohnpei']], ['PST', ['America/Los_Angeles', 'America/Tijuana', 'America/Vancouver', 'Asia/Manila', 'Pacific/Pitcairn']], ['PT', ['America/Los_Angeles', 'America/Tijuana', 'America/Vancouver', 'Asia/Manila']], ['PWT', ['Pacific/Palau']], ['PYST', ['America/Asuncion']], ['PYT', ['America/Asuncion']], ['QYZT', ['Asia/Qyzylorda']], ['RET', ['Indian/Reunion']], ['ROTT', ['Antarctica/Rothera']], ['SAKT', ['Asia/Sakhalin']], ['SAMT', ['Europe/Astrakhan', 'Europe/Samara', 'Europe/Saratov', 'Europe/Ulyanovsk']], ['SAST', ['Africa/Johannesburg', 'Africa/Maseru', 'Africa/Mbabane']], ['SBT', ['Pacific/Guadalcanal']], ['SCT', ['Indian/Mahe']], ['SGT', ['Asia/Singapore']], ['SLST', ['Asia/Colombo']], ['SRET', ['Asia/Srednekolymsk']], ['SRT', ['America/Paramaribo']], ['SST', ['Pacific/Midway', 'Pacific/Pago_Pago']], ['SYOT', ['Antarctica/Syowa']], ['TAHT', ['Pacific/Tahiti']], ['TFT', ['Indian/Kerguelen']], ['THA', ['Asia/Bangkok']], ['TJT', ['Asia/Dushanbe']], ['TKT', ['Pacific/Fakaofo']], ['TLT', ['Asia/Dili']], ['TMT', ['Asia/Aqtau', 'Asia/Aqtobe', 'Asia/Ashgabat', 'Asia/Atyrau', 'Asia/Oral']], ['TOT', ['Pacific/Tongatapu']], ['TRT', ['Europe/Istanbul']], ['TVT', ['Pacific/Funafuti']], ['ULAST', ['Asia/Ulaanbaatar']], ['ULAT', ['Asia/Ulaanbaatar']], ['USZ1', ['Europe/Kaliningrad']], ['UTC', ['UTC']], ['UYST', ['America/Montevideo']], ['UYT', ['America/Montevideo']], ['UZT', ['Asia/Samarkand', 'Asia/Tashkent']], ['VET', ['America/Caracas']], ['VLAT', ['Asia/Ust-Nera', 'Asia/Vladivostok']], ['VOLT', ['Europe/Volgograd']], ['VOST', ['Antarctica/Vostok']], ['VUT', ['Pacific/Efate']], ['WAKT', ['Pacific/Wake']], ['WAST', ['Africa/Bangui', 'Africa/Brazzaville', 'Africa/Douala', 'Africa/Kinshasa', 'Africa/Lagos', 'Africa/Libreville', 'Africa/Luanda', 'Africa/Malabo', 'Africa/Ndjamena', 'Africa/Niamey', 'Africa/Porto-Novo']], ['WAT', ['Africa/Bangui', 'Africa/Brazzaville', 'Africa/Douala', 'Africa/Kinshasa', 'Africa/Lagos', 'Africa/Libreville', 'Africa/Luanda', 'Africa/Malabo', 'Africa/Ndjamena', 'Africa/Niamey', 'Africa/Porto-Novo']], ['WEST', ['Atlantic/Canary', 'Africa/Casablanca', 'Africa/El_Aaiun', 'Atlantic/Faroe', 'Atlantic/Madeira', 'Europe/Lisbon']], ['WET', ['Atlantic/Canary', 'Africa/Casablanca', 'Africa/El_Aaiun', 'Atlantic/Faroe', 'Atlantic/Madeira', 'Europe/Lisbon']], ['WFT', ['Pacific/Wallis']], ['WGT', ['America/Nuuk']], ['WGST', ['America/Nuuk']], ['WIB', ['Asia/Jakarta', 'Asia/Pontianak']], ['WIT', ['Asia/Jayapura']], ['WITA', ['Asia/Makassar']], ['WST', ['Australia/Perth']], ['XJT', ['Asia/Urumqi']], ['YAKT', ['Asia/Chita', 'Asia/Khandyga', 'Asia/Yakutsk']], ['YEKT', ['Asia/Yekaterinburg']]]),
  H = new Map([['Acre Standard Time', 'ACT'], ['Acre Time', 'ACT'], ['Afghanistan Time', 'AFT'], ['Al Manamah Standard Time', 'AST'], ['Alaska Daylight Saving Time', 'AKDT'], ['Alaska Daylight Time', 'AKDT'], ['Alaska Standard Time', 'AKST'], ['Amazon Standard Time', 'AMT'], ['Amazon Summer Time', 'AMST'], ['Amazon Time', 'AMT'], ['Anadyr Standard Time', 'ANAT'], ['Anadyr Time', 'ANAT'], ['Apia Standard Time', 'WST'], ['Aqtobe Time', 'AQTT'], ['Arabia Daylight Time', 'ADT'], ['Arabia Standard Time', 'AST'], ['Arabia Summer Time', 'ADT'], ['Arabian Standard Time', 'AST'], ['Arabic Standard Time', 'AST'], ['Argentina Standard Time', 'ART'], ['Argentina Time', 'ART'], ['Armenia Standard Time', 'AMT'], ['Armenia Time', 'AMT'], ['ASEAN Common Time', 'ACT'], ['Atlantic Daylight Time', 'ADT'], ['Atlantic Standard Time', 'AST'], ['Atlantic Time', 'AT'], ['Australian Central Daylight Saving Time', 'ACDT'], ['Australian Central Daylight Time', 'ACDT'], ['Australian Central Standard Time', 'ACST'], ['Australian Central Time', 'ACT'], ['Australian Central Western Standard Time', 'ACWST'], ['Australian Eastern Daylight Saving Time', 'AEDT'], ['Australian Eastern Daylight Time', 'AEDT'], ['Australian Eastern Standard Time', 'AEST'], ['Australian Western Daylight Time', 'AWDT'], ['Australian Western Standard Time', 'AWST'], ['Azerbaijan Standard Time', 'AZT'], ['Azerbaijan Time', 'AZT'], ['Azores Daylight Time', 'AZOST'], ['Azores Standard Time', 'AZOT'], ['Azores Summer Time', 'AZOST'], ['Azores Time', 'AZOT'], ['Bangladesh Standard Time', 'BST'], ['Bhutan Time', 'BTT'], ['Bolivia Time', 'BOT'], ['Bougainville Standard Time', 'BST'], ['Brasilia Standard Time', 'BRT'], ['Brasilia Summer Time', 'BRST'], ['Brasilia Time', 'BRT'], ['British Summer Time', 'BST'], ['Brunei Darussalam Time', 'BNT'], ['Brunei Time', 'BDT'], ['Cape Verde Standard Time', 'CVT'], ['Cape Verde Time', 'CVT'], ['Casey Time', 'CAST'], ['Central Africa Time', 'CAT'], ['Central Daylight Time', 'CDT'], ['Central Europe Time', 'CET'], ['Central European Standard Time', 'CET'], ['Central European Summer Time', 'CEST'], ['Central European Time', 'CET'], ['Central Indonesia Time', 'WITA'], ['Central Standard Time', 'CST'], ['Central Time', 'CT'], ['Central Western Standard Time', 'CWST'], ['Chamorro Standard Time', 'CHST'], ['Chatham Daylight Time', 'CHADT'], ['Chatham Island Daylight Time', 'CHADT'], ['Chatham Island Standard Time', 'CHAST'], ['Chatham Standard Time', 'CHAST'], ['Chile Standard Time', 'CLT'], ['Chile Summer Time', 'CLST'], ['Chile Time', 'CT'], ['China Standard Time', 'CST'], ['Choibalsan Standard Time', 'CHOT'], ['Choibalsan Summer Time', 'CHOST'], ['Christmas Island Time', 'CXT'], ['Chuuk Time', 'CHUT'], ['Clipperton Island Standard Time', 'EAST'], ['Cocos Islands Time', 'CCT'], ['Colombia Standard Time', 'COT'], ['Colombia Summer Time', 'COST'], ['Colombia Time', 'COT'], ['Cook Island Time', 'CKT'], ['Cook Islands Standard Time', 'CKT'], ['Coordinated Universal Time', 'UTC'], ['Cuba Daylight Time', 'CDT'], ['Cuba Standard Time', 'CST'], ['Davis Time', 'DAVT'], ['Dumont-d\u2019Urville Time', 'DDUT'], ['East Africa Time', 'EAT'], ['East Greenland Time', 'EGT'], ['East Kazakhstan Time', 'ALMT'], ['East Timor Time', 'TLT'], ['Easter Island Standard Time', 'EAST'], ['Easter Island Summer Time', 'EASST'], ['Eastern Caribbean Time', 'ECT'], ['Eastern Daylight Time', 'EDT'], ['Eastern European Standard Time', 'EET'], ['Eastern European Summer Time', 'EEST'], ['Eastern European Time', 'EET'], ['Eastern Greenland Summer Time', 'EGST'], ['Eastern Greenland Time', 'EGT'], ['Eastern Indonesia Time', 'WIT'], ['Eastern Standard Time', 'EST'], ['Eastern Time', 'ET'], ['Ecuador Time', 'ECT'], ['European Central Time', 'ECT'], ['Falkland Islands Standard Time', 'FKST'], ['Falkland Islands Time', 'FKT'], ['Fernando de Noronha Standard Time', 'FNT'], ['Fernando de Noronha Time', 'FNT'], ['Fiji Standard Time', 'FJT'], ['Fiji Time', 'FJT'], ['French Guiana Time', 'GFT'], ['French Southern & Antarctic Time', 'TFT'], ['French Southern and Antarctic Time', 'TFT'], ['Galapagos Time', 'GALT'], ['Gambier Islands Time', 'GAMT'], ['Gambier Time', 'GAMT'], ['Georgia Standard Time', 'GET'], ['Gilbert Island Time', 'GILT'], ['Greenwich Mean Time', 'GMT'], ['Greenwich Time', 'GMT'], ['Gulf Standard Time', 'GST'], ['Guyana Time', 'GYT'], ['Hawaii Daylight Time', 'HDT'], ['Hawaii Standard Time', 'HST'], ['Hawaii-Aleutian Daylight Time', 'HADT'], ['Hawaii-Aleutian Standard Time', 'HAST'], ['Heard Island and McDonald Islands Time', 'HMT'], ['Hong Kong Standard Time', 'HKT'], ['Hong Kong Time', 'HKT'], ['Hovd Standard Time', 'HOVT'], ['India Standard Time', 'IST'], ['Indian Chagos Time', 'IOT'], ['Indian Ocean Time', 'IOT'], ['Indochina Time', 'ICT'], ['Iran Daylight Time', 'IDT'], ['Iran Standard Time', 'IRST'], ['Irish Standard Time', 'IST'], ['Irish Summer Time', 'IST'], ['Irkutsk Standard Time', 'IRKT'], ['Irkutsk Time', 'IRKT'], ['Israel Daylight Time', 'IDT'], ['Israel Standard Time', 'IST'], ['Japan Standard Time', 'JST'], ['Kamchatka Summer Time', 'PETT'], ['Kamchatka Time', 'PETT'], ['Khovd Standard Time', 'HOVT'], ['Korean Standard Time', 'KST'], ['Kosrae Time', 'KOST'], ['Krasnoyarsk Standard Time', 'KRAT'], ['Krasnoyarsk Time', 'KRAT'], ['Kuybyshev Time', 'KUYT'], ['Kyrgyzstan Time', 'KGT'], ['Line Islands Time', 'LINT'], ['Lord Howe Daylight Time', 'LHDT'], ['Lord Howe Standard Time', 'LHST'], ['Lord Howe Summer Time', 'LHDT'], ['Macquarie Island Station Time', 'MIST'], ['Magadan Standard Time', 'MAGT'], ['Malaysia Time', 'MYT'], ['Maldives Time', 'MVT'], ['Marquesas Islands Time', 'MART'], ['Marquesas Time', 'MART'], ['Marshall Islands Time', 'MHT'], ['Mauritius Standard Time', 'MUT'], ['Mauritius Time', 'MUT'], ['Mawson Time', 'MAWT'], ['Moscow Standard Time', 'MSK'], ['Mountain Daylight Time', 'MDT'], ['Mountain Standard Time', 'MST'], ['Mountain Time', 'MT'], ['Myanmar Standard Time', 'MMT'], ['Myanmar Time', 'MMT'], ['Nauru Time', 'NRT'], ['Nepal Time', 'NPT'], ['New Caledonia Standard Time', 'NCT'], ['New Caledonia Time', 'NCT'], ['New Zealand Daylight Time', 'NZDT'], ['New Zealand Standard Time', 'NZST'], ['Newfoundland Daylight Time', 'NDT'], ['Newfoundland Standard Time', 'NST'], ['Newfoundland Time', 'NT'], ['Niue Time', 'NUT'], ['Norfolk Island Daylight Time', 'NFDT'], ['Norfolk Island Standard Time', 'NFT'], ['Norfolk Time', 'NFT'], ['Novosibirsk Standard Time', 'NOVT'], ['Novosibirsk Time', 'NOVT'], ['Omsk Standard Time', 'OMST'], ['Omsk Time', 'OMST'], ['Oral Time', 'ORAT'], ['Pacific Daylight Time', 'PDT'], ['Pacific Standard Time', 'PST'], ['Pacific Time', 'PT'], ['Pakistan Standard Time', 'PKT'], ['Palau Time', 'PWT'], ['Papua New Guinea Time', 'PGT'], ['Paraguay Standard Time', 'PYT'], ['Paraguay Summer Time', 'PYST'], ['Paraguay Time', 'PYT'], ['Peru Standard Time', 'PET'], ['Peru Time', 'PET'], ['Petropavlovsk-Kamchatski Standard Time', 'PETT'], ['Philippine Standard Time', 'PST'], ['Philippine Time', 'PHT'], ['Phoenix Island Time', 'PHOT'], ['Phoenix Islands Time', 'PHOT'], ['Pitcairn Time', 'PST'], ['Pohnpei Standard Time', 'PONT'], ['Ponape Time', 'PONT'], ['Pyongyang Standard Time', 'PYST'], ['Pyongyang Time', 'PYT'], ['Qyzylorda Time', 'QYZT'], ['Reunion Time', 'RET'], ['R\xE9union Time', 'RET'], ['Rothera Research Station Time', 'ROTT'], ['Rothera Time', 'ROTT'], ['Sakhalin Standard Time', 'SAKT'], ['Sakhalin Time', 'SAKT'], ['Samara Standard Time', 'SAMT'], ['Samara Time', 'SAMT'], ['Seychelles Time', 'SCT'], ['Showa Station Time', 'SYOT'], ['Singapore Standard Time', 'SGT'], ['Singapore Time', 'SGT'], ['Solomon Islands Time', 'SBT'], ['South Africa Standard Time', 'SAST'], ['South Georgia Time', 'GST'], ['Srednekolymsk Time', 'SRET'], ['Sri Lanka Standard Time', 'SLST'], ['St. Pierre & Miquelon Daylight Time', 'PMDT'], ['St. Pierre and Miquelon Daylight Time', 'PMDT'], ['St Pierre & Miquelon Daylight Time', 'PMDT'], ['St Pierre and Miquelon Daylight Time', 'PMDT'], ['St. Pierre & Miquelon Standard Time', 'PMST'], ['St. Pierre and Miquelon Standard Time', 'PMST'], ['St Pierre & Miquelon Standard Time', 'PMST'], ['St Pierre and Miquelon Standard Time', 'PMST'], ['Suriname Time', 'SRT'], ['Syowa Time', 'SYOT'], ['Tahiti Time', 'TAHT'], ['Tajikistan Time', 'TJT'], ['Thailand Standard Time', 'THA'], ['Tokelau Time', 'TKT'], ['Tonga Standard Time', 'TOT'], ['Tonga Time', 'TOT'], ['Turkey Time', 'TRT'], ['Turkmenistan Standard Time', 'TMT'], ['Turkmenistan Time', 'TMT'], ['Tuvalu Time', 'TVT'], ['Ulaanbaatar Standard Time', 'ULAT'], ['Ulaanbaatar Summer Time', 'ULAST'], ['Uruguay Standard Time', 'UYT'], ['Uruguay Summer Time', 'UYST'], ['Uzbekistan Standard Time', 'UZT'], ['Uzbekistan Time', 'UZT'], ['Vanuatu Standard Time', 'VUT'], ['Vanuatu Time', 'VUT'], ['Venezuela Time', 'VET'], ['Venezuelan Standard Time', 'VET'], ['Vladivostok Standard Time', 'VLAT'], ['Vladivostok Time', 'VLAT'], ['Volgograd Standard Time', 'MSK'], ['Volgograd Time', 'VOLT'], ['Vostok Station Time', 'VOST'], ['Vostok Time', 'VOST'], ['Wake Island Time', 'WAKT'], ['Wallis & Futuna Time', 'WFT'], ['Wallis and Futuna Time', 'WFT'], ['West Africa Standard Time', 'WAT'], ['West Africa Summer Time', 'WAST'], ['West Africa Time', 'WAT'], ['West Greenland Summer Time', 'WGST'], ['West Greenland Time', 'WGT'], ['West Kazakhstan Time', 'ORAT'], ['West Samoa Time', 'WST'], ['Western European Summer Time', 'WEST'], ['Western European Time', 'WET'], ['Western Indonesia Time', 'WIB'], ['Western Standard Time', 'WST'], ['\xDCr\xFCmqi Time', 'XJT'], ['Yakutsk Standard Time', 'YAKT'], ['Yakutsk Time', 'YAKT'], ['Yekaterinburg Standard Time', 'YEKT'], ['Yekaterinburg Time', 'YEKT']]),
  Gi = new Map([['Armenia Standard Time', ['Asia/Yerevan']], ['Armenia Time', ['Asia/Yerevan']], ['Arabian Standard Time', ['Asia/Aden', 'Asia/Baghdad', 'Asia/Bahrain', 'Asia/Kuwait', 'Asia/Qatar', 'Asia/Riyadh']], ['Arabian Time', ['Asia/Aden', 'Asia/Baghdad', 'Asia/Bahrain', 'Asia/Kuwait', 'Asia/Qatar', 'Asia/Riyadh']], ['Bangladesh Standard Time', ['Asia/Dhaka']], ['Bougainville Time', ['Pacific/Bougainville']], ['British Summer Time', ['Europe/Guernsey', 'Europe/Isle_of_Man', 'Europe/Jersey', 'Europe/London']], ['Central Daylight Time', ['America/Bahia_Banderas', 'America/Belize', 'America/Chicago', 'America/Costa_Rica', 'America/El_Salvador', 'America/Guatemala', 'America/Indiana/Knox', 'America/Indiana/Tell_City', 'America/Managua', 'America/Matamoros', 'America/Menominee', 'America/Merida', 'America/Mexico_City', 'America/Monterrey', 'America/North_Dakota/Beulah', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/Ojinaga', 'America/Rainy_River', 'America/Rankin_Inlet', 'America/Resolute', 'America/Regina', 'America/Swift_Current', 'America/Tegucigalpa', 'America/Winnipeg']], ['Central Standard Time', ['America/Bahia_Banderas', 'America/Belize', 'America/Chicago', 'America/Costa_Rica', 'America/El_Salvador', 'America/Guatemala', 'America/Indiana/Knox', 'America/Indiana/Tell_City', 'America/Managua', 'America/Matamoros', 'America/Menominee', 'America/Merida', 'America/Mexico_City', 'America/Monterrey', 'America/North_Dakota/Beulah', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/Ojinaga', 'America/Rainy_River', 'America/Rankin_Inlet', 'America/Resolute', 'America/Regina', 'America/Swift_Current', 'America/Tegucigalpa', 'America/Winnipeg']], ['China Standard Time', ['Asia/Macau', 'Asia/Shanghai', 'Asia/Taipei']], ['Cuba Daylight Time', ['America/Havana', 'America/Managua']], ['Cuba Standard Time', ['America/Havana', 'America/Managua']], ['Gulf Standard Time', ['Asia/Dubai', 'Asia/Muscat']], ['Pacific Daylight Time', ['America/Los_Angeles', 'America/Tijuana', 'America/Vancouver']], ['Pacific Standard Time', ['America/Los_Angeles', 'America/Tijuana', 'America/Vancouver']], ['Pacific Time', ['America/Los_Angeles', 'America/Tijuana', 'America/Vancouver']], ['South Georgia Time', ['Atlantic/South_Georgia']], ['India Standard Time', ['Asia/Colombo', 'Asia/Kolkata']], ['Irish Standard Time', ['Europe/Dublin']], ['Israel Standard Time', ['Asia/Jerusalem']], ['Malaysia Standard Time', ['Asia/Kuala_Lumpur']], ['Mountain Daylight Time', ['America/Boise', 'America/Cambridge_Bay', 'America/Denver', 'America/Edmonton', 'America/Inuvik', 'America/Yellowknife']], ['Mountain Standard Time', ['America/Boise', 'America/Cambridge_Bay', 'America/Chihuahua', 'America/Creston', 'America/Dawson', 'America/Dawson_Creek', 'America/Denver', 'America/Edmonton', 'America/Fort_Nelson', 'America/Hermosillo', 'America/Inuvik', 'America/Mazatlan', 'America/Phoenix', 'America/Whitehorse', 'America/Yellowknife']], ['Mountain Time', ['America/Boise', 'America/Cambridge_Bay', 'America/Chihuahua', 'America/Creston', 'America/Dawson', 'America/Dawson_Creek', 'America/Denver', 'America/Edmonton', 'America/Fort_Nelson', 'America/Hermosillo', 'America/Inuvik', 'America/Mazatlan', 'America/Phoenix', 'America/Whitehorse', 'America/Yellowknife']]]),
  Fi = new Map([['Africa/Abidjan', ["cote d'ivoire", "c\xF4te d'ivoire", "republic of c\xF4te d'ivoire"]], ['Africa/Mbabane', ['swaziland']], ['America/Adak', ['alaska', 'usa', 'u.s.a.', 'america']], ['America/Anchorage', ['alaska', 'usa', 'u.s.a.', 'america']], ['America/Boise', ['oregon']], ['America/Chicago', ['the windy city', 'alabama', 'arkansas', 'florida', 'illinois', 'iowa', 'kansas', 'louisiana', 'michigan', 'minnesota', 'chicago', 'missouri', 'nebraska', 'nevada', 'new mexico', 'oklahoma', 'south dakota', 'tennessee', 'texas', 'wisconsin', 'usa', 'u.s.a.', 'america']], ['America/Denver', ['abq', 'arizona', 'colorado', 'idaho', 'kansas', 'montana', 'nebraska', 'south dakota', 'texas', 'denver', 'wyoming', 'usa', 'u.s.a.', 'america']], ['America/Indiana/Indianapolis', ['indiana']], ['America/Indiana/Knox', ['indiana']], ['America/Indiana/Marengo', ['indiana']], ['America/Indiana/Petersburg', ['indiana']], ['America/Indiana/Tell_City', ['indiana']], ['America/Indiana/Vevay', ['indiana']], ['America/Indiana/Vincennes', ['indiana']], ['America/Indiana/Winamac', ['indiana']], ['America/Kralendijk', ['caribbean netherlands', 'bes islands', 'bonaire', 'sint eustatius', 'saba']], ['America/Los_Angeles', ['la', 'l.a.', 'lax', 'the city of angels', 'sd', 's.d', 'the orange county', 'oc', 'o.c.', 'sf', 's.f.', 'sfo', 'frisco', 'san fran', 'silicon valley', 'san francisco bay area', 'the city by the bay', 'lv', 'l.v.', 'nevada', 'sin city', 'norcal', 'north california', 'northern california', 'socal', 'south california', 'southern california', 'idaho', 'oregon', 'washington', 'usa', 'u.s.a.', 'america']], ['America/Louisville', ['kentucky']], ['America/Mexico_City', ['cdmx', 'c.d.m.x.']], ['America/New_York', ['nyc', 'n.y.c.', 'the big apple', 'gotham city', 'dc', 'd.c.', 'connecticut', 'delaware', 'florida', 'georgia', 'kentucky', 'maine', 'maryland', 'massachusetts', 'michigan', 'new hampshire', 'new jersey', 'north carolina', 'ohio', 'pennsylvania', 'rhode island', 'south carolina', 'tennessee', 'vermont', 'west virginia', 'usa', 'u.s.a.', 'america']], ['America/Nuuk', ['godthab']], ['America/Sao_Paulo', ['brasilia time', 'bras\xEDlia time', 'bras\xEDlia standard time', 'bras\xEDlia summer time', 'brazil time', 'brazil standard time', 'brazil summer time', 'brazillian standard time', 'brazillian summer time']], ['America/St_Vincent', ['st vincent', 'grenadines', 'st vincent and the grenadines', 'st. vincent and the grenadines']], ['Asia/Dubai', ['uae', 'u.a.e.']], ['Asia/Hong_Kong', ['hk', 'h.k.']], ['Asia/Kolkata', ['india time', 'indian time', 'india standard time', 'indian standard time']], ['Asia/Jakarta', ['java', 'sumatra', 'madura', 'bangka island', 'nias', 'bintan', 'belitung']], ['Asia/Jayapura', ['halmahera', 'seram', 'buru', 'laut', 'biak']], ['Asia/Jerusalem', ['tlv']], ['Asia/Makassar', ['sulawesi', 'kalimantan', 'indonesian borneo', 'bali', 'lombok', 'west timor', 'flores', 'sumbawa', 'sumba', 'buton', 'muna', 'tarakan', 'alor', 'rote', 'lembata', 'peleng', 'adonara']], ['Asia/Pontianak', ['bengkalis']], ['America/St_Barthelemy', ['st barthelemy', 'st. barthelemy', 'saint barthelemy', 'st barts', 'st. barts', 'saint barts', 'st barth', 'st. barth', 'saint barth', 'barth\xE9lemois']], ['Atlantic/St_Helena', ['st helena', 'st. helena', 'saint helena', 'ascension', 'tristan da cunha', 'saint helena, ascension and tristan da cunha']], ['Europe/Istanbul', ['T\xFCrkiye']], ['Europe/Kiev', ['kiev']], ['Europe/London', ['ldn', 'uk', 'u.k.', 'england', 'scotland', 'wales', 'great britain', 'british isles']], ['Europe/Madrid', ['barca', 'bar\xE7a', 'bcn', 'b.c.n.', 'mallorca', 'menorca', 'ibiza', 'formentera']], ['Europe/Mariehamn', ['aland', 'aland islands']], ['Europe/Paris', ['the city of light', 'the city of love']], ['GMT', ['royal observatory']], ['Indian/Cocos', ['keeling']], ['Indian/Kerguelen', ['himi', 'heard island', 'mcdonald islands']], ['Pacific/Honolulu', ['usa', 'u.s.a.', 'america']], ['Pacific/Kanton', ['enderbury']]]),
  O = new Map([['Afghanistan', {
    capital: 'Kabul',
    tzFull: 'Asia/Kabul',
    showInDefaultList: !0
  }], ['\xC5land Islands', {
    capital: 'Mariehamn',
    tzFull: 'Europe/Mariehamn',
    showInDefaultList: !1
  }], ['Albania', {
    capital: 'Tirana',
    tzFull: 'Europe/Tirane',
    showInDefaultList: !1
  }], ['Algeria', {
    capital: 'Algiers',
    tzFull: 'Africa/Algiers',
    showInDefaultList: !0
  }], ['American Samoa', {
    capital: 'Pago Pago',
    tzFull: 'Pacific/Pago_Pago',
    showInDefaultList: !1
  }], ['Andorra', {
    capital: 'Andorra la Vella',
    tzFull: 'Europe/Andorra',
    showInDefaultList: !1
  }], ['Angola', {
    capital: 'Luanda',
    tzFull: 'Africa/Luanda',
    showInDefaultList: !0
  }], ['Anguilla', {
    capital: 'The Valley',
    tzFull: 'America/Anguilla',
    showInDefaultList: !1
  }], ['Antarctica', {
    capital: 'McMurdo',
    tzFull: 'Antarctica/McMurdo',
    showInDefaultList: !1
  }], ['Antigua and Barbuda', {
    capital: "Saint John's",
    tzFull: 'America/Antigua',
    showInDefaultList: !1
  }], ['Argentina', {
    capital: 'Buenos Aires',
    tzFull: 'America/Argentina/Buenos_Aires',
    showInDefaultList: !0
  }], ['Armenia', {
    capital: 'Yerevan',
    tzFull: 'Asia/Yerevan',
    showInDefaultList: !1
  }], ['Aruba', {
    capital: 'Oranjestad',
    tzFull: 'America/Aruba',
    showInDefaultList: !1
  }], ['Ascension', {
    capital: 'Jamestown',
    tzFull: 'Atlantic/St_Helena',
    showInDefaultList: !1
  }], ['Australia', {
    capital: 'Canberra',
    tzFull: 'Australia/Sydney',
    showInDefaultList: !0
  }], ['Austria', {
    capital: 'Vienna',
    tzFull: 'Europe/Vienna',
    showInDefaultList: !0
  }], ['Azerbaijan', {
    capital: 'Baku',
    tzFull: 'Asia/Baku',
    showInDefaultList: !0
  }], ['Bahamas', {
    capital: 'Nassau',
    tzFull: 'America/Nassau',
    showInDefaultList: !1
  }], ['Bahrain', {
    capital: 'Manama',
    tzFull: 'Asia/Bahrain',
    showInDefaultList: !1
  }], ['Bangladesh', {
    capital: 'Dhaka',
    tzFull: 'Asia/Dhaka',
    showInDefaultList: !0
  }], ['Barbados', {
    capital: 'Bridgetown',
    tzFull: 'America/Barbados',
    showInDefaultList: !1
  }], ['Belarus', {
    capital: 'Minsk',
    tzFull: 'Europe/Minsk',
    showInDefaultList: !0
  }], ['Belgium', {
    capital: 'Brussels',
    tzFull: 'Europe/Brussels',
    showInDefaultList: !0
  }], ['Belize', {
    capital: 'Belmopan',
    tzFull: 'America/Belize',
    showInDefaultList: !1
  }], ['Benin', {
    capital: 'Porto-Novo',
    tzFull: 'Africa/Porto-Novo',
    showInDefaultList: !0
  }], ['Bermuda', {
    capital: 'Hamilton',
    tzFull: 'Atlantic/Bermuda',
    showInDefaultList: !1
  }], ['Bhutan', {
    capital: 'Thimphu',
    tzFull: 'Asia/Thimphu',
    showInDefaultList: !1
  }], ['Bolivia', {
    capital: 'Sucre',
    tzFull: 'America/La_Paz',
    showInDefaultList: !0
  }], ['Bosnia and Herzegovina', {
    capital: 'Sarajevo',
    tzFull: 'Europe/Sarajevo',
    showInDefaultList: !1
  }], ['Botswana', {
    capital: 'Gaborone',
    tzFull: 'Africa/Gaborone',
    showInDefaultList: !1
  }], ['Brazil', {
    capital: 'Brasilia',
    tzFull: 'America/Sao_Paulo',
    showInDefaultList: !0
  }], ['British Indian Ocean Territory', {
    capital: 'Diego Garcia',
    tzFull: 'Indian/Chagos',
    showInDefaultList: !1
  }], ['Brunei', {
    capital: 'Bandar Seri Begawan',
    tzFull: 'Asia/Brunei',
    showInDefaultList: !1
  }], ['Bulgaria', {
    capital: 'Sofia',
    tzFull: 'Europe/Sofia',
    showInDefaultList: !1
  }], ['Burkina Faso', {
    capital: 'Ouagadougou',
    tzFull: 'Africa/Ouagadougou',
    showInDefaultList: !0
  }], ['Burundi', {
    capital: 'Gitega',
    tzFull: 'Africa/Bujumbura',
    showInDefaultList: !0
  }], ['Cabo Verde', {
    capital: 'Praia',
    tzFull: 'Atlantic/Cape_Verde',
    showInDefaultList: !1
  }], ['Cambodia', {
    capital: 'Phnom Penh',
    tzFull: 'Asia/Phnom_Penh',
    showInDefaultList: !0
  }], ['Cameroon', {
    capital: 'Yaounde',
    tzFull: 'Africa/Douala',
    showInDefaultList: !0
  }], ['Canada', {
    capital: 'Ottawa',
    tzFull: 'America/Toronto',
    showInDefaultList: !0
  }], ['Caribbean Netherlands', {
    capital: 'Kralendijk',
    tzFull: 'America/Kralendijk',
    showInDefaultList: !1
  }], ['Cayman Islands', {
    capital: 'George Town',
    tzFull: 'America/Cayman',
    showInDefaultList: !1
  }], ['Central African Republic', {
    capital: 'Bangui',
    tzFull: 'Africa/Bangui',
    showInDefaultList: !1
  }], ['Chad', {
    capital: "N'Djamena",
    tzFull: 'Africa/Ndjamena',
    showInDefaultList: !0
  }], ['Chile', {
    capital: 'Santiago',
    tzFull: 'America/Santiago',
    showInDefaultList: !0
  }], ['China', {
    capital: 'Beijing',
    tzFull: 'Asia/Shanghai',
    showInDefaultList: !0
  }], ['Christmas Island', {
    capital: 'Flying Fish Cove',
    tzFull: 'Indian/Christmas',
    showInDefaultList: !1
  }], ['Cocos Islands', {
    capital: 'West Island',
    tzFull: 'Indian/Cocos',
    showInDefaultList: !1
  }], ['Colombia', {
    capital: 'Bogota',
    tzFull: 'America/Bogota',
    showInDefaultList: !0
  }], ['Comoros', {
    capital: 'Moroni',
    tzFull: 'Indian/Comoro',
    showInDefaultList: !1
  }], ['Democratic Republic of the Congo', {
    capital: 'Kinshasa',
    tzFull: 'Africa/Kinshasa',
    showInDefaultList: !1
  }], ['Cook Islands', {
    capital: 'Avarua',
    tzFull: 'Pacific/Rarotonga',
    showInDefaultList: !1
  }], ['Coordinated Universal Time', {
    capital: 'UTC',
    tzFull: 'UTC',
    showInDefaultList: !1
  }], ['Costa Rica', {
    capital: 'San Jose',
    tzFull: 'America/Costa_Rica',
    showInDefaultList: !1
  }], ['Croatia', {
    capital: 'Zagreb',
    tzFull: 'Europe/Zagreb',
    showInDefaultList: !1
  }], ['Cuba', {
    capital: 'Havana',
    tzFull: 'America/Havana',
    showInDefaultList: !0
  }], ['Cura\xE7ao', {
    capital: 'Willemstad',
    tzFull: 'America/Curacao',
    showInDefaultList: !1
  }], ['Cyprus', {
    capital: 'Nicosia',
    tzFull: 'Asia/Famagusta',
    showInDefaultList: !1
  }], ['Czechia', {
    capital: 'Prague',
    tzFull: 'Europe/Prague',
    showInDefaultList: !0
  }], ['Denmark', {
    capital: 'Copenhagen',
    tzFull: 'Europe/Copenhagen',
    showInDefaultList: !1
  }], ['Djibouti', {
    capital: 'Djibouti',
    tzFull: 'Africa/Djibouti',
    showInDefaultList: !1
  }], ['Dominica', {
    capital: 'Roseau',
    tzFull: 'America/Dominica',
    showInDefaultList: !1
  }], ['Dominican Republic', {
    capital: 'Santo Domingo',
    tzFull: 'America/Santo_Domingo',
    showInDefaultList: !0
  }], ['Ecuador', {
    capital: 'Quito',
    tzFull: 'America/Guayaquil',
    showInDefaultList: !0
  }], ['Egypt', {
    capital: 'Cairo',
    tzFull: 'Africa/Cairo',
    showInDefaultList: !0
  }], ['El Salvador', {
    capital: 'San Salvador',
    tzFull: 'America/El_Salvador',
    showInDefaultList: !1
  }], ['Equatorial Guinea', {
    capital: 'Malabo',
    tzFull: 'Africa/Malabo',
    showInDefaultList: !1
  }], ['Eritrea', {
    capital: 'Asmara',
    tzFull: 'Africa/Asmera',
    showInDefaultList: !1
  }], ['Estonia', {
    capital: 'Tallinn',
    tzFull: 'Europe/Tallinn',
    showInDefaultList: !1
  }], ['Ethiopia', {
    capital: 'Addis Ababa',
    tzFull: 'Africa/Addis_Ababa',
    showInDefaultList: !0
  }], ['Eswatini', {
    capital: 'Mbabane',
    tzFull: 'Africa/Mbabane',
    showInDefaultList: !1
  }], ['Falkland Islands', {
    capital: 'Stanley',
    tzFull: 'Atlantic/Stanley',
    showInDefaultList: !1
  }], ['Faroe Islands', {
    capital: 'Torshavn',
    tzFull: 'Atlantic/Faroe',
    showInDefaultList: !1
  }], ['Fiji', {
    capital: 'Suva',
    tzFull: 'Pacific/Fiji',
    showInDefaultList: !1
  }], ['Finland', {
    capital: 'Helsinki',
    tzFull: 'Europe/Helsinki',
    showInDefaultList: !1
  }], ['France', {
    capital: 'Paris',
    tzFull: 'Europe/Paris',
    showInDefaultList: !0
  }], ['French Guiana', {
    capital: 'Cayenne',
    tzFull: 'America/Cayenne',
    showInDefaultList: !1
  }], ['French Polynesia', {
    capital: 'Papeete',
    tzFull: 'Pacific/Tahiti',
    showInDefaultList: !1
  }], ['French Southern Territories', {
    capital: 'Port-aux-Fran\xE7ais',
    tzFull: 'Indian/Kerguelen',
    showInDefaultList: !1
  }], ['Gabon', {
    capital: 'Libreville',
    tzFull: 'Africa/Libreville',
    showInDefaultList: !1
  }], ['Gambia', {
    capital: 'Banjul',
    tzFull: 'Africa/Banjul',
    showInDefaultList: !1
  }], ['Gaza Strip', {
    capital: 'Gaza',
    tzFull: 'Asia/Gaza',
    showInDefaultList: !1
  }], ['Georgia', {
    capital: 'Tbilisi',
    tzFull: 'Asia/Tbilisi',
    showInDefaultList: !1
  }], ['Germany', {
    capital: 'Berlin',
    tzFull: 'Europe/Berlin',
    showInDefaultList: !0
  }], ['Ghana', {
    capital: 'Accra',
    tzFull: 'Africa/Accra',
    showInDefaultList: !0
  }], ['Gibraltar', {
    capital: 'Gibraltar',
    tzFull: 'Europe/Gibraltar',
    showInDefaultList: !1
  }], ['Greece', {
    capital: 'Athens',
    tzFull: 'Europe/Athens',
    showInDefaultList: !0
  }], ['Greenland', {
    capital: 'Nuuk',
    tzFull: 'America/Godthab',
    showInDefaultList: !1
  }], ['Grenada', {
    capital: "Saint George's",
    tzFull: 'America/Grenada',
    showInDefaultList: !1
  }], ['Guadeloupe', {
    capital: 'Basse-Terre',
    tzFull: 'America/Guadeloupe',
    showInDefaultList: !1
  }], ['Guam', {
    capital: 'Hagta',
    tzFull: 'Pacific/Guam',
    showInDefaultList: !1
  }], ['Guatemala', {
    capital: 'Guatemala City',
    tzFull: 'America/Guatemala',
    showInDefaultList: !0
  }], ['Guernsey', {
    capital: 'St. Peter Port',
    tzFull: 'Europe/Guernsey',
    showInDefaultList: !1
  }], ['Guinea', {
    capital: 'Conakry',
    tzFull: 'Africa/Conakry',
    showInDefaultList: !0
  }], ['Guinea-Bissau', {
    capital: 'Bissau',
    tzFull: 'Africa/Bissau',
    showInDefaultList: !1
  }], ['Guyana', {
    capital: 'Georgetown',
    tzFull: 'America/Guyana',
    showInDefaultList: !1
  }], ['Haiti', {
    capital: 'Port-au-Prince',
    tzFull: 'America/Port-au-Prince',
    showInDefaultList: !0
  }], ['Holy See', {
    capital: 'Vatican City',
    tzFull: 'Europe/Vatican',
    showInDefaultList: !1
  }], ['Honduras', {
    capital: 'Tegucigalpa',
    tzFull: 'America/Tegucigalpa',
    showInDefaultList: !0
  }], ['Hong Kong', {
    capital: 'Hong Kong',
    tzFull: 'Asia/Hong_Kong',
    showInDefaultList: !1
  }], ['Hungary', {
    capital: 'Budapest',
    tzFull: 'Europe/Budapest',
    showInDefaultList: !0
  }], ['Iceland', {
    capital: 'Reykjavik',
    tzFull: 'Atlantic/Reykjavik',
    showInDefaultList: !1
  }], ['India', {
    capital: 'New Delhi',
    tzFull: 'Asia/Kolkata',
    showInDefaultList: !0
  }], ['Indonesia', {
    capital: 'Jakarta',
    tzFull: 'Asia/Jakarta',
    showInDefaultList: !0
  }], ['Iran', {
    capital: 'Tehran',
    tzFull: 'Asia/Tehran',
    showInDefaultList: !0
  }], ['Iraq', {
    capital: 'Baghdad',
    tzFull: 'Asia/Baghdad',
    showInDefaultList: !0
  }], ['Ireland', {
    capital: 'Dublin',
    tzFull: 'Europe/Dublin',
    showInDefaultList: !1
  }], ['Isle of Man', {
    capital: 'Douglas',
    tzFull: 'Europe/Isle_of_Man',
    showInDefaultList: !1
  }], ['Israel', {
    capital: 'Jerusalem',
    tzFull: 'Asia/Jerusalem',
    showInDefaultList: !0
  }], ['Italy', {
    capital: 'Rome',
    tzFull: 'Europe/Rome',
    showInDefaultList: !0
  }], ['Ivory Coast', {
    capital: 'Yamoussoukro',
    tzFull: 'Africa/Abidjan',
    showInDefaultList: !0
  }], ['Jamaica', {
    capital: 'Kingston',
    tzFull: 'America/Jamaica',
    showInDefaultList: !1
  }], ['Japan', {
    capital: 'Tokyo',
    tzFull: 'Asia/Tokyo',
    showInDefaultList: !0
  }], ['Jersey', {
    capital: 'Saint Helier',
    tzFull: 'Europe/Jersey',
    showInDefaultList: !1
  }], ['Jordan', {
    capital: 'Amman',
    tzFull: 'Asia/Amman',
    showInDefaultList: !0
  }], ['Kazakhstan', {
    capital: 'Nur-Sultan',
    tzFull: 'Asia/Almaty',
    showInDefaultList: !0
  }], ['Kenya', {
    capital: 'Nairobi',
    tzFull: 'Africa/Nairobi',
    showInDefaultList: !0
  }], ['Kiribati', {
    capital: 'Tarawa',
    tzFull: 'Pacific/Tarawa',
    showInDefaultList: !1
  }], ['Kosovo', {
    capital: 'Pristina',
    tzFull: 'Europe/Belgrade',
    showInDefaultList: !1
  }], ['Kuwait', {
    capital: 'Kuwait City',
    tzFull: 'Asia/Kuwait',
    showInDefaultList: !1
  }], ['Kyrgyzstan', {
    capital: 'Bishkek',
    tzFull: 'Asia/Bishkek',
    showInDefaultList: !1
  }], ['Laos', {
    capital: 'Vientiane',
    tzFull: 'Asia/Vientiane',
    showInDefaultList: !1
  }], ['Latvia', {
    capital: 'Riga',
    tzFull: 'Europe/Riga',
    showInDefaultList: !1
  }], ['Lebanon', {
    capital: 'Beirut',
    tzFull: 'Asia/Beirut',
    showInDefaultList: !1
  }], ['Lesotho', {
    capital: 'Maseru',
    tzFull: 'Africa/Maseru',
    showInDefaultList: !1
  }], ['Liberia', {
    capital: 'Monrovia',
    tzFull: 'Africa/Monrovia',
    showInDefaultList: !1
  }], ['Libya', {
    capital: 'Tripoli',
    tzFull: 'Europe/Athens',
    showInDefaultList: !1
  }], ['Liechtenstein', {
    capital: 'Vaduz',
    tzFull: 'Europe/Vaduz',
    showInDefaultList: !1
  }], ['Lithuania', {
    capital: 'Vilnius',
    tzFull: 'Europe/Vilnius',
    showInDefaultList: !1
  }], ['Luxembourg', {
    capital: 'Luxembourg',
    tzFull: 'Europe/Luxembourg',
    showInDefaultList: !1
  }], ['Macao', {
    capital: 'Macau',
    tzFull: 'Asia/Macau',
    showInDefaultList: !1
  }], ['Madagascar', {
    capital: 'Antananarivo',
    tzFull: 'Indian/Antananarivo',
    showInDefaultList: !0
  }], ['Malawi', {
    capital: 'Lilongwe',
    tzFull: 'Africa/Blantyre',
    showInDefaultList: !0
  }], ['Malaysia', {
    capital: 'Kuala Lumpur',
    tzFull: 'Asia/Kuala_Lumpur',
    showInDefaultList: !0
  }], ['Maldives', {
    capital: 'Male',
    tzFull: 'Indian/Maldives',
    showInDefaultList: !1
  }], ['Mali', {
    capital: 'Bamako',
    tzFull: 'Africa/Bamako',
    showInDefaultList: !0
  }], ['Malta', {
    capital: 'Valletta',
    tzFull: 'Europe/Malta',
    showInDefaultList: !1
  }], ['Marshall Islands', {
    capital: 'Majuro',
    tzFull: 'Pacific/Majuro',
    showInDefaultList: !1
  }], ['Martinique', {
    capital: 'Fort-de-France',
    tzFull: 'America/Martinique',
    showInDefaultList: !1
  }], ['Mauritania', {
    capital: 'Nouakchott',
    tzFull: 'Africa/Nouakchott',
    showInDefaultList: !1
  }], ['Mauritius', {
    capital: 'Port Louis',
    tzFull: 'Indian/Mauritius',
    showInDefaultList: !1
  }], ['Mayotte', {
    capital: 'Mamoudzou',
    tzFull: 'Indian/Mayotte',
    showInDefaultList: !1
  }], ['Mexico', {
    capital: 'Mexico City',
    tzFull: 'America/Mexico_City',
    showInDefaultList: !0
  }], ['Micronesia', {
    capital: 'Palikir',
    tzFull: 'Pacific/Pohnpei',
    showInDefaultList: !1
  }], ['Moldova', {
    capital: 'Chisinau',
    tzFull: 'Europe/Chisinau',
    showInDefaultList: !1
  }], ['Monaco', {
    capital: 'Monaco',
    tzFull: 'Europe/Paris',
    showInDefaultList: !1
  }], ['Mongolia', {
    capital: 'Ulaanbaatar',
    tzFull: 'Asia/Ulaanbaatar',
    showInDefaultList: !1
  }], ['Montenegro', {
    capital: 'Podgorica',
    tzFull: 'Europe/Podgorica',
    showInDefaultList: !1
  }], ['Montserrat', {
    capital: 'Brades',
    tzFull: 'America/Montserrat',
    showInDefaultList: !1
  }], ['Morocco', {
    capital: 'Rabat',
    tzFull: 'Africa/Casablanca',
    showInDefaultList: !0
  }], ['Mozambique', {
    capital: 'Maputo',
    tzFull: 'Africa/Maputo',
    showInDefaultList: !0
  }], ['Myanmar', {
    capital: 'Nay Pyi Taw',
    tzFull: 'Asia/Yangon',
    showInDefaultList: !0
  }], ['Namibia', {
    capital: 'Windhoek',
    tzFull: 'Africa/Windhoek',
    showInDefaultList: !1
  }], ['Nauru', {
    capital: 'Yaren',
    tzFull: 'Pacific/Nauru',
    showInDefaultList: !1
  }], ['Nepal', {
    capital: 'Kathmandu',
    tzFull: 'Asia/Katmandu',
    showInDefaultList: !0
  }], ['Netherlands', {
    capital: 'Amsterdam',
    tzFull: 'Europe/Amsterdam',
    showInDefaultList: !0
  }], ['New Caledonia', {
    capital: 'Noumea',
    tzFull: 'Pacific/Noumea',
    showInDefaultList: !1
  }], ['New Zealand', {
    capital: 'Wellington',
    tzFull: 'Pacific/Auckland',
    showInDefaultList: !1
  }], ['Nicaragua', {
    capital: 'Managua',
    tzFull: 'America/Managua',
    showInDefaultList: !1
  }], ['Niger', {
    capital: 'Niamey',
    tzFull: 'Africa/Niamey',
    showInDefaultList: !0
  }], ['Nigeria', {
    capital: 'Abuja',
    tzFull: 'Africa/Lagos',
    showInDefaultList: !0
  }], ['Niue', {
    capital: 'Alofi',
    tzFull: 'Pacific/Niue',
    showInDefaultList: !1
  }], ['Norfolk Island', {
    capital: 'Kingston',
    tzFull: 'Pacific/Norfolk',
    showInDefaultList: !1
  }], ['North Korea', {
    capital: 'Pyongyang',
    tzFull: 'Asia/Pyongyang',
    showInDefaultList: !0
  }], ['North Macedonia', {
    capital: 'Skopje',
    tzFull: 'Europe/Skopje',
    showInDefaultList: !1
  }], ['Northern Mariana Islands', {
    capital: 'Capitol Hill',
    tzFull: 'Pacific/Saipan',
    showInDefaultList: !1
  }], ['Norway', {
    capital: 'Oslo',
    tzFull: 'Europe/Oslo',
    showInDefaultList: !1
  }], ['Oman', {
    capital: 'Muscat',
    tzFull: 'Asia/Muscat',
    showInDefaultList: !1
  }], ['Pakistan', {
    capital: 'Islamabad',
    tzFull: 'Asia/Karachi',
    showInDefaultList: !0
  }], ['Palau', {
    capital: 'Ngerulmud',
    tzFull: 'Pacific/Palau',
    showInDefaultList: !1
  }], ['Palestine', {
    capital: 'Ramallah',
    tzFull: 'Asia/Gaza',
    showInDefaultList: !1
  }], ['Panama', {
    capital: 'Panama City',
    tzFull: 'America/Panama',
    showInDefaultList: !1
  }], ['Papua New Guinea', {
    capital: 'Port Moresby',
    tzFull: 'Pacific/Port_Moresby',
    showInDefaultList: !1
  }], ['Paraguay', {
    capital: 'Asuncion',
    tzFull: 'America/Asuncion',
    showInDefaultList: !1
  }], ['Peru', {
    capital: 'Lima',
    tzFull: 'America/Lima',
    showInDefaultList: !0
  }], ['Philippines', {
    capital: 'Manila',
    tzFull: 'Asia/Manila',
    showInDefaultList: !0
  }], ['Pitcairn', {
    capital: 'Adamstown',
    tzFull: 'Pacific/Pitcairn',
    showInDefaultList: !1
  }], ['Poland', {
    capital: 'Warsaw',
    tzFull: 'Europe/Warsaw',
    showInDefaultList: !0
  }], ['Portugal', {
    capital: 'Lisbon',
    tzFull: 'Europe/Lisbon',
    showInDefaultList: !0
  }], ['Puerto Rico', {
    capital: 'San Juan',
    tzFull: 'America/Puerto_Rico',
    showInDefaultList: !1
  }], ['Qatar', {
    capital: 'Doha',
    tzFull: 'Asia/Qatar',
    showInDefaultList: !1
  }], ['Republic of the Congo', {
    capital: 'Brazzaville',
    tzFull: 'Africa/Brazzaville',
    showInDefaultList: !0
  }], ['R\xE9union', {
    capital: 'Saint-Denis',
    tzFull: 'Indian/Reunion',
    showInDefaultList: !1
  }], ['Romania', {
    capital: 'Bucharest',
    tzFull: 'Europe/Bucharest',
    showInDefaultList: !0
  }], ['Russia', {
    capital: 'Moscow',
    tzFull: 'Europe/Moscow',
    showInDefaultList: !0
  }], ['Rwanda', {
    capital: 'Kigali',
    tzFull: 'Africa/Kigali',
    showInDefaultList: !0
  }], ['Saint Barth\xE9lemy', {
    capital: 'Gustavia',
    tzFull: 'America/St_Barthelemy',
    showInDefaultList: !1
  }], ['Saint Helena', {
    capital: 'Jamestown',
    tzFull: 'Atlantic/St_Helena',
    showInDefaultList: !1
  }], ['Saint Helena, Ascension and Tristan da Cunha', {
    capital: 'Jamestown',
    tzFull: 'Atlantic/St_Helena',
    showInDefaultList: !1
  }], ['Saint Kitts and Nevis', {
    capital: 'Basseterre',
    tzFull: 'America/St_Kitts',
    showInDefaultList: !1
  }], ['Saint Lucia', {
    capital: 'Castries',
    tzFull: 'America/St_Lucia',
    showInDefaultList: !1
  }], ['Saint Martin', {
    capital: 'Marigot',
    tzFull: 'America/St_Barthelemy',
    showInDefaultList: !1
  }], ['Saint Pierre and Miquelon', {
    capital: 'Saint-Pierre',
    tzFull: 'America/Miquelon',
    showInDefaultList: !1
  }], ['Saint Vincent and the Grenadines', {
    capital: 'Kingstown',
    tzFull: 'America/St_Vincent',
    showInDefaultList: !1
  }], ['Samoa', {
    capital: 'Apia',
    tzFull: 'Pacific/Apia',
    showInDefaultList: !1
  }], ['San Marino', {
    capital: 'San Marino',
    tzFull: 'Europe/San_Marino',
    showInDefaultList: !1
  }], ['Sao Tome and Principe', {
    capital: 'Sao Tome',
    tzFull: 'Africa/Sao_Tome',
    showInDefaultList: !1
  }], ['Saudi Arabia', {
    capital: 'Riyadh',
    tzFull: 'Asia/Riyadh',
    showInDefaultList: !0
  }], ['Senegal', {
    capital: 'Dakar',
    tzFull: 'Africa/Dakar',
    showInDefaultList: !0
  }], ['Serbia', {
    capital: 'Belgrade',
    tzFull: 'Europe/Belgrade',
    showInDefaultList: !1
  }], ['Seychelles', {
    capital: 'Victoria',
    tzFull: 'Indian/Mahe',
    showInDefaultList: !1
  }], ['Sierra Leone', {
    capital: 'Freetown',
    tzFull: 'Africa/Freetown',
    showInDefaultList: !1
  }], ['Singapore', {
    capital: 'Singapore',
    tzFull: 'Asia/Singapore',
    showInDefaultList: !1
  }], ['Sint Maarten', {
    capital: 'Philipsburg',
    tzFull: 'America/Curacao',
    showInDefaultList: !1
  }], ['Slovakia', {
    capital: 'Bratislava',
    tzFull: 'Europe/Bratislava',
    showInDefaultList: !1
  }], ['Slovenia', {
    capital: 'Ljubljana',
    tzFull: 'Europe/Ljubljana',
    showInDefaultList: !1
  }], ['Solomon Islands', {
    capital: 'Honiara',
    tzFull: 'Pacific/Guadalcanal',
    showInDefaultList: !1
  }], ['Somalia', {
    capital: 'Mogadishu',
    tzFull: 'Africa/Mogadishu',
    showInDefaultList: !0
  }], ['South Africa', {
    capital: 'Pretoria',
    tzFull: 'Africa/Johannesburg',
    showInDefaultList: !0
  }], ['South Georgia and the South Sandwich Islands', {
    capital: 'King Edward Point',
    tzFull: 'Atlantic/South_Georgia',
    showInDefaultList: !1
  }], ['South Korea', {
    capital: 'Seoul',
    tzFull: 'Asia/Seoul',
    showInDefaultList: !0
  }], ['South Sudan', {
    capital: 'Juba',
    tzFull: 'Africa/Juba',
    showInDefaultList: !0
  }], ['Spain', {
    capital: 'Madrid',
    tzFull: 'Europe/Madrid',
    showInDefaultList: !0
  }], ['Sri Lanka', {
    capital: 'Sri Jayewardenepura Kotte',
    tzFull: 'Asia/Colombo',
    showInDefaultList: !0
  }], ['Sudan', {
    capital: 'Khartoum',
    tzFull: 'Africa/Khartoum',
    showInDefaultList: !0
  }], ['Suriname', {
    capital: 'Paramaribo',
    tzFull: 'America/Paramaribo',
    showInDefaultList: !1
  }], ['Svalbard and Jan Mayen', {
    capital: 'Longyearbyen',
    tzFull: 'Arctic/Longyearbyen',
    showInDefaultList: !1
  }], ['Sweden', {
    capital: 'Stockholm',
    tzFull: 'Europe/Stockholm',
    showInDefaultList: !0
  }], ['Switzerland', {
    capital: 'Bern',
    tzFull: 'Europe/Zurich',
    showInDefaultList: !0
  }], ['Syria', {
    capital: 'Damascus',
    tzFull: 'Asia/Damascus',
    showInDefaultList: !0
  }], ['Taiwan', {
    capital: 'Taipei',
    tzFull: 'Asia/Taipei',
    showInDefaultList: !0
  }], ['Tajikistan', {
    capital: 'Dushanbe',
    tzFull: 'Asia/Dushanbe',
    showInDefaultList: !0
  }], ['Tanzania', {
    capital: 'Dodoma',
    tzFull: 'Africa/Dar_es_Salaam',
    showInDefaultList: !0
  }], ['Thailand', {
    capital: 'Bangkok',
    tzFull: 'Asia/Bangkok',
    showInDefaultList: !0
  }], ['Timor-Leste', {
    capital: 'Dili',
    tzFull: 'Asia/Dili',
    showInDefaultList: !1
  }], ['Togo', {
    capital: 'Lome',
    tzFull: 'Africa/Lome',
    showInDefaultList: !0
  }], ['Tokelau', {
    capital: 'Fakaofo',
    tzFull: 'Pacific/Fakaofo',
    showInDefaultList: !1
  }], ['Tonga', {
    capital: 'Nuku`alofa',
    tzFull: 'Pacific/Tongatapu',
    showInDefaultList: !1
  }], ['Trinidad and Tobago', {
    capital: 'Port of Spain',
    tzFull: 'America/Port_of_Spain',
    showInDefaultList: !1
  }], ['Tristan da Cunha', {
    capital: 'Jamestown',
    tzFull: 'Atlantic/St_Helena',
    showInDefaultList: !1
  }], ['Tunisia', {
    capital: 'Tunis',
    tzFull: 'Africa/Tunis',
    showInDefaultList: !0
  }], ['T\xFCrkiye', {
    capital: 'Ankara',
    tzFull: 'Europe/Istanbul',
    showInDefaultList: !0
  }], ['Turkmenistan', {
    capital: 'Ashgabat',
    tzFull: 'Asia/Ashgabat',
    showInDefaultList: !1
  }], ['Turks and Caicos Islands', {
    capital: 'Grand Turk',
    tzFull: 'America/Grand_Turk',
    showInDefaultList: !1
  }], ['Tuvalu', {
    capital: 'Funafuti',
    tzFull: 'Pacific/Funafuti',
    showInDefaultList: !1
  }], ['Uganda', {
    capital: 'Kampala',
    tzFull: 'Africa/Kampala',
    showInDefaultList: !0
  }], ['Ukraine', {
    capital: 'Kyiv',
    tzFull: 'Europe/Kiev',
    showInDefaultList: !0
  }], ['United Arab Emirates', {
    capital: 'Abu Dhabi',
    tzFull: 'Asia/Dubai',
    showInDefaultList: !0
  }], ['United Kingdom', {
    capital: 'London',
    tzFull: 'Europe/London',
    showInDefaultList: !0
  }], ['United States', {
    capital: 'Washington',
    tzFull: 'America/New_York',
    showInDefaultList: !0
  }], ['United States Minor Outlying Islands', {
    capital: 'Midway',
    tzFull: 'Pacific/Midway',
    showInDefaultList: !1
  }], ['Uruguay', {
    capital: 'Montevideo',
    tzFull: 'America/Montevideo',
    showInDefaultList: !1
  }], ['Uzbekistan', {
    capital: 'Tashkent',
    tzFull: 'Asia/Samarkand',
    showInDefaultList: !0
  }], ['Vanuatu', {
    capital: 'Port-Vila',
    tzFull: 'Pacific/Efate',
    showInDefaultList: !1
  }], ['Venezuela', {
    capital: 'Caracas',
    tzFull: 'America/Caracas',
    showInDefaultList: !0
  }], ['Vietnam', {
    capital: 'Hanoi',
    tzFull: 'Asia/Ho_Chi_Minh',
    showInDefaultList: !0
  }], ['Virgin Islands (UK)', {
    capital: 'Road Town',
    tzFull: 'America/Tortola',
    showInDefaultList: !1
  }], ['Virgin Islands (US)', {
    capital: 'Charlotte Amalie',
    tzFull: 'America/St_Thomas',
    showInDefaultList: !1
  }], ['Wallis and Futuna', {
    capital: 'Mata-Utu',
    tzFull: 'Pacific/Wallis',
    showInDefaultList: !1
  }], ['Western Sahara', {
    capital: 'El Aai\xFAn',
    tzFull: 'Africa/El_Aaiun',
    showInDefaultList: !1
  }], ['Yemen', {
    capital: 'Sanaa',
    tzFull: 'Asia/Aden',
    showInDefaultList: !0
  }], ['Zambia', {
    capital: 'Lusaka',
    tzFull: 'Africa/Lusaka',
    showInDefaultList: !0
  }], ['Zimbabwe', {
    capital: 'Harare',
    tzFull: 'Africa/Harare',
    showInDefaultList: !0
  }]]);
function b(a) {
  return (a == null ? void 0 : a.length) > 0;
}
var Ri = [...ri.keys()],
  vr = [...ei.keys()],
  Br = [...Ii.keys()],
  wr = [...H.keys()],
  Lr = [...Gi.keys()],
  w = {
    isCity: !1,
    isCountry: !1,
    isTzAbbr: !1,
    isTzName: !1,
    isPhraseName: !1,
    isTzFullName: !1
  },
  L = {
    phrase: null,
    tzList: null,
    name: null,
    meta: w
  };
function ws(a) {
  let e = a == null ? void 0 : a.toUpperCase();
  if (Ri != null && Ri.includes(e)) {
    let i = ri.get(e);
    return [f(g({}, L), {
      phrase: e,
      tzList: i,
      meta: f(g({}, w), {
        isTzAbbr: !0
      })
    })];
  }
}
function Ls(a) {
  let e = a == null ? void 0 : a.toLowerCase();
  if (b(wr)) return wr.filter(r => r == null ? void 0 : r.toLowerCase().includes(e)).map(r => {
    let o = H.get(r),
      n = ri.get(o);
    return f(g({}, L), {
      phrase: r,
      tzList: n,
      meta: f(g({}, w), {
        isTzAbbr: !0
      })
    });
  });
}
function Ds(a) {
  let e = a == null ? void 0 : a.toLowerCase();
  if (b(Lr)) return Lr.filter(r => r == null ? void 0 : r.toLowerCase().includes(e)).map(r => {
    let o = Gi.get(r);
    return f(g({}, L), {
      phrase: r,
      tzList: o,
      meta: f(g({}, w), {
        isTzFullName: !0
      })
    });
  });
}
function zs(a) {
  let e = a == null ? void 0 : a.toLowerCase();
  if (b(vr)) return vr.filter(i => i == null ? void 0 : i.toLowerCase().includes(e)).map(i => {
    let r = ei.get(i);
    return f(g({}, L), {
      phrase: i,
      tzList: r,
      meta: f(g({}, w), {
        isCountry: !0
      })
    });
  });
}
function Is(a) {
  let e = a == null ? void 0 : a.toLowerCase();
  if (b(Br)) return Br.filter(i => i == null ? void 0 : i.toLowerCase().includes(e)).map(i => {
    let r = Ii.get(i);
    return f(g({}, L), {
      phrase: i,
      tzList: r,
      meta: f(g({}, w), {
        isCity: !0
      })
    });
  });
}
function Ns(a) {
  let e = a == null ? void 0 : a.toLowerCase(),
    i = [];
  if (Fi.size) return Fi.forEach((r, o) => {
    r.filter(n => n.toLowerCase().includes(e)).forEach(n => {
      i.push(f(g({}, L), {
        phrase: n,
        tzList: [o],
        meta: f(g({}, w), {
          isPhraseName: !0
        })
      }));
    });
  }), i;
}
function la(a) {
  var e, i, r;
  if (a) {
    let o = (e = a == null ? void 0 : a.trim()) == null ? void 0 : e.split('/');
    return (r = (i = o[o.length - 1]) == null ? void 0 : i.replaceAll('_', ' ')) == null ? void 0 : r.trim();
  }
}
function oi(a, e, i) {
  return Ni.has(e) && Ni.get(e).forEach(function (r, o) {
    if (r.tzOffset == a) return a = i ? r.tzShortName : r.tzFullName, a;
  }), a;
}
function Gs(a, e = []) {
  let i = a == null ? void 0 : a.trim();
  return i.includes(' ') && (i = i.replaceAll(' ', '_')), e.filter(r => {
    if (r) return la(r).toLowerCase().includes(i == null ? void 0 : i.toLowerCase());
  });
}
function Fs(a) {
  let [e] = Gs(a, _r),
    i = [],
    r = la(e);
  return ei.forEach((o, n) => {
    o.includes(e) && i.push(f(g({}, L), {
      phrase: r,
      tzList: [e],
      name: n,
      meta: f(g({}, w), {
        isTzName: !0
      })
    }));
  }), i;
}
function Dr(a) {
  let e = a == null ? void 0 : a.trim();
  if (e) {
    let i = [],
      r = ws(e);
    r != null && r.length && (i = [...r]);
    let o = Ls(e);
    o != null && o.length && (i = [...i, ...o]);
    let n = Ds(e);
    n != null && n.length && (i = [...i, ...n]);
    let t = Is(e);
    t != null && t.length && (i = [...i, ...t]);
    let s = zs(e);
    s != null && s.length && (i = [...i, ...s]);
    let u = Fs(e);
    u != null && u.length && (i = [...i, ...u]);
    let A = Ns(e);
    return A != null && A.length && (i = [...i, ...A]), i != null && i.length ? {
      result: i,
      err: !1
    } : {
      err: !0,
      result: [L]
    };
  }
}
function zr(a, e) {
  var i = Object.keys(a);
  if (Object.getOwnPropertySymbols) {
    var r = Object.getOwnPropertySymbols(a);
    e && (r = r.filter(function (o) {
      return Object.getOwnPropertyDescriptor(a, o).enumerable;
    })), i.push.apply(i, r);
  }
  return i;
}
function ca(a) {
  for (var e = 1; e < arguments.length; e++) {
    var i = arguments[e] != null ? arguments[e] : {};
    e % 2 ? zr(Object(i), !0).forEach(function (r) {
      Fr(a, r, i[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(a, Object.getOwnPropertyDescriptors(i)) : zr(Object(i)).forEach(function (r) {
      Object.defineProperty(a, r, Object.getOwnPropertyDescriptor(i, r));
    });
  }
  return a;
}
function Fr(a, e, i) {
  return e in a ? Object.defineProperty(a, e, {
    value: i,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : a[e] = i, a;
}
function Rs(a, e) {
  if (a == null) return {};
  var i = {},
    r = Object.keys(a),
    o,
    n;
  for (n = 0; n < r.length; n++) o = r[n], !(e.indexOf(o) >= 0) && (i[o] = a[o]);
  return i;
}
function Hs(a, e) {
  if (a == null) return {};
  var i = Rs(a, e),
    r,
    o;
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(a);
    for (o = 0; o < n.length; o++) r = n[o], !(e.indexOf(r) >= 0) && Object.prototype.propertyIsEnumerable.call(a, r) && (i[r] = a[r]);
  }
  return i;
}
function Os(a, e) {
  return Js(a) || xs(a, e) || Ys(a, e) || js();
}
function Js(a) {
  if (Array.isArray(a)) return a;
}
function xs(a, e) {
  var i = a == null ? null : typeof Symbol < 'u' && a[Symbol.iterator] || a['@@iterator'];
  if (i != null) {
    var r = [],
      o = !0,
      n = !1,
      t,
      s;
    try {
      for (i = i.call(a); !(o = (t = i.next()).done) && (r.push(t.value), !(e && r.length === e)); o = !0);
    } catch (u) {
      n = !0, s = u;
    } finally {
      try {
        !o && i.return != null && i.return();
      } finally {
        if (n) throw s;
      }
    }
    return r;
  }
}
function Ys(a, e) {
  if (a) {
    if (typeof a == 'string') return Ir(a, e);
    var i = Object.prototype.toString.call(a).slice(8, -1);
    if (i === 'Object' && a.constructor && (i = a.constructor.name), i === 'Map' || i === 'Set') return Array.from(a);
    if (i === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)) return Ir(a, e);
  }
}
function Ir(a, e) {
  (e == null || e > a.length) && (e = a.length);
  for (var i = 0, r = new Array(e); i < e; i++) r[i] = a[i];
  return r;
}
function js() {
  throw new TypeError('Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
}
var Us = {
    AD: 'Andorra',
    AE: 'United Arab Emirates',
    AF: 'Afghanistan',
    AG: 'Antigua and Barbuda',
    AI: 'Anguilla',
    AL: 'Albania',
    AM: 'Armenia',
    AO: 'Angola',
    AQ: 'Antarctica',
    AR: 'Argentina',
    AS: 'American Samoa',
    AT: 'Austria',
    AU: 'Australia',
    AW: 'Aruba',
    AX: '\xC5land Islands',
    AZ: 'Azerbaijan',
    BA: 'Bosnia and Herzegovina',
    BB: 'Barbados',
    BD: 'Bangladesh',
    BE: 'Belgium',
    BF: 'Burkina Faso',
    BG: 'Bulgaria',
    BH: 'Bahrain',
    BI: 'Burundi',
    BJ: 'Benin',
    BL: 'Saint Barth\xE9lemy',
    BM: 'Bermuda',
    BN: 'Brunei',
    BO: 'Bolivia',
    BQ: 'Caribbean Netherlands',
    BR: 'Brazil',
    BS: 'Bahamas',
    BT: 'Bhutan',
    BW: 'Botswana',
    BY: 'Belarus',
    BZ: 'Belize',
    CA: 'Canada',
    CC: 'Cocos Islands',
    CD: 'Democratic Republic of the Congo',
    CF: 'Central African Republic',
    CG: 'Republic of the Congo',
    CH: 'Switzerland',
    CI: 'Ivory Coast',
    CK: 'Cook Islands',
    CL: 'Chile',
    CM: 'Cameroon',
    CN: 'China',
    CO: 'Colombia',
    CR: 'Costa Rica',
    CU: 'Cuba',
    CV: 'Cabo Verde',
    CW: 'Cura\xE7ao',
    CX: 'Christmas Island',
    CY: 'Cyprus',
    CZ: 'Czechia',
    DE: 'Germany',
    DJ: 'Djibouti',
    DK: 'Denmark',
    DM: 'Dominica',
    DO: 'Dominican Republic',
    DZ: 'Algeria',
    EC: 'Ecuador',
    EE: 'Estonia',
    EG: 'Egypt',
    EH: 'Western Sahara',
    ER: 'Eritrea',
    ES: 'Spain',
    ET: 'Ethiopia',
    FI: 'Finland',
    FJ: 'Fiji',
    FK: 'Falkland Islands',
    FM: 'Micronesia',
    FO: 'Faroe Islands',
    FR: 'France',
    GA: 'Gabon',
    GB: 'United Kingdom',
    GD: 'Grenada',
    GE: 'Georgia',
    GF: 'French Guiana',
    GG: 'Guernsey',
    GH: 'Ghana',
    GI: 'Gibraltar',
    GL: 'Greenland',
    GM: 'Gambia',
    GN: 'Guinea',
    GP: 'Guadeloupe',
    GQ: 'Equatorial Guinea',
    GR: 'Greece',
    GS: 'South Georgia and the South Sandwich Islands',
    GT: 'Guatemala',
    GU: 'Guam',
    GW: 'Guinea-Bissau',
    GY: 'Guyana',
    HK: 'Hong Kong',
    HN: 'Honduras',
    HR: 'Croatia',
    HT: 'Haiti',
    HU: 'Hungary',
    ID: 'Indonesia',
    IE: 'Ireland',
    IL: 'Israel',
    IM: 'Isle of Man',
    IN: 'India',
    IO: 'British Indian Ocean Territory',
    IQ: 'Iraq',
    IR: 'Iran',
    IS: 'Iceland',
    IT: 'Italy',
    JE: 'Jersey',
    JM: 'Jamaica',
    JO: 'Jordan',
    JP: 'Japan',
    KE: 'Kenya',
    KG: 'Kyrgyzstan',
    KH: 'Cambodia',
    KI: 'Kiribati',
    KM: 'Comoros',
    KN: 'Saint Kitts and Nevis',
    KP: 'North Korea',
    KR: 'South Korea',
    KW: 'Kuwait',
    KY: 'Cayman Islands',
    KZ: 'Kazakhstan',
    LA: 'Laos',
    LB: 'Lebanon',
    LC: 'Saint Lucia',
    LI: 'Liechtenstein',
    LK: 'Sri Lanka',
    LR: 'Liberia',
    LS: 'Lesotho',
    LT: 'Lithuania',
    LU: 'Luxembourg',
    LV: 'Latvia',
    LY: 'Libya',
    MA: 'Morocco',
    MC: 'Monaco',
    MD: 'Moldova',
    ME: 'Montenegro',
    MF: 'Saint Martin',
    MG: 'Madagascar',
    MH: 'Marshall Islands',
    MK: 'North Macedonia',
    ML: 'Mali',
    MM: 'Myanmar',
    MN: 'Mongolia',
    MO: 'Macao',
    MP: 'Northern Mariana Islands',
    MQ: 'Martinique',
    MR: 'Mauritania',
    MS: 'Montserrat',
    MT: 'Malta',
    MU: 'Mauritius',
    MV: 'Maldives',
    MW: 'Malawi',
    MX: 'Mexico',
    MY: 'Malaysia',
    MZ: 'Mozambique',
    NA: 'Namibia',
    NC: 'New Caledonia',
    NE: 'Niger',
    NF: 'Norfolk Island',
    NG: 'Nigeria',
    NI: 'Nicaragua',
    NL: 'Netherlands',
    NO: 'Norway',
    NP: 'Nepal',
    NR: 'Nauru',
    NU: 'Niue',
    NZ: 'New Zealand',
    OM: 'Oman',
    PA: 'Panama',
    PE: 'Peru',
    PF: 'French Polynesia',
    PG: 'Papua New Guinea',
    PH: 'Philippines',
    PK: 'Pakistan',
    PL: 'Poland',
    PM: 'Saint Pierre and Miquelon',
    PN: 'Pitcairn',
    PR: 'Puerto Rico',
    PS: 'Palestine',
    PT: 'Portugal',
    PW: 'Palau',
    PY: 'Paraguay',
    QA: 'Qatar',
    RE: 'R\xE9union',
    RO: 'Romania',
    RS: 'Serbia',
    RU: 'Russia',
    RW: 'Rwanda',
    SA: 'Saudi Arabia',
    SB: 'Solomon Islands',
    SC: 'Seychelles',
    SD: 'Sudan',
    SE: 'Sweden',
    SG: 'Singapore',
    SH: 'Saint Helena, Ascension and Tristan da Cunha',
    SI: 'Slovenia',
    SJ: 'Svalbard and Jan Mayen',
    SK: 'Slovakia',
    SL: 'Sierra Leone',
    SM: 'San Marino',
    SN: 'Senegal',
    SO: 'Somalia',
    SR: 'Suriname',
    SS: 'South Sudan',
    ST: 'Sao Tome and Principe',
    SV: 'El Salvador',
    SX: 'Sint Maarten',
    SY: 'Syria',
    SZ: 'Eswatini',
    TC: 'Turks and Caicos Islands',
    TD: 'Chad',
    TF: 'French Southern Territories',
    TG: 'Togo',
    TH: 'Thailand',
    TJ: 'Tajikistan',
    TK: 'Tokelau',
    TL: 'Timor-Leste',
    TM: 'Turkmenistan',
    TN: 'Tunisia',
    TO: 'Tonga',
    TR: 'T\xFCrkiye',
    TT: 'Trinidad and Tobago',
    TV: 'Tuvalu',
    TW: 'Taiwan',
    TZ: 'Tanzania',
    UA: 'Ukraine',
    UG: 'Uganda',
    UM: 'United States Minor Outlying Islands',
    US: 'United States of America',
    UY: 'Uruguay',
    UZ: 'Uzbekistan',
    VA: 'Holy See',
    VC: 'Saint Vincent and the Grenadines',
    VE: 'Venezuela',
    VG: 'Virgin Islands (UK)',
    VI: 'Virgin Islands (US)',
    VN: 'Vietnam',
    VU: 'Vanuatu',
    WF: 'Wallis and Futuna',
    WS: 'Samoa',
    YE: 'Yemen',
    YT: 'Mayotte',
    ZA: 'South Africa',
    ZM: 'Zambia',
    ZW: 'Zimbabwe'
  },
  Ws = {
    'Africa/Abidjan': {
      u: 0,
      c: ['CI', 'BF', 'GH', 'GM', 'GN', 'IS', 'ML', 'MR', 'SH', 'SL', 'SN', 'TG']
    },
    'Africa/Accra': {
      a: 'Africa/Abidjan',
      c: ['GH'],
      r: 1
    },
    'Africa/Addis_Ababa': {
      a: 'Africa/Nairobi',
      c: ['ET'],
      r: 1
    },
    'Africa/Algiers': {
      u: 60,
      c: ['DZ']
    },
    'Africa/Asmara': {
      a: 'Africa/Nairobi',
      c: ['ER'],
      r: 1
    },
    'Africa/Asmera': {
      a: 'Africa/Nairobi',
      c: ['ER'],
      r: 1
    },
    'Africa/Bamako': {
      a: 'Africa/Abidjan',
      c: ['ML'],
      r: 1
    },
    'Africa/Bangui': {
      a: 'Africa/Lagos',
      c: ['CF'],
      r: 1
    },
    'Africa/Banjul': {
      a: 'Africa/Abidjan',
      c: ['GM'],
      r: 1
    },
    'Africa/Bissau': {
      u: 0,
      c: ['GW']
    },
    'Africa/Blantyre': {
      a: 'Africa/Maputo',
      c: ['MW'],
      r: 1
    },
    'Africa/Brazzaville': {
      a: 'Africa/Lagos',
      c: ['CG'],
      r: 1
    },
    'Africa/Bujumbura': {
      a: 'Africa/Maputo',
      c: ['BI'],
      r: 1
    },
    'Africa/Cairo': {
      u: 120,
      d: 180,
      c: ['EG']
    },
    'Africa/Casablanca': {
      u: 60,
      d: 0,
      c: ['MA']
    },
    'Africa/Ceuta': {
      u: 60,
      d: 120,
      c: ['ES']
    },
    'Africa/Conakry': {
      a: 'Africa/Abidjan',
      c: ['GN'],
      r: 1
    },
    'Africa/Dakar': {
      a: 'Africa/Abidjan',
      c: ['SN'],
      r: 1
    },
    'Africa/Dar_es_Salaam': {
      a: 'Africa/Nairobi',
      c: ['TZ'],
      r: 1
    },
    'Africa/Djibouti': {
      a: 'Africa/Nairobi',
      c: ['DJ'],
      r: 1
    },
    'Africa/Douala': {
      a: 'Africa/Lagos',
      c: ['CM'],
      r: 1
    },
    'Africa/El_Aaiun': {
      u: 60,
      d: 0,
      c: ['EH']
    },
    'Africa/Freetown': {
      a: 'Africa/Abidjan',
      c: ['SL'],
      r: 1
    },
    'Africa/Gaborone': {
      a: 'Africa/Maputo',
      c: ['BW'],
      r: 1
    },
    'Africa/Harare': {
      a: 'Africa/Maputo',
      c: ['ZW'],
      r: 1
    },
    'Africa/Johannesburg': {
      u: 120,
      c: ['ZA', 'LS', 'SZ']
    },
    'Africa/Juba': {
      u: 120,
      c: ['SS']
    },
    'Africa/Kampala': {
      a: 'Africa/Nairobi',
      c: ['UG'],
      r: 1
    },
    'Africa/Khartoum': {
      u: 120,
      c: ['SD']
    },
    'Africa/Kigali': {
      a: 'Africa/Maputo',
      c: ['RW'],
      r: 1
    },
    'Africa/Kinshasa': {
      a: 'Africa/Lagos',
      c: ['CD'],
      r: 1
    },
    'Africa/Lagos': {
      u: 60,
      c: ['NG', 'AO', 'BJ', 'CD', 'CF', 'CG', 'CM', 'GA', 'GQ', 'NE']
    },
    'Africa/Libreville': {
      a: 'Africa/Lagos',
      c: ['GA'],
      r: 1
    },
    'Africa/Lome': {
      a: 'Africa/Abidjan',
      c: ['TG'],
      r: 1
    },
    'Africa/Luanda': {
      a: 'Africa/Lagos',
      c: ['AO'],
      r: 1
    },
    'Africa/Lubumbashi': {
      a: 'Africa/Maputo',
      c: ['CD'],
      r: 1
    },
    'Africa/Lusaka': {
      a: 'Africa/Maputo',
      c: ['ZM'],
      r: 1
    },
    'Africa/Malabo': {
      a: 'Africa/Lagos',
      c: ['GQ'],
      r: 1
    },
    'Africa/Maputo': {
      u: 120,
      c: ['MZ', 'BI', 'BW', 'CD', 'MW', 'RW', 'ZM', 'ZW']
    },
    'Africa/Maseru': {
      a: 'Africa/Johannesburg',
      c: ['LS'],
      r: 1
    },
    'Africa/Mbabane': {
      a: 'Africa/Johannesburg',
      c: ['SZ'],
      r: 1
    },
    'Africa/Mogadishu': {
      a: 'Africa/Nairobi',
      c: ['SO'],
      r: 1
    },
    'Africa/Monrovia': {
      u: 0,
      c: ['LR']
    },
    'Africa/Nairobi': {
      u: 180,
      c: ['KE', 'DJ', 'ER', 'ET', 'KM', 'MG', 'SO', 'TZ', 'UG', 'YT']
    },
    'Africa/Ndjamena': {
      u: 60,
      c: ['TD']
    },
    'Africa/Niamey': {
      a: 'Africa/Lagos',
      c: ['NE'],
      r: 1
    },
    'Africa/Nouakchott': {
      a: 'Africa/Abidjan',
      c: ['MR'],
      r: 1
    },
    'Africa/Ouagadougou': {
      a: 'Africa/Abidjan',
      c: ['BF'],
      r: 1
    },
    'Africa/Porto-Novo': {
      a: 'Africa/Lagos',
      c: ['BJ'],
      r: 1
    },
    'Africa/Sao_Tome': {
      u: 0,
      c: ['ST']
    },
    'Africa/Timbuktu': {
      a: 'Africa/Abidjan',
      c: ['ML'],
      r: 1
    },
    'Africa/Tripoli': {
      u: 120,
      c: ['LY']
    },
    'Africa/Tunis': {
      u: 60,
      c: ['TN']
    },
    'Africa/Windhoek': {
      u: 120,
      c: ['NA']
    },
    'America/Adak': {
      u: -600,
      d: -540,
      c: ['US']
    },
    'America/Anchorage': {
      u: -540,
      d: -480,
      c: ['US']
    },
    'America/Anguilla': {
      a: 'America/Puerto_Rico',
      c: ['AI'],
      r: 1
    },
    'America/Antigua': {
      a: 'America/Puerto_Rico',
      c: ['AG'],
      r: 1
    },
    'America/Araguaina': {
      u: -180,
      c: ['BR']
    },
    'America/Argentina/Buenos_Aires': {
      u: -180,
      c: ['AR']
    },
    'America/Argentina/Catamarca': {
      u: -180,
      c: ['AR']
    },
    'America/Argentina/ComodRivadavia': {
      a: 'America/Argentina/Catamarca',
      r: 1
    },
    'America/Argentina/Cordoba': {
      u: -180,
      c: ['AR']
    },
    'America/Argentina/Jujuy': {
      u: -180,
      c: ['AR']
    },
    'America/Argentina/La_Rioja': {
      u: -180,
      c: ['AR']
    },
    'America/Argentina/Mendoza': {
      u: -180,
      c: ['AR']
    },
    'America/Argentina/Rio_Gallegos': {
      u: -180,
      c: ['AR']
    },
    'America/Argentina/Salta': {
      u: -180,
      c: ['AR']
    },
    'America/Argentina/San_Juan': {
      u: -180,
      c: ['AR']
    },
    'America/Argentina/San_Luis': {
      u: -180,
      c: ['AR']
    },
    'America/Argentina/Tucuman': {
      u: -180,
      c: ['AR']
    },
    'America/Argentina/Ushuaia': {
      u: -180,
      c: ['AR']
    },
    'America/Aruba': {
      a: 'America/Puerto_Rico',
      c: ['AW'],
      r: 1
    },
    'America/Asuncion': {
      u: -240,
      d: -180,
      c: ['PY']
    },
    'America/Atikokan': {
      a: 'America/Panama',
      c: ['CA'],
      r: 1
    },
    'America/Atka': {
      a: 'America/Adak',
      r: 1
    },
    'America/Bahia': {
      u: -180,
      c: ['BR']
    },
    'America/Bahia_Banderas': {
      u: -360,
      c: ['MX']
    },
    'America/Barbados': {
      u: -240,
      c: ['BB']
    },
    'America/Belem': {
      u: -180,
      c: ['BR']
    },
    'America/Belize': {
      u: -360,
      c: ['BZ']
    },
    'America/Blanc-Sablon': {
      a: 'America/Puerto_Rico',
      c: ['CA'],
      r: 1
    },
    'America/Boa_Vista': {
      u: -240,
      c: ['BR']
    },
    'America/Bogota': {
      u: -300,
      c: ['CO']
    },
    'America/Boise': {
      u: -420,
      d: -360,
      c: ['US']
    },
    'America/Buenos_Aires': {
      a: 'America/Argentina/Buenos_Aires',
      r: 1
    },
    'America/Cambridge_Bay': {
      u: -420,
      d: -360,
      c: ['CA']
    },
    'America/Campo_Grande': {
      u: -240,
      c: ['BR']
    },
    'America/Cancun': {
      u: -300,
      c: ['MX']
    },
    'America/Caracas': {
      u: -240,
      c: ['VE']
    },
    'America/Catamarca': {
      a: 'America/Argentina/Catamarca',
      r: 1
    },
    'America/Cayenne': {
      u: -180,
      c: ['GF']
    },
    'America/Cayman': {
      a: 'America/Panama',
      c: ['KY'],
      r: 1
    },
    'America/Chicago': {
      u: -360,
      d: -300,
      c: ['US']
    },
    'America/Chihuahua': {
      u: -360,
      c: ['MX']
    },
    'America/Ciudad_Juarez': {
      u: -420,
      d: -360,
      c: ['MX']
    },
    'America/Coral_Harbour': {
      a: 'America/Panama',
      c: ['CA'],
      r: 1
    },
    'America/Cordoba': {
      a: 'America/Argentina/Cordoba',
      r: 1
    },
    'America/Costa_Rica': {
      u: -360,
      c: ['CR']
    },
    'America/Creston': {
      a: 'America/Phoenix',
      c: ['CA'],
      r: 1
    },
    'America/Cuiaba': {
      u: -240,
      c: ['BR']
    },
    'America/Curacao': {
      a: 'America/Puerto_Rico',
      c: ['CW'],
      r: 1
    },
    'America/Danmarkshavn': {
      u: 0,
      c: ['GL']
    },
    'America/Dawson': {
      u: -420,
      c: ['CA']
    },
    'America/Dawson_Creek': {
      u: -420,
      c: ['CA']
    },
    'America/Denver': {
      u: -420,
      d: -360,
      c: ['US']
    },
    'America/Detroit': {
      u: -300,
      d: -240,
      c: ['US']
    },
    'America/Dominica': {
      a: 'America/Puerto_Rico',
      c: ['DM'],
      r: 1
    },
    'America/Edmonton': {
      u: -420,
      d: -360,
      c: ['CA']
    },
    'America/Eirunepe': {
      u: -300,
      c: ['BR']
    },
    'America/El_Salvador': {
      u: -360,
      c: ['SV']
    },
    'America/Ensenada': {
      a: 'America/Tijuana',
      r: 1
    },
    'America/Fort_Nelson': {
      u: -420,
      c: ['CA']
    },
    'America/Fort_Wayne': {
      a: 'America/Indiana/Indianapolis',
      r: 1
    },
    'America/Fortaleza': {
      u: -180,
      c: ['BR']
    },
    'America/Glace_Bay': {
      u: -240,
      d: -180,
      c: ['CA']
    },
    'America/Godthab': {
      a: 'America/Nuuk',
      r: 1
    },
    'America/Goose_Bay': {
      u: -240,
      d: -180,
      c: ['CA']
    },
    'America/Grand_Turk': {
      u: -300,
      d: -240,
      c: ['TC']
    },
    'America/Grenada': {
      a: 'America/Puerto_Rico',
      c: ['GD'],
      r: 1
    },
    'America/Guadeloupe': {
      a: 'America/Puerto_Rico',
      c: ['GP'],
      r: 1
    },
    'America/Guatemala': {
      u: -360,
      c: ['GT']
    },
    'America/Guayaquil': {
      u: -300,
      c: ['EC']
    },
    'America/Guyana': {
      u: -240,
      c: ['GY']
    },
    'America/Halifax': {
      u: -240,
      d: -180,
      c: ['CA']
    },
    'America/Havana': {
      u: -300,
      d: -240,
      c: ['CU']
    },
    'America/Hermosillo': {
      u: -420,
      c: ['MX']
    },
    'America/Indiana/Indianapolis': {
      u: -300,
      d: -240,
      c: ['US']
    },
    'America/Indiana/Knox': {
      u: -360,
      d: -300,
      c: ['US']
    },
    'America/Indiana/Marengo': {
      u: -300,
      d: -240,
      c: ['US']
    },
    'America/Indiana/Petersburg': {
      u: -300,
      d: -240,
      c: ['US']
    },
    'America/Indiana/Tell_City': {
      u: -360,
      d: -300,
      c: ['US']
    },
    'America/Indiana/Vevay': {
      u: -300,
      d: -240,
      c: ['US']
    },
    'America/Indiana/Vincennes': {
      u: -300,
      d: -240,
      c: ['US']
    },
    'America/Indiana/Winamac': {
      u: -300,
      d: -240,
      c: ['US']
    },
    'America/Indianapolis': {
      a: 'America/Indiana/Indianapolis',
      r: 1
    },
    'America/Inuvik': {
      u: -420,
      d: -360,
      c: ['CA']
    },
    'America/Iqaluit': {
      u: -300,
      d: -240,
      c: ['CA']
    },
    'America/Jamaica': {
      u: -300,
      c: ['JM']
    },
    'America/Jujuy': {
      a: 'America/Argentina/Jujuy',
      r: 1
    },
    'America/Juneau': {
      u: -540,
      d: -480,
      c: ['US']
    },
    'America/Kentucky/Louisville': {
      u: -300,
      d: -240,
      c: ['US']
    },
    'America/Kentucky/Monticello': {
      u: -300,
      d: -240,
      c: ['US']
    },
    'America/Knox_IN': {
      a: 'America/Indiana/Knox',
      r: 1
    },
    'America/Kralendijk': {
      a: 'America/Puerto_Rico',
      c: ['BQ'],
      r: 1
    },
    'America/La_Paz': {
      u: -240,
      c: ['BO']
    },
    'America/Lima': {
      u: -300,
      c: ['PE']
    },
    'America/Los_Angeles': {
      u: -480,
      d: -420,
      c: ['US']
    },
    'America/Louisville': {
      a: 'America/Kentucky/Louisville',
      r: 1
    },
    'America/Lower_Princes': {
      a: 'America/Puerto_Rico',
      c: ['SX'],
      r: 1
    },
    'America/Maceio': {
      u: -180,
      c: ['BR']
    },
    'America/Managua': {
      u: -360,
      c: ['NI']
    },
    'America/Manaus': {
      u: -240,
      c: ['BR']
    },
    'America/Marigot': {
      a: 'America/Puerto_Rico',
      c: ['MF'],
      r: 1
    },
    'America/Martinique': {
      u: -240,
      c: ['MQ']
    },
    'America/Matamoros': {
      u: -360,
      d: -300,
      c: ['MX']
    },
    'America/Mazatlan': {
      u: -420,
      c: ['MX']
    },
    'America/Mendoza': {
      a: 'America/Argentina/Mendoza',
      r: 1
    },
    'America/Menominee': {
      u: -360,
      d: -300,
      c: ['US']
    },
    'America/Merida': {
      u: -360,
      c: ['MX']
    },
    'America/Metlakatla': {
      u: -540,
      d: -480,
      c: ['US']
    },
    'America/Mexico_City': {
      u: -360,
      c: ['MX']
    },
    'America/Miquelon': {
      u: -180,
      d: -120,
      c: ['PM']
    },
    'America/Moncton': {
      u: -240,
      d: -180,
      c: ['CA']
    },
    'America/Monterrey': {
      u: -360,
      c: ['MX']
    },
    'America/Montevideo': {
      u: -180,
      c: ['UY']
    },
    'America/Montreal': {
      a: 'America/Toronto',
      c: ['CA'],
      r: 1
    },
    'America/Montserrat': {
      a: 'America/Puerto_Rico',
      c: ['MS'],
      r: 1
    },
    'America/Nassau': {
      a: 'America/Toronto',
      c: ['BS'],
      r: 1
    },
    'America/New_York': {
      u: -300,
      d: -240,
      c: ['US']
    },
    'America/Nipigon': {
      a: 'America/Toronto',
      c: ['CA'],
      r: 1
    },
    'America/Nome': {
      u: -540,
      d: -480,
      c: ['US']
    },
    'America/Noronha': {
      u: -120,
      c: ['BR']
    },
    'America/North_Dakota/Beulah': {
      u: -360,
      d: -300,
      c: ['US']
    },
    'America/North_Dakota/Center': {
      u: -360,
      d: -300,
      c: ['US']
    },
    'America/North_Dakota/New_Salem': {
      u: -360,
      d: -300,
      c: ['US']
    },
    'America/Nuuk': {
      u: -120,
      c: ['GL']
    },
    'America/Ojinaga': {
      u: -360,
      d: -300,
      c: ['MX']
    },
    'America/Panama': {
      u: -300,
      c: ['PA', 'CA', 'KY']
    },
    'America/Pangnirtung': {
      a: 'America/Iqaluit',
      r: 1
    },
    'America/Paramaribo': {
      u: -180,
      c: ['SR']
    },
    'America/Phoenix': {
      u: -420,
      c: ['US', 'CA']
    },
    'America/Port-au-Prince': {
      u: -300,
      d: -240,
      c: ['HT']
    },
    'America/Port_of_Spain': {
      a: 'America/Puerto_Rico',
      c: ['TT'],
      r: 1
    },
    'America/Porto_Acre': {
      a: 'America/Rio_Branco',
      r: 1
    },
    'America/Porto_Velho': {
      u: -240,
      c: ['BR']
    },
    'America/Puerto_Rico': {
      u: -240,
      c: ['PR', 'AG', 'CA', 'AI', 'AW', 'BL', 'BQ', 'CW', 'DM', 'GD', 'GP', 'KN', 'LC', 'MF', 'MS', 'SX', 'TT', 'VC', 'VG', 'VI']
    },
    'America/Punta_Arenas': {
      u: -180,
      c: ['CL']
    },
    'America/Rainy_River': {
      a: 'America/Winnipeg',
      r: 1
    },
    'America/Rankin_Inlet': {
      u: -360,
      d: -300,
      c: ['CA']
    },
    'America/Recife': {
      u: -180,
      c: ['BR']
    },
    'America/Regina': {
      u: -360,
      c: ['CA']
    },
    'America/Resolute': {
      u: -360,
      d: -300,
      c: ['CA']
    },
    'America/Rio_Branco': {
      u: -300,
      c: ['BR']
    },
    'America/Rosario': {
      a: 'America/Argentina/Cordoba',
      r: 1
    },
    'America/Santa_Isabel': {
      a: 'America/Tijuana',
      r: 1
    },
    'America/Santarem': {
      u: -180,
      c: ['BR']
    },
    'America/Santiago': {
      u: -240,
      d: -180,
      c: ['CL']
    },
    'America/Santo_Domingo': {
      u: -240,
      c: ['DO']
    },
    'America/Sao_Paulo': {
      u: -180,
      c: ['BR']
    },
    'America/Scoresbysund': {
      u: -60,
      d: 0,
      c: ['GL']
    },
    'America/Shiprock': {
      a: 'America/Denver',
      r: 1
    },
    'America/Sitka': {
      u: -540,
      d: -480,
      c: ['US']
    },
    'America/St_Barthelemy': {
      a: 'America/Puerto_Rico',
      c: ['BL'],
      r: 1
    },
    'America/St_Johns': {
      u: -210,
      d: -150,
      c: ['CA']
    },
    'America/St_Kitts': {
      a: 'America/Puerto_Rico',
      c: ['KN'],
      r: 1
    },
    'America/St_Lucia': {
      a: 'America/Puerto_Rico',
      c: ['LC'],
      r: 1
    },
    'America/St_Thomas': {
      a: 'America/Puerto_Rico',
      c: ['VI'],
      r: 1
    },
    'America/St_Vincent': {
      a: 'America/Puerto_Rico',
      c: ['VC'],
      r: 1
    },
    'America/Swift_Current': {
      u: -360,
      c: ['CA']
    },
    'America/Tegucigalpa': {
      u: -360,
      c: ['HN']
    },
    'America/Thule': {
      u: -240,
      d: -180,
      c: ['GL']
    },
    'America/Thunder_Bay': {
      a: 'America/Toronto',
      c: ['CA'],
      r: 1
    },
    'America/Tijuana': {
      u: -480,
      d: -420,
      c: ['MX']
    },
    'America/Toronto': {
      u: -300,
      d: -240,
      c: ['CA', 'BS']
    },
    'America/Tortola': {
      a: 'America/Puerto_Rico',
      c: ['VG'],
      r: 1
    },
    'America/Vancouver': {
      u: -480,
      d: -420,
      c: ['CA']
    },
    'America/Virgin': {
      a: 'America/Puerto_Rico',
      c: ['VI'],
      r: 1
    },
    'America/Whitehorse': {
      u: -420,
      c: ['CA']
    },
    'America/Winnipeg': {
      u: -360,
      d: -300,
      c: ['CA']
    },
    'America/Yakutat': {
      u: -540,
      d: -480,
      c: ['US']
    },
    'America/Yellowknife': {
      a: 'America/Edmonton',
      r: 1
    },
    'Antarctica/Casey': {
      u: 660,
      c: ['AQ']
    },
    'Antarctica/Davis': {
      u: 420,
      c: ['AQ']
    },
    'Antarctica/DumontDUrville': {
      a: 'Pacific/Port_Moresby',
      c: ['AQ'],
      r: 1
    },
    'Antarctica/Macquarie': {
      u: 600,
      d: 660,
      c: ['AU']
    },
    'Antarctica/Mawson': {
      u: 300,
      c: ['AQ']
    },
    'Antarctica/McMurdo': {
      a: 'Pacific/Auckland',
      c: ['AQ'],
      r: 1
    },
    'Antarctica/Palmer': {
      u: -180,
      c: ['AQ']
    },
    'Antarctica/Rothera': {
      u: -180,
      c: ['AQ']
    },
    'Antarctica/South_Pole': {
      a: 'Pacific/Auckland',
      c: ['AQ'],
      r: 1
    },
    'Antarctica/Syowa': {
      a: 'Asia/Riyadh',
      c: ['AQ'],
      r: 1
    },
    'Antarctica/Troll': {
      u: 0,
      d: 120,
      c: ['AQ']
    },
    'Antarctica/Vostok': {
      a: 'Asia/Urumqi',
      c: ['AQ'],
      r: 1
    },
    'Arctic/Longyearbyen': {
      a: 'Europe/Berlin',
      c: ['SJ'],
      r: 1
    },
    'Asia/Aden': {
      a: 'Asia/Riyadh',
      c: ['YE'],
      r: 1
    },
    'Asia/Almaty': {
      u: 360,
      c: ['KZ']
    },
    'Asia/Amman': {
      u: 180,
      c: ['JO']
    },
    'Asia/Anadyr': {
      u: 720,
      c: ['RU']
    },
    'Asia/Aqtau': {
      u: 300,
      c: ['KZ']
    },
    'Asia/Aqtobe': {
      u: 300,
      c: ['KZ']
    },
    'Asia/Ashgabat': {
      u: 300,
      c: ['TM']
    },
    'Asia/Ashkhabad': {
      a: 'Asia/Ashgabat',
      r: 1
    },
    'Asia/Atyrau': {
      u: 300,
      c: ['KZ']
    },
    'Asia/Baghdad': {
      u: 180,
      c: ['IQ']
    },
    'Asia/Bahrain': {
      a: 'Asia/Qatar',
      c: ['BH'],
      r: 1
    },
    'Asia/Baku': {
      u: 240,
      c: ['AZ']
    },
    'Asia/Bangkok': {
      u: 420,
      c: ['TH', 'CX', 'KH', 'LA', 'VN']
    },
    'Asia/Barnaul': {
      u: 420,
      c: ['RU']
    },
    'Asia/Beirut': {
      u: 120,
      d: 180,
      c: ['LB']
    },
    'Asia/Bishkek': {
      u: 360,
      c: ['KG']
    },
    'Asia/Brunei': {
      a: 'Asia/Kuching',
      c: ['BN'],
      r: 1
    },
    'Asia/Calcutta': {
      a: 'Asia/Kolkata',
      r: 1
    },
    'Asia/Chita': {
      u: 540,
      c: ['RU']
    },
    'Asia/Choibalsan': {
      u: 480,
      c: ['MN']
    },
    'Asia/Chongqing': {
      a: 'Asia/Shanghai',
      r: 1
    },
    'Asia/Chungking': {
      a: 'Asia/Shanghai',
      r: 1
    },
    'Asia/Colombo': {
      u: 330,
      c: ['LK']
    },
    'Asia/Dacca': {
      a: 'Asia/Dhaka',
      r: 1
    },
    'Asia/Damascus': {
      u: 180,
      c: ['SY']
    },
    'Asia/Dhaka': {
      u: 360,
      c: ['BD']
    },
    'Asia/Dili': {
      u: 540,
      c: ['TL']
    },
    'Asia/Dubai': {
      u: 240,
      c: ['AE', 'OM', 'RE', 'SC', 'TF']
    },
    'Asia/Dushanbe': {
      u: 300,
      c: ['TJ']
    },
    'Asia/Famagusta': {
      u: 120,
      d: 180,
      c: ['CY']
    },
    'Asia/Gaza': {
      u: 120,
      d: 180,
      c: ['PS']
    },
    'Asia/Harbin': {
      a: 'Asia/Shanghai',
      r: 1
    },
    'Asia/Hebron': {
      u: 120,
      d: 180,
      c: ['PS']
    },
    'Asia/Ho_Chi_Minh': {
      u: 420,
      c: ['VN']
    },
    'Asia/Hong_Kong': {
      u: 480,
      c: ['HK']
    },
    'Asia/Hovd': {
      u: 420,
      c: ['MN']
    },
    'Asia/Irkutsk': {
      u: 480,
      c: ['RU']
    },
    'Asia/Istanbul': {
      a: 'Europe/Istanbul',
      r: 1
    },
    'Asia/Jakarta': {
      u: 420,
      c: ['ID']
    },
    'Asia/Jayapura': {
      u: 540,
      c: ['ID']
    },
    'Asia/Jerusalem': {
      u: 120,
      d: 180,
      c: ['IL']
    },
    'Asia/Kabul': {
      u: 270,
      c: ['AF']
    },
    'Asia/Kamchatka': {
      u: 720,
      c: ['RU']
    },
    'Asia/Karachi': {
      u: 300,
      c: ['PK']
    },
    'Asia/Kashgar': {
      a: 'Asia/Urumqi',
      c: ['CN'],
      r: 1
    },
    'Asia/Kathmandu': {
      u: 345,
      c: ['NP']
    },
    'Asia/Katmandu': {
      a: 'Asia/Kathmandu',
      r: 1
    },
    'Asia/Khandyga': {
      u: 540,
      c: ['RU']
    },
    'Asia/Kolkata': {
      u: 330,
      c: ['IN']
    },
    'Asia/Krasnoyarsk': {
      u: 420,
      c: ['RU']
    },
    'Asia/Kuala_Lumpur': {
      a: 'Asia/Singapore',
      c: ['MY'],
      r: 1
    },
    'Asia/Kuching': {
      u: 480,
      c: ['MY', 'BN']
    },
    'Asia/Kuwait': {
      a: 'Asia/Riyadh',
      c: ['KW'],
      r: 1
    },
    'Asia/Macao': {
      a: 'Asia/Macau',
      r: 1
    },
    'Asia/Macau': {
      u: 480,
      c: ['MO']
    },
    'Asia/Magadan': {
      u: 660,
      c: ['RU']
    },
    'Asia/Makassar': {
      u: 480,
      c: ['ID']
    },
    'Asia/Manila': {
      u: 480,
      c: ['PH']
    },
    'Asia/Muscat': {
      a: 'Asia/Dubai',
      c: ['OM'],
      r: 1
    },
    'Asia/Nicosia': {
      u: 120,
      d: 180,
      c: ['CY']
    },
    'Asia/Novokuznetsk': {
      u: 420,
      c: ['RU']
    },
    'Asia/Novosibirsk': {
      u: 420,
      c: ['RU']
    },
    'Asia/Omsk': {
      u: 360,
      c: ['RU']
    },
    'Asia/Oral': {
      u: 300,
      c: ['KZ']
    },
    'Asia/Phnom_Penh': {
      a: 'Asia/Bangkok',
      c: ['KH'],
      r: 1
    },
    'Asia/Pontianak': {
      u: 420,
      c: ['ID']
    },
    'Asia/Pyongyang': {
      u: 540,
      c: ['KP']
    },
    'Asia/Qatar': {
      u: 180,
      c: ['QA', 'BH']
    },
    'Asia/Qostanay': {
      u: 360,
      c: ['KZ']
    },
    'Asia/Qyzylorda': {
      u: 300,
      c: ['KZ']
    },
    'Asia/Rangoon': {
      a: 'Asia/Yangon',
      c: ['MM'],
      r: 1
    },
    'Asia/Riyadh': {
      u: 180,
      c: ['SA', 'AQ', 'KW', 'YE']
    },
    'Asia/Saigon': {
      a: 'Asia/Ho_Chi_Minh',
      r: 1
    },
    'Asia/Sakhalin': {
      u: 660,
      c: ['RU']
    },
    'Asia/Samarkand': {
      u: 300,
      c: ['UZ']
    },
    'Asia/Seoul': {
      u: 540,
      c: ['KR']
    },
    'Asia/Shanghai': {
      u: 480,
      c: ['CN']
    },
    'Asia/Singapore': {
      u: 480,
      c: ['SG', 'MY']
    },
    'Asia/Srednekolymsk': {
      u: 660,
      c: ['RU']
    },
    'Asia/Taipei': {
      u: 480,
      c: ['TW']
    },
    'Asia/Tashkent': {
      u: 300,
      c: ['UZ']
    },
    'Asia/Tbilisi': {
      u: 240,
      c: ['GE']
    },
    'Asia/Tehran': {
      u: 210,
      c: ['IR']
    },
    'Asia/Tel_Aviv': {
      a: 'Asia/Jerusalem',
      r: 1
    },
    'Asia/Thimbu': {
      a: 'Asia/Thimphu',
      r: 1
    },
    'Asia/Thimphu': {
      u: 360,
      c: ['BT']
    },
    'Asia/Tokyo': {
      u: 540,
      c: ['JP']
    },
    'Asia/Tomsk': {
      u: 420,
      c: ['RU']
    },
    'Asia/Ujung_Pandang': {
      a: 'Asia/Makassar',
      r: 1
    },
    'Asia/Ulaanbaatar': {
      u: 480,
      c: ['MN']
    },
    'Asia/Ulan_Bator': {
      a: 'Asia/Ulaanbaatar',
      r: 1
    },
    'Asia/Urumqi': {
      u: 360,
      c: ['CN', 'AQ']
    },
    'Asia/Ust-Nera': {
      u: 600,
      c: ['RU']
    },
    'Asia/Vientiane': {
      a: 'Asia/Bangkok',
      c: ['LA'],
      r: 1
    },
    'Asia/Vladivostok': {
      u: 600,
      c: ['RU']
    },
    'Asia/Yakutsk': {
      u: 540,
      c: ['RU']
    },
    'Asia/Yangon': {
      u: 390,
      c: ['MM', 'CC']
    },
    'Asia/Yekaterinburg': {
      u: 300,
      c: ['RU']
    },
    'Asia/Yerevan': {
      u: 240,
      c: ['AM']
    },
    'Atlantic/Azores': {
      u: -60,
      d: 0,
      c: ['PT']
    },
    'Atlantic/Bermuda': {
      u: -240,
      d: -180,
      c: ['BM']
    },
    'Atlantic/Canary': {
      u: 0,
      d: 60,
      c: ['ES']
    },
    'Atlantic/Cape_Verde': {
      u: -60,
      c: ['CV']
    },
    'Atlantic/Faeroe': {
      a: 'Atlantic/Faroe',
      r: 1
    },
    'Atlantic/Faroe': {
      u: 0,
      d: 60,
      c: ['FO']
    },
    'Atlantic/Jan_Mayen': {
      a: 'Europe/Berlin',
      c: ['SJ'],
      r: 1
    },
    'Atlantic/Madeira': {
      u: 0,
      d: 60,
      c: ['PT']
    },
    'Atlantic/Reykjavik': {
      a: 'Africa/Abidjan',
      c: ['IS'],
      r: 1
    },
    'Atlantic/South_Georgia': {
      u: -120,
      c: ['GS']
    },
    'Atlantic/St_Helena': {
      a: 'Africa/Abidjan',
      c: ['SH'],
      r: 1
    },
    'Atlantic/Stanley': {
      u: -180,
      c: ['FK']
    },
    'Australia/ACT': {
      a: 'Australia/Sydney',
      r: 1
    },
    'Australia/Adelaide': {
      u: 570,
      d: 630,
      c: ['AU']
    },
    'Australia/Brisbane': {
      u: 600,
      c: ['AU']
    },
    'Australia/Broken_Hill': {
      u: 570,
      d: 630,
      c: ['AU']
    },
    'Australia/Canberra': {
      a: 'Australia/Sydney',
      r: 1
    },
    'Australia/Currie': {
      a: 'Australia/Hobart',
      r: 1
    },
    'Australia/Darwin': {
      u: 570,
      c: ['AU']
    },
    'Australia/Eucla': {
      u: 525,
      c: ['AU']
    },
    'Australia/Hobart': {
      u: 600,
      d: 660,
      c: ['AU']
    },
    'Australia/LHI': {
      a: 'Australia/Lord_Howe',
      r: 1
    },
    'Australia/Lindeman': {
      u: 600,
      c: ['AU']
    },
    'Australia/Lord_Howe': {
      u: 630,
      d: 660,
      c: ['AU']
    },
    'Australia/Melbourne': {
      u: 600,
      d: 660,
      c: ['AU']
    },
    'Australia/NSW': {
      a: 'Australia/Sydney',
      r: 1
    },
    'Australia/North': {
      a: 'Australia/Darwin',
      r: 1
    },
    'Australia/Perth': {
      u: 480,
      c: ['AU']
    },
    'Australia/Queensland': {
      a: 'Australia/Brisbane',
      r: 1
    },
    'Australia/South': {
      a: 'Australia/Adelaide',
      r: 1
    },
    'Australia/Sydney': {
      u: 600,
      d: 660,
      c: ['AU']
    },
    'Australia/Tasmania': {
      a: 'Australia/Hobart',
      r: 1
    },
    'Australia/Victoria': {
      a: 'Australia/Melbourne',
      r: 1
    },
    'Australia/West': {
      a: 'Australia/Perth',
      r: 1
    },
    'Australia/Yancowinna': {
      a: 'Australia/Broken_Hill',
      r: 1
    },
    'Brazil/Acre': {
      a: 'America/Rio_Branco',
      r: 1
    },
    'Brazil/DeNoronha': {
      a: 'America/Noronha',
      r: 1
    },
    'Brazil/East': {
      a: 'America/Sao_Paulo',
      r: 1
    },
    'Brazil/West': {
      a: 'America/Manaus',
      r: 1
    },
    CET: {
      u: 60,
      d: 120
    },
    CST6CDT: {
      u: -360,
      d: -300
    },
    'Canada/Atlantic': {
      a: 'America/Halifax',
      r: 1
    },
    'Canada/Central': {
      a: 'America/Winnipeg',
      r: 1
    },
    'Canada/Eastern': {
      a: 'America/Toronto',
      c: ['CA'],
      r: 1
    },
    'Canada/Mountain': {
      a: 'America/Edmonton',
      r: 1
    },
    'Canada/Newfoundland': {
      a: 'America/St_Johns',
      r: 1
    },
    'Canada/Pacific': {
      a: 'America/Vancouver',
      r: 1
    },
    'Canada/Saskatchewan': {
      a: 'America/Regina',
      r: 1
    },
    'Canada/Yukon': {
      a: 'America/Whitehorse',
      r: 1
    },
    'Chile/Continental': {
      a: 'America/Santiago',
      r: 1
    },
    'Chile/EasterIsland': {
      a: 'Pacific/Easter',
      r: 1
    },
    Cuba: {
      a: 'America/Havana',
      r: 1
    },
    EET: {
      u: 120,
      d: 180
    },
    EST: {
      u: -300
    },
    EST5EDT: {
      u: -300,
      d: -240
    },
    Egypt: {
      a: 'Africa/Cairo',
      r: 1
    },
    Eire: {
      a: 'Europe/Dublin',
      r: 1
    },
    'Etc/GMT': {
      u: 0
    },
    'Etc/GMT+0': {
      a: 'Etc/GMT',
      r: 1
    },
    'Etc/GMT+1': {
      u: -60
    },
    'Etc/GMT+10': {
      u: -600
    },
    'Etc/GMT+11': {
      u: -660
    },
    'Etc/GMT+12': {
      u: -720
    },
    'Etc/GMT+2': {
      u: -120
    },
    'Etc/GMT+3': {
      u: -180
    },
    'Etc/GMT+4': {
      u: -240
    },
    'Etc/GMT+5': {
      u: -300
    },
    'Etc/GMT+6': {
      u: -360
    },
    'Etc/GMT+7': {
      u: -420
    },
    'Etc/GMT+8': {
      u: -480
    },
    'Etc/GMT+9': {
      u: -540
    },
    'Etc/GMT-0': {
      a: 'Etc/GMT',
      r: 1
    },
    'Etc/GMT-1': {
      u: 60
    },
    'Etc/GMT-10': {
      u: 600
    },
    'Etc/GMT-11': {
      u: 660
    },
    'Etc/GMT-12': {
      u: 720
    },
    'Etc/GMT-13': {
      u: 780
    },
    'Etc/GMT-14': {
      u: 840
    },
    'Etc/GMT-2': {
      u: 120
    },
    'Etc/GMT-3': {
      u: 180
    },
    'Etc/GMT-4': {
      u: 240
    },
    'Etc/GMT-5': {
      u: 300
    },
    'Etc/GMT-6': {
      u: 360
    },
    'Etc/GMT-7': {
      u: 420
    },
    'Etc/GMT-8': {
      u: 480
    },
    'Etc/GMT-9': {
      u: 540
    },
    'Etc/GMT0': {
      a: 'Etc/GMT',
      r: 1
    },
    'Etc/Greenwich': {
      a: 'Etc/GMT',
      r: 1
    },
    'Etc/UCT': {
      a: 'Etc/UTC',
      r: 1
    },
    'Etc/UTC': {
      u: 0
    },
    'Etc/Universal': {
      a: 'Etc/UTC',
      r: 1
    },
    'Etc/Zulu': {
      a: 'Etc/UTC',
      r: 1
    },
    'Europe/Amsterdam': {
      a: 'Europe/Brussels',
      c: ['NL'],
      r: 1
    },
    'Europe/Andorra': {
      u: 60,
      d: 120,
      c: ['AD']
    },
    'Europe/Astrakhan': {
      u: 240,
      c: ['RU']
    },
    'Europe/Athens': {
      u: 120,
      d: 180,
      c: ['GR']
    },
    'Europe/Belfast': {
      a: 'Europe/London',
      c: ['GB'],
      r: 1
    },
    'Europe/Belgrade': {
      u: 60,
      d: 120,
      c: ['RS', 'BA', 'HR', 'ME', 'MK', 'SI']
    },
    'Europe/Berlin': {
      u: 60,
      d: 120,
      c: ['DE', 'DK', 'NO', 'SE', 'SJ']
    },
    'Europe/Bratislava': {
      a: 'Europe/Prague',
      c: ['SK'],
      r: 1
    },
    'Europe/Brussels': {
      u: 60,
      d: 120,
      c: ['BE', 'LU', 'NL']
    },
    'Europe/Bucharest': {
      u: 120,
      d: 180,
      c: ['RO']
    },
    'Europe/Budapest': {
      u: 60,
      d: 120,
      c: ['HU']
    },
    'Europe/Busingen': {
      a: 'Europe/Zurich',
      c: ['DE'],
      r: 1
    },
    'Europe/Chisinau': {
      u: 120,
      d: 180,
      c: ['MD']
    },
    'Europe/Copenhagen': {
      a: 'Europe/Berlin',
      c: ['DK'],
      r: 1
    },
    'Europe/Dublin': {
      u: 60,
      d: 0,
      c: ['IE']
    },
    'Europe/Gibraltar': {
      u: 60,
      d: 120,
      c: ['GI']
    },
    'Europe/Guernsey': {
      a: 'Europe/London',
      c: ['GG'],
      r: 1
    },
    'Europe/Helsinki': {
      u: 120,
      d: 180,
      c: ['FI', 'AX']
    },
    'Europe/Isle_of_Man': {
      a: 'Europe/London',
      c: ['IM'],
      r: 1
    },
    'Europe/Istanbul': {
      u: 180,
      c: ['TR']
    },
    'Europe/Jersey': {
      a: 'Europe/London',
      c: ['JE'],
      r: 1
    },
    'Europe/Kaliningrad': {
      u: 120,
      c: ['RU']
    },
    'Europe/Kiev': {
      a: 'Europe/Kyiv',
      r: 1
    },
    'Europe/Kirov': {
      u: 180,
      c: ['RU']
    },
    'Europe/Kyiv': {
      u: 120,
      d: 180,
      c: ['UA']
    },
    'Europe/Lisbon': {
      u: 0,
      d: 60,
      c: ['PT']
    },
    'Europe/Ljubljana': {
      a: 'Europe/Belgrade',
      c: ['SI'],
      r: 1
    },
    'Europe/London': {
      u: 0,
      d: 60,
      c: ['GB', 'GG', 'IM', 'JE']
    },
    'Europe/Luxembourg': {
      a: 'Europe/Brussels',
      c: ['LU'],
      r: 1
    },
    'Europe/Madrid': {
      u: 60,
      d: 120,
      c: ['ES']
    },
    'Europe/Malta': {
      u: 60,
      d: 120,
      c: ['MT']
    },
    'Europe/Mariehamn': {
      a: 'Europe/Helsinki',
      c: ['AX'],
      r: 1
    },
    'Europe/Minsk': {
      u: 180,
      c: ['BY']
    },
    'Europe/Monaco': {
      a: 'Europe/Paris',
      c: ['MC'],
      r: 1
    },
    'Europe/Moscow': {
      u: 180,
      c: ['RU']
    },
    'Europe/Nicosia': {
      a: 'Asia/Nicosia',
      r: 1
    },
    'Europe/Oslo': {
      a: 'Europe/Berlin',
      c: ['NO'],
      r: 1
    },
    'Europe/Paris': {
      u: 60,
      d: 120,
      c: ['FR', 'MC']
    },
    'Europe/Podgorica': {
      a: 'Europe/Belgrade',
      c: ['ME'],
      r: 1
    },
    'Europe/Prague': {
      u: 60,
      d: 120,
      c: ['CZ', 'SK']
    },
    'Europe/Riga': {
      u: 120,
      d: 180,
      c: ['LV']
    },
    'Europe/Rome': {
      u: 60,
      d: 120,
      c: ['IT', 'SM', 'VA']
    },
    'Europe/Samara': {
      u: 240,
      c: ['RU']
    },
    'Europe/San_Marino': {
      a: 'Europe/Rome',
      c: ['SM'],
      r: 1
    },
    'Europe/Sarajevo': {
      a: 'Europe/Belgrade',
      c: ['BA'],
      r: 1
    },
    'Europe/Saratov': {
      u: 240,
      c: ['RU']
    },
    'Europe/Simferopol': {
      u: 180,
      c: ['RU', 'UA']
    },
    'Europe/Skopje': {
      a: 'Europe/Belgrade',
      c: ['MK'],
      r: 1
    },
    'Europe/Sofia': {
      u: 120,
      d: 180,
      c: ['BG']
    },
    'Europe/Stockholm': {
      a: 'Europe/Berlin',
      c: ['SE'],
      r: 1
    },
    'Europe/Tallinn': {
      u: 120,
      d: 180,
      c: ['EE']
    },
    'Europe/Tirane': {
      u: 60,
      d: 120,
      c: ['AL']
    },
    'Europe/Tiraspol': {
      a: 'Europe/Chisinau',
      r: 1
    },
    'Europe/Ulyanovsk': {
      u: 240,
      c: ['RU']
    },
    'Europe/Uzhgorod': {
      a: 'Europe/Kyiv',
      r: 1
    },
    'Europe/Vaduz': {
      a: 'Europe/Zurich',
      c: ['LI'],
      r: 1
    },
    'Europe/Vatican': {
      a: 'Europe/Rome',
      c: ['VA'],
      r: 1
    },
    'Europe/Vienna': {
      u: 60,
      d: 120,
      c: ['AT']
    },
    'Europe/Vilnius': {
      u: 120,
      d: 180,
      c: ['LT']
    },
    'Europe/Volgograd': {
      u: 180,
      c: ['RU']
    },
    'Europe/Warsaw': {
      u: 60,
      d: 120,
      c: ['PL']
    },
    'Europe/Zagreb': {
      a: 'Europe/Belgrade',
      c: ['HR'],
      r: 1
    },
    'Europe/Zaporozhye': {
      a: 'Europe/Kyiv',
      r: 1
    },
    'Europe/Zurich': {
      u: 60,
      d: 120,
      c: ['CH', 'DE', 'LI']
    },
    Factory: {
      u: 0
    },
    GB: {
      a: 'Europe/London',
      c: ['GB'],
      r: 1
    },
    'GB-Eire': {
      a: 'Europe/London',
      c: ['GB'],
      r: 1
    },
    GMT: {
      a: 'Etc/GMT',
      r: 1
    },
    'GMT+0': {
      a: 'Etc/GMT',
      r: 1
    },
    'GMT-0': {
      a: 'Etc/GMT',
      r: 1
    },
    GMT0: {
      a: 'Etc/GMT',
      r: 1
    },
    Greenwich: {
      a: 'Etc/GMT',
      r: 1
    },
    HST: {
      u: -600
    },
    Hongkong: {
      a: 'Asia/Hong_Kong',
      r: 1
    },
    Iceland: {
      a: 'Africa/Abidjan',
      c: ['IS'],
      r: 1
    },
    'Indian/Antananarivo': {
      a: 'Africa/Nairobi',
      c: ['MG'],
      r: 1
    },
    'Indian/Chagos': {
      u: 360,
      c: ['IO']
    },
    'Indian/Christmas': {
      a: 'Asia/Bangkok',
      c: ['CX'],
      r: 1
    },
    'Indian/Cocos': {
      a: 'Asia/Yangon',
      c: ['CC'],
      r: 1
    },
    'Indian/Comoro': {
      a: 'Africa/Nairobi',
      c: ['KM'],
      r: 1
    },
    'Indian/Kerguelen': {
      a: 'Indian/Maldives',
      c: ['TF'],
      r: 1
    },
    'Indian/Mahe': {
      a: 'Asia/Dubai',
      c: ['SC'],
      r: 1
    },
    'Indian/Maldives': {
      u: 300,
      c: ['MV', 'TF']
    },
    'Indian/Mauritius': {
      u: 240,
      c: ['MU']
    },
    'Indian/Mayotte': {
      a: 'Africa/Nairobi',
      c: ['YT'],
      r: 1
    },
    'Indian/Reunion': {
      a: 'Asia/Dubai',
      c: ['RE'],
      r: 1
    },
    Iran: {
      a: 'Asia/Tehran',
      r: 1
    },
    Israel: {
      a: 'Asia/Jerusalem',
      r: 1
    },
    Jamaica: {
      a: 'America/Jamaica',
      r: 1
    },
    Japan: {
      a: 'Asia/Tokyo',
      r: 1
    },
    Kwajalein: {
      a: 'Pacific/Kwajalein',
      r: 1
    },
    Libya: {
      a: 'Africa/Tripoli',
      r: 1
    },
    MET: {
      u: 60,
      d: 120
    },
    MST: {
      u: -420
    },
    MST7MDT: {
      u: -420,
      d: -360
    },
    'Mexico/BajaNorte': {
      a: 'America/Tijuana',
      r: 1
    },
    'Mexico/BajaSur': {
      a: 'America/Mazatlan',
      r: 1
    },
    'Mexico/General': {
      a: 'America/Mexico_City',
      r: 1
    },
    NZ: {
      a: 'Pacific/Auckland',
      c: ['NZ'],
      r: 1
    },
    'NZ-CHAT': {
      a: 'Pacific/Chatham',
      r: 1
    },
    Navajo: {
      a: 'America/Denver',
      r: 1
    },
    PRC: {
      a: 'Asia/Shanghai',
      r: 1
    },
    PST8PDT: {
      u: -480,
      d: -420
    },
    'Pacific/Apia': {
      u: 780,
      c: ['WS']
    },
    'Pacific/Auckland': {
      u: 720,
      d: 780,
      c: ['NZ', 'AQ']
    },
    'Pacific/Bougainville': {
      u: 660,
      c: ['PG']
    },
    'Pacific/Chatham': {
      u: 765,
      d: 825,
      c: ['NZ']
    },
    'Pacific/Chuuk': {
      a: 'Pacific/Port_Moresby',
      c: ['FM'],
      r: 1
    },
    'Pacific/Easter': {
      u: -360,
      d: -300,
      c: ['CL']
    },
    'Pacific/Efate': {
      u: 660,
      c: ['VU']
    },
    'Pacific/Enderbury': {
      a: 'Pacific/Kanton',
      r: 1
    },
    'Pacific/Fakaofo': {
      u: 780,
      c: ['TK']
    },
    'Pacific/Fiji': {
      u: 720,
      c: ['FJ']
    },
    'Pacific/Funafuti': {
      a: 'Pacific/Tarawa',
      c: ['TV'],
      r: 1
    },
    'Pacific/Galapagos': {
      u: -360,
      c: ['EC']
    },
    'Pacific/Gambier': {
      u: -540,
      c: ['PF']
    },
    'Pacific/Guadalcanal': {
      u: 660,
      c: ['SB', 'FM']
    },
    'Pacific/Guam': {
      u: 600,
      c: ['GU', 'MP']
    },
    'Pacific/Honolulu': {
      u: -600,
      c: ['US']
    },
    'Pacific/Johnston': {
      a: 'Pacific/Honolulu',
      r: 1
    },
    'Pacific/Kanton': {
      u: 780,
      c: ['KI']
    },
    'Pacific/Kiritimati': {
      u: 840,
      c: ['KI']
    },
    'Pacific/Kosrae': {
      u: 660,
      c: ['FM']
    },
    'Pacific/Kwajalein': {
      u: 720,
      c: ['MH']
    },
    'Pacific/Majuro': {
      a: 'Pacific/Tarawa',
      c: ['MH'],
      r: 1
    },
    'Pacific/Marquesas': {
      u: -570,
      c: ['PF']
    },
    'Pacific/Midway': {
      a: 'Pacific/Pago_Pago',
      c: ['UM'],
      r: 1
    },
    'Pacific/Nauru': {
      u: 720,
      c: ['NR']
    },
    'Pacific/Niue': {
      u: -660,
      c: ['NU']
    },
    'Pacific/Norfolk': {
      u: 660,
      d: 720,
      c: ['NF']
    },
    'Pacific/Noumea': {
      u: 660,
      c: ['NC']
    },
    'Pacific/Pago_Pago': {
      u: -660,
      c: ['AS', 'UM']
    },
    'Pacific/Palau': {
      u: 540,
      c: ['PW']
    },
    'Pacific/Pitcairn': {
      u: -480,
      c: ['PN']
    },
    'Pacific/Pohnpei': {
      a: 'Pacific/Guadalcanal',
      c: ['FM'],
      r: 1
    },
    'Pacific/Ponape': {
      a: 'Pacific/Guadalcanal',
      c: ['FM'],
      r: 1
    },
    'Pacific/Port_Moresby': {
      u: 600,
      c: ['PG', 'AQ', 'FM']
    },
    'Pacific/Rarotonga': {
      u: -600,
      c: ['CK']
    },
    'Pacific/Saipan': {
      a: 'Pacific/Guam',
      c: ['MP'],
      r: 1
    },
    'Pacific/Samoa': {
      a: 'Pacific/Pago_Pago',
      c: ['AS'],
      r: 1
    },
    'Pacific/Tahiti': {
      u: -600,
      c: ['PF']
    },
    'Pacific/Tarawa': {
      u: 720,
      c: ['KI', 'MH', 'TV', 'UM', 'WF']
    },
    'Pacific/Tongatapu': {
      u: 780,
      c: ['TO']
    },
    'Pacific/Truk': {
      a: 'Pacific/Port_Moresby',
      c: ['FM'],
      r: 1
    },
    'Pacific/Wake': {
      a: 'Pacific/Tarawa',
      c: ['UM'],
      r: 1
    },
    'Pacific/Wallis': {
      a: 'Pacific/Tarawa',
      c: ['WF'],
      r: 1
    },
    'Pacific/Yap': {
      a: 'Pacific/Port_Moresby',
      c: ['FM'],
      r: 1
    },
    Poland: {
      a: 'Europe/Warsaw',
      r: 1
    },
    Portugal: {
      a: 'Europe/Lisbon',
      r: 1
    },
    ROC: {
      a: 'Asia/Taipei',
      r: 1
    },
    ROK: {
      a: 'Asia/Seoul',
      r: 1
    },
    Singapore: {
      a: 'Asia/Singapore',
      c: ['SG'],
      r: 1
    },
    Turkey: {
      a: 'Europe/Istanbul',
      r: 1
    },
    UCT: {
      a: 'Etc/UTC',
      r: 1
    },
    'US/Alaska': {
      a: 'America/Anchorage',
      r: 1
    },
    'US/Aleutian': {
      a: 'America/Adak',
      r: 1
    },
    'US/Arizona': {
      a: 'America/Phoenix',
      c: ['US'],
      r: 1
    },
    'US/Central': {
      a: 'America/Chicago',
      r: 1
    },
    'US/East-Indiana': {
      a: 'America/Indiana/Indianapolis',
      r: 1
    },
    'US/Eastern': {
      a: 'America/New_York',
      r: 1
    },
    'US/Hawaii': {
      a: 'Pacific/Honolulu',
      r: 1
    },
    'US/Indiana-Starke': {
      a: 'America/Indiana/Knox',
      r: 1
    },
    'US/Michigan': {
      a: 'America/Detroit',
      r: 1
    },
    'US/Mountain': {
      a: 'America/Denver',
      r: 1
    },
    'US/Pacific': {
      a: 'America/Los_Angeles',
      r: 1
    },
    'US/Samoa': {
      a: 'Pacific/Pago_Pago',
      c: ['AS'],
      r: 1
    },
    UTC: {
      a: 'Etc/UTC',
      r: 1
    },
    Universal: {
      a: 'Etc/UTC',
      r: 1
    },
    'W-SU': {
      a: 'Europe/Moscow',
      r: 1
    },
    WET: {
      u: 0,
      d: 60
    },
    Zulu: {
      a: 'Etc/UTC',
      r: 1
    }
  },
  Ji = {
    countries: Us,
    timezones: Ws
  },
  Hi;
function Vs(a, e) {
  var i = a.countries[e];
  if (!i) return null;
  var r = qs(a)[e] || {};
  return {
    id: e,
    name: i,
    timezones: r.current || [],
    allTimezones: r.all || []
  };
}
function qs(a) {
  return Hi || (Hi = Zs(a)), Hi;
}
function Zs(a) {
  return Object.keys(a.timezones).reduce(function (e, i) {
    var r = a.timezones[i],
      o = r.c,
      n = r.a,
      t = a.timezones[n] || {},
      s = o || t.c;
    return s && s.forEach(function (u) {
      e[u] || Object.assign(e, Fr({}, u, {
        current: [],
        all: []
      })), r.r === void 0 && e[u].current.push(i), e[u].all.push(i);
    }), e;
  }, {});
}
function Qs(a, e) {
  var i = a.timezones[e];
  if (!i) return null;
  var r = i.a,
    o = r === void 0 ? null : r,
    n = o ? a.timezones[o] : {},
    t = ca(ca({}, n), a.timezones[e]),
    s = t.c || [],
    u = t.u,
    A = Number.isInteger(t.d) ? t.d : u,
    m = {
      name: e,
      countries: s,
      utcOffset: u,
      utcOffsetStr: Nr(u),
      dstOffset: A,
      dstOffsetStr: Nr(A),
      aliasOf: o
    };
  return i.r && (m.deprecated = !0), m;
}
function Nr(a) {
  var e = Math.floor(a / 60),
    i = a % 60,
    r = a < 0 ? '-' : '+';
  return ''.concat(r).concat(Gr(e), ':').concat(Gr(i));
}
function Gr(a) {
  var e = Math.abs(a),
    i = e < 10 ? '0' : '';
  return ''.concat(i).concat(e);
}
var Xs = ['allTimezones'];
  Object.keys(Ji.timezones).length;
  var Oi = {},
  ni = {};
function au(a) {
  var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return Oi[a] || iu(Vs(Ji, a)), nu(Oi[a], e);
}
function iu(a) {
  a && (Oi[a.id] = a);
}
function eu(a) {
  return ni[a] || ru(Qs(Ji, a)), ni[a] ? ca({}, ni[a]) : null;
}
function ru(a) {
  a && (ni[a.name] = a, Object.keys(a).length);
}
function ou(a) {
  var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {},
    i = eu(a) || {},
    r = i.countries || [];
  return r.map(function (o) {
    return au(o, e);
  });
}
function Rr(a) {
  var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {},
    i = ou(a, e),
    r = Os(i, 1),
    o = r[0];
  return o || null;
}
function nu(a, e) {
  if (!a) return null;
  var i = e || {},
    r = i.deprecated;
  a.allTimezones;
  var o = Hs(a, Xs),
    n = r ? a.allTimezones : a.timezones;
  return ca(ca({}, o), {}, {
    timezones: n
  });
}
var ti = 'Coordinated Universal Time',
  Hr = 'yyyy-MM-dd__hh:mm aa__zzzz';
var Or = 'United States',
  Jr = 'United States of America',
  ma = 'UTC',
  J = 'GMT',
  xr = 'GB',
  Yr = 'United Kingdom';
function xi(a) {
  var e;
  try {
    let i = a == null ? void 0 : a.trim();
    if (i) {
      if (i === J) return {
        id: xr,
        name: Yr
      };
      if (i.includes(ma)) return {
        id: ma,
        name: ti
      };
      let {
        id: r,
        name: o
      } = (e = Rr(i, {
        deprecated: !1
      })) != null ? e : {};
      return o != null && o.includes(Jr) ? {
        id: r,
        name: Or
      } : {
        id: r,
        name: o
      };
    }
  } catch (i) {
    console.error('error while getting country info '.concat(i.stack));
  }
}
function tu() {
  var a;
  if ((a = O) != null && a.size) {
    let e = new Map([...O].filter(([r, o]) => o.showInDefaultList === !0)),
      i = [];
    return e.forEach(({
      capital: r,
      tzFull: o
    }, n) => {
      let t = ga(o),
        {
          id: s
        } = xi(o),
        [u, A, m] = t.split('__'),
        c = ha(m, o),
        p = {
          time: A,
          day: u,
          phrase: r,
          countryCode: s,
          countryName: n,
          tzRaw: o,
          tzShort: da(c, o),
          tzFull: c
        };
      i.push(p);
    }), i;
  }
}
function jr(a, e) {
  if (a) {
    let i = a == null ? void 0 : a.trim(),
      {
        id: r,
        name: o
      } = xi(i),
      n = ga(i),
      [t, s, u] = n.split('__'),
      A = ha(u, i);
    return {
      time: s,
      day: t,
      phrase: e,
      countryCode: r,
      countryName: o,
      tzRaw: i,
      tzShort: da(A, i),
      tzFull: A
    };
  }
}
function su(a) {
  if (a != null && a.tzList) {
    let {
        tzList: e,
        phrase: i,
        meta: r
      } = a,
      o = e.filter(n => !!(n != null && n.trim())).map(n => jr(n, i));
    return (r != null && r.isTzAbbr || r != null && r.isCountry || r != null && r.isPhraseName || r != null && r.isTzFullName) && (o = o.map(n => f(g({}, n), {
      phrase: n.tzRaw === O.get(n.countryName).tzFull ? O.get(n.countryName).capital : la(n.tzRaw)
    }))), f(g({}, a), {
      tzList: o
    });
  }
}
function Ur(a) {
  if (a) {
    let e = a == null ? void 0 : a.trim(),
      {
        err: i,
        result: r
      } = Dr(e);
    if (!i) return r.map(su);
  }
  return [];
}
function Wr(a) {
  return jr(a, la(a));
}
function Vr() {
  let a = Intl.DateTimeFormat().resolvedOptions().timeZone;
  return Wr(a);
}
function ha(a, e) {
  return a.includes(J) ? oi(a, e, !1) : a;
}
function qr() {
  let a = Intl.DateTimeFormat().resolvedOptions().timeZone,
    e = R(new Date(), 'zzzz'),
    i = ha(e, a);
  return {
    tzRaw: a,
    tzFull: i,
    tzShort: da(i, a)
  };
}
function da(a, e) {
  if (a) {
    if (a.includes(J)) return oi(a, e, !0);
    if (a.toLowerCase().includes(ti.toLowerCase())) return ma;
    let i = a == null ? void 0 : a.trim();
    return H.has(i) ? H.get(i) : i.split(' ').reduce((r, o) => r + o.charAt(0), '').toUpperCase();
  }
}
function ga(a, e = new Date(), i = Hr) {
  return i && ii(e, a, i);
}
function uu(a) {
  if (b(a)) return a.sort((e, i) => {
    let {
        countryName: r
      } = e,
      {
        countryName: o
      } = i;
    return r == null ? void 0 : r.localeCompare(o);
  });
}
function Au(a) {
  let {
    tzFull: e
  } = qr();
  if (e) {
    let i = [...a];
    return a.forEach((r, o) => {
      var n, t, s, u;
      if (((n = r == null ? void 0 : r.tzFull) == null ? void 0 : n.trim()) === (e == null ? void 0 : e.trim()) && ((t = r == null ? void 0 : r.countryName) == null ? void 0 : t.trim()) === ((u = (s = Vr()) == null ? void 0 : s.countryName) == null ? void 0 : u.trim())) {
        let [A] = i.splice(o, 1);
        i.unshift(A);
      }
    }), i;
  }
}
function lu(a) {
  if (b(a)) {
    let e = new Set();
    return a.filter(i => {
      let {
        tzRaw: r
      } = i;
      return e.has(r) ? !1 : (e.add(r), !0);
    });
  }
}
function cu(a) {
  if (b(a)) return a.map(e => e.tzList).flat();
}
function MA(a) {
  try {
    if (typeof a == 'string' && a != null && a.trim()) {
      let e = a.trim(),
        i = Ur(e);
      if (b(i)) return Au(uu(lu(cu(i))));
    }
  } catch (e) {
    console.error(e);
  }
}

const searchTzInfo = memoize__default["default"](MA);

/**
 * Initialize time zones from country-specific information.
 */
const initialTimeZones = tu();
/**
 * Custom hook for constructing a TimeZonePicker using the FilterMenu component.
 */
function useTimeZonePicker({
  preferredTzIdentifier
} = {}) {
  const [selectedOption, setSelectedOption] = React.useState(() =>
  // If a preferred time zone is provided, use it as the default option
  // otherwise use the first time zone in the list
  preferredTzIdentifier ? Wr(preferredTzIdentifier.trim()) : initialTimeZones[0]);

  // Detect the user's time zone
  const localeTZ = React.useMemo(() => preferredTzIdentifier ? undefined : Vr(), [preferredTzIdentifier]);

  // If preferredTzIdentifier is not provided, detect the user's time zone and
  //  update the selected option client-side to avoid SSR issues
  use_isomorphic_layout_effect.useIsomorphicLayoutEffect(() => {
    if (localeTZ) {
      setSelectedOption(localeTZ);
    }
  }, [localeTZ, setSelectedOption]);

  // When preferredTzIdentifier is updated from undefined to value, update the selected option
  use_isomorphic_layout_effect.useIsomorphicLayoutEffect(() => {
    if (preferredTzIdentifier) {
      const trimmedTzIdentifier = preferredTzIdentifier.trim();
      const currentTzIdentifier = selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.tzRaw;
      if (currentTzIdentifier !== trimmedTzIdentifier) {
        setSelectedOption(Wr(trimmedTzIdentifier));
      }
    }
  }, [preferredTzIdentifier, selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.tzRaw]);
  const {
    filteredOptions,
    getSearchInputProps,
    isStale,
    searchTerm
  } = use_filtered_options.useFilteredOptions({
    initialOptions: initialTimeZones,
    searchFunction: ({
      options,
      searchTerm
    }) => {
      // Get search results, ensuring an array is always returned
      const searchResults = searchTerm === '' ? options : searchTzInfo(searchTerm) || [];

      // If the searchTerm is empty or the selectedOption is part of the search
      // results, ensure selectedOption is at the top of the list
      if (searchTerm === '' || selectedOption && searchResults.includes(selectedOption)) {
        const optionsWithoutSelected = searchResults.filter(option => makeId(option) !== makeId(selectedOption));
        return selectedOption ? [selectedOption, ...optionsWithoutSelected] : optionsWithoutSelected;
      }

      // If the searchTerm is not empty and the selectedOption is not part of
      // the search results, show the filtered list without the selectedOption
      return searchResults;
    }
  });
  return {
    /**
     * Currently filtered options matching the search term.
     */
    filteredOptions,
    /**
     * The currently selected time zone option.
     */
    selectedOption,
    /**
     * Function to call and spread props for FilterMenu.
     */
    getFilterMenuProps: React.useCallback(() => {
      return {
        popoverMaxWidth: 320
      };
    }, []),
    /**
     * Function to call and spread props for FilterMenuTrigger.
     */
    getFilterMenuTriggerProps: React.useCallback(() => {
      return {
        children: /*#__PURE__*/jsxRuntime.jsx(TimeZonePickerItemLabel, {
          ...selectedOption
        })
      };
    }, [selectedOption]),
    /**
     * Function to call and spread props for FilterMenuSearchField.
     */
    getFilterMenuSearchFieldProps: React.useCallback(() => {
      return {
        label: 'Search for your timezone'
      };
    }, []),
    /**
     * Function to call and spread props for FilterMenuSearchInput.
     */
    getFilterMenuSearchInputProps: React.useCallback(() => {
      return {
        placeholder: 'Search...',
        ...getSearchInputProps()
      };
    }, [getSearchInputProps]),
    /**
     * Function to call and spread props for FilterMenuListbox.
     */
    getFilterMenuListboxProps: React.useCallback(() => {
      return {
        noResultsFallback: /*#__PURE__*/jsxRuntime.jsx(text.Text, {
          className: "text-secondary text-center text-body-12 py-4",
          children: "No matching results"
        }),
        options: filteredOptions
      };
    }, [filteredOptions]),
    /**
     * Function to call with the `option` and spread props for the
     * FilterMenuItem.
     */
    getFilterMenuItemProps: React.useCallback(option => {
      const id = makeId(option);
      const selectedId = selectedOption ? makeId(selectedOption) : undefined;
      return {
        children: /*#__PURE__*/jsxRuntime.jsx(TimeZonePickerItemLabel, {
          searchTerm: searchTerm,
          shouldWrap: true,
          ...option
        }),
        className: `
						${isStale ? 'opacity-50 transition-opacity' : ''}
						pe-2
						text-body-12
					`,
        id,
        isSelected: id === selectedId,
        onClick: () => {
          setSelectedOption(option);
        },
        verticalAlign: 'top'
      };
    }, [isStale, searchTerm, selectedOption])
  };
}

/**
 * Generates a unique ID for a given time zone info object, excluding the day
 * and time properties which can change.
 */
function makeId(timezoneInfo) {
  return Object.entries(timezoneInfo).reduce((acc, [key, value]) => {
    if (!['day', 'time'].includes(key)) {
      // Replaces slashes along with whitespace characters
      acc.push(`${value}`.replace(/[\s\/]+/g, '-'));
    }
    return acc;
  }, []).join('_');
}

exports.useTimeZonePicker = useTimeZonePicker;
