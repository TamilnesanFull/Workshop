'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var index = require('./index-7955fb8e.cjs.prod.js');
var styles = require('./styles-4d7be1cb.cjs.prod.js');
var use_button = require('./use-button-c05d68a1.cjs.prod.js');
var jsxRuntime = require('react/jsx-runtime');
var box = require('./box-e39057bd.cjs.prod.js');
var loading = require('./loading-8f0b3165.cjs.prod.js');
var translations = require('./translations-4a8a2311.cjs.prod.js');
var config = require('./config-7c4ee3f2.cjs.prod.js');
var track = require('./track-f65e0bbd.cjs.prod.js');
require('./tw-merge-885aa7a8.cjs.prod.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.prod.js');
require('./tw-9929267e.cjs.prod.js');
require('./grow-your-brand-icon-cce9ad51.cjs.prod.js');
require('./styles-30814c9d.cjs.prod.js');
require('./setmore-icon-24e17637.cjs.prod.js');

const Button = /*#__PURE__*/React.forwardRef(function Button(props, forwardedRef) {
  const {
    button: translations$1
  } = translations.useTranslations();
  const {
    children,
    className = '',
    classNames = {},
    iconEnd: IconEnd,
    iconStart: IconStart,
    isDisabled = false,
    isLoading = false,
    isPressed,
    loadingLabel = translations$1.loadingLabel,
    onClick,
    size = 'standard',
    style = {},
    styles: styles$1 = {},
    type = 'button',
    variant = 'accentPrimary',
    ...consumerProps
  } = props;
  const {
    buttonProps
  } = use_button.useButton({
    isDisabled,
    isLoading,
    isPressed,
    onClick
  }, forwardedRef);
  const config$1 = config.useBrandStyles();
  const styleProps = index.getStyleProps({
    className,
    classNames,
    style,
    styles: styles$1,
    tw: styles.getButtonStyles({
      ...config$1,
      isDisabled,
      isLoading,
      isPressed: Boolean(isPressed),
      size,
      variant
    })
  });
  const labelTrackStyles = styleProps('labelTrack');
  const labelStyles = styleProps('label');
  const trackStyleProps = {
    className: labelTrackStyles.className,
    classNames: {
      center: labelStyles.className
    },
    style: labelTrackStyles.style,
    styles: {
      center: labelStyles.style
    }
  };
  return /*#__PURE__*/jsxRuntime.jsxs(box.Box, {
    ...consumerProps,
    ...buttonProps,
    as: "button",
    type: type,
    ...styleProps('root'),
    children: [/*#__PURE__*/jsxRuntime.jsx(track.Track, {
      as: "span",
      railEnd: IconEnd ? /*#__PURE__*/jsxRuntime.jsx(IconEnd, {
        size: buttonSizeToIconSize[size],
        ...styleProps('iconEnd')
      }) : null,
      railStart: IconStart ? /*#__PURE__*/jsxRuntime.jsx(IconStart, {
        size: buttonSizeToIconSize[size],
        ...styleProps('iconStart')
      }) : null,
      ...trackStyleProps,
      children: children
    }), /*#__PURE__*/jsxRuntime.jsx(box.Box, {
      "aria-live": "assertive",
      as: "span",
      ...styleProps('loadingWrapper'),
      children: isLoading ? /*#__PURE__*/jsxRuntime.jsxs(React.Fragment, {
        children: [/*#__PURE__*/jsxRuntime.jsx(box.Box, {
          as: "span",
          className: "sr-only",
          children: loadingLabel
        }), /*#__PURE__*/jsxRuntime.jsx(loading.Loading, {
          size: buttonSizeToIconSize[size],
          tone: "neutralPrimary",
          ...styleProps('loading')
        })]
      }) : null
    })]
  });
});
Button.displayName = 'Button';
const buttonSizeToIconSize = {
  large: '20',
  small: '16',
  standard: '16'
};

exports.Button = Button;
exports.buttonSizeToIconSize = buttonSizeToIconSize;
