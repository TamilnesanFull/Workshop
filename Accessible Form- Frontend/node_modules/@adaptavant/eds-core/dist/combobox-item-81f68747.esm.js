'use client';
import { mergeRefs } from '@react-aria/utils';
import { useCallback } from 'react';
import { useDropdownContext } from './context-6e374e37.esm.js';
import { useDropdownItemId } from './use-dropdown-item-id-85a5da75.esm.js';
import { u as useScrollIntoView } from './use-scroll-into-view-3f221097.esm.js';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { a as forwardRefWithGenericComponent } from './forward-ref-a0e1d5d1.esm.js';
import { useCombobox } from './context-a9b03758.esm.js';
import { g as getComboboxItemStyles } from './styles-435dd498.esm.js';
import { jsx } from 'react/jsx-runtime';
import { C as CheckIcon } from './check-icon-17dad0a3.esm.js';
import { S as Spacer } from './spacer-ef658955.esm.js';
import { MenuItem } from './menu-item-d2029a0a.esm.js';
import { AlignChildToText } from './align-child-to-text-c6521616.esm.js';
import './utils-0956ef0f.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './tw-c6a9a210.esm.js';
import './styles-53001919.esm.js';
import './box-a5dda214.esm.js';

/**
 * Item to be rendered inside of a ComboboxListbox.
 */
const ComboboxItem = forwardRefWithGenericComponent(function ComboboxItem({
  children,
  avoidCloseOnClick,
  className = '',
  classNames = {},
  id: idProp,
  isDisabled = false,
  onClick,
  option,
  style = {},
  styles = {},
  ...consumerProps
}, forwardedRef) {
  const {
    activeDescendantId,
    closeMenu
  } = useDropdownContext();
  const {
    onSelectionChange,
    selectedKey,
    selectedOption
  } = useCombobox();
  const id = useDropdownItemId(idProp);
  const isHighlighted = id === activeDescendantId;
  const isSelected = Boolean(selectedOption && selectedOption[selectedKey] === option[selectedKey]);

  // Ensure the active descendant is visible in long lists with overflow.
  // Without this, the active item may not be visible on the screen.
  const scrollIntoView = useScrollIntoView(isHighlighted);
  const handleOnClick = useCallback(event => {
    if (typeof onClick === 'function') {
      onClick(event);
    }
    onSelectionChange(option);
    if (avoidCloseOnClick) return;
    closeMenu();
  }, [avoidCloseOnClick, closeMenu, onClick, onSelectionChange, option]);
  const railStart = /*#__PURE__*/jsx(AlignChildToText, {
    children: isSelected ? /*#__PURE__*/jsx(CheckIcon, {
      size: "16"
    }) : /*#__PURE__*/jsx(Spacer, {
      className: "w-4"
    })
  });
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getComboboxItemStyles(Boolean(selectedOption))
  });
  const menuItemTrackStyleProps = {
    className: styleProps('root').className,
    classNames: {
      center: styleProps('center').className,
      railStart: styleProps('railStart').className,
      railEnd: styleProps('railEnd').className
    },
    style: styleProps('root').style,
    styles: {
      center: styleProps('center').style,
      railStart: styleProps('railStart').style,
      railEnd: styleProps('railEnd').style
    }
  };
  return /*#__PURE__*/jsx(MenuItem, {
    ...consumerProps,
    "aria-selected": isSelected,
    id: id,
    isDisabled: isDisabled,
    isHighlighted: isHighlighted,
    isSelected: isSelected,
    onClick: isDisabled ? undefined : handleOnClick,
    railStart: selectedOption ? railStart : null,
    ref: mergeRefs(scrollIntoView, forwardedRef),
    role: "option",
    tabIndex: -1,
    ...menuItemTrackStyleProps,
    children: children
  });
});

export { ComboboxItem };
