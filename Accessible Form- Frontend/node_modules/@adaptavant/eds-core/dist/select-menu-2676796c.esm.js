'use client';
import { DropdownProvider } from './context-6e374e37.esm.js';
import { useDropdownContextValues } from './use-dropdown-context-values-349b04a0.esm.js';
import { usePopulateDescendantNodes } from './use-populate-descendant-nodes-9523f130.esm.js';
import { MobileDropdownProvider } from './mobile-context-75da3175.esm.js';
import { M as MOBILE_TOGGLE_POINT } from './utils-0956ef0f.esm.js';
import { SelectMenuProvider } from './context-4a044c72.esm.js';
import { useSelectMenuTriggerProps } from './select-menu-trigger-3adbb8cd.esm.js';
import { jsx } from 'react/jsx-runtime';
import { useIsViewportBelowOrEqual } from './use-viewport-below-or-equal-b1c12ed0.esm.js';

/**
 * SelectMenu
 *
 * @description
 * A dropdown select component that allows the user to select a single option
 * from a list.
 */
function SelectMenu({
  children,
  closeButtonPropsForMobile,
  mobileFriendly = true,
  popoverMatchReferenceWidth = false,
  popoverMaxHeight = 356,
  popoverMaxWidth = 400,
  popoverOffset = 4,
  popoverPlacement = 'bottom-start',
  selectedOption,
  strategy = 'absolute',
  titleForMobile,
  togglePoint = MOBILE_TOGGLE_POINT
}) {
  const dropdownContext = useDropdownContextValues({
    popoverMatchReferenceWidth,
    popoverMaxHeight,
    popoverMaxWidth,
    popoverOffset,
    popoverPlacement,
    strategy
  });
  const selectMenuContext = {
    selectedOption
  };
  const {
    isMenuOpen,
    dispatch,
    popover
  } = dropdownContext;
  const {
    triggerProps
  } = useSelectMenuTriggerProps(dropdownContext);
  const isResponsiveViewport = useIsViewportBelowOrEqual(togglePoint);
  usePopulateDescendantNodes({
    isMenuOpen,
    children,
    dispatch,
    popoverRef: popover.popoverRef,
    selectors: '[role="option"]',
    isMobile: mobileFriendly && isResponsiveViewport
  });
  return /*#__PURE__*/jsx(DropdownProvider, {
    value: dropdownContext,
    children: /*#__PURE__*/jsx(MobileDropdownProvider, {
      value: {
        closeButtonProps: closeButtonPropsForMobile,
        togglePoint: togglePoint,
        mobileFriendly,
        title: titleForMobile
      },
      children: /*#__PURE__*/jsx(SelectMenuProvider, {
        value: selectMenuContext,
        children: typeof children === 'function' ? children({
          isMenuOpen,
          triggerProps
        }) : children
      })
    })
  });
}

export { SelectMenu };
