'use client';
import { isEqual } from 'lodash';
import { useRef, useMemo, useEffect, useCallback } from 'react';

const useDeepCompareMemoize = dependencies => {
  const dependenciesRef = useRef(dependencies);
  const signalRef = useRef(0);
  if (!isEqual(dependencies, dependenciesRef.current)) {
    dependenciesRef.current = dependencies;
    signalRef.current += 1;
  }

  // eslint-disable-next-line react-hooks/exhaustive-deps
  return useMemo(() => dependenciesRef.current, [signalRef.current]);
};
const useDeepCompareEffect = (callback, dependencies) => useEffect(callback, useDeepCompareMemoize(dependencies));
const useDeepCompareMemo = (factory, dependencies) => useMemo(factory, useDeepCompareMemoize(dependencies));

// we want to let the user put any kind of function
// eslint-disable-next-line @typescript-eslint/ban-types
const useDeepCompareCallback = (callback, dependencies) => useCallback(callback, useDeepCompareMemoize(dependencies));

export { useDeepCompareCallback, useDeepCompareEffect, useDeepCompareMemo, useDeepCompareMemoize };
