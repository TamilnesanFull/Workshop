'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var context = require('./context-1e651be3.cjs.dev.js');
var use_dropdown_context_values = require('./use-dropdown-context-values-3b999c7b.cjs.dev.js');
var use_populate_descendant_nodes = require('./use-populate-descendant-nodes-de07faf0.cjs.dev.js');
var mobile_context = require('./mobile-context-b7ac574c.cjs.dev.js');
var utils = require('./utils-1d447d37.cjs.dev.js');
var context$1 = require('./context-f2e4ca6a.cjs.dev.js');
var dropdown_menu_trigger = require('./dropdown-menu-trigger-7c23af32.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
var use_viewport_below_or_equal = require('./use-viewport-below-or-equal-a63c017b.cjs.dev.js');

function DropdownMenu({
  children,
  isDisabled = false,
  popoverMatchReferenceWidth = false,
  popoverMaxHeight = 356,
  popoverMaxWidth = 400,
  popoverOffset = 4,
  popoverPlacement = 'bottom-start',
  strategy = 'absolute',
  mobilePopover
}) {
  const dropdownContext = use_dropdown_context_values.useDropdownContextValues({
    popoverMatchReferenceWidth,
    popoverMaxHeight,
    popoverMaxWidth,
    popoverOffset,
    popoverPlacement,
    strategy
  });
  const {
    isMenuOpen,
    dispatch,
    popover
  } = dropdownContext;
  const {
    mobileFriendly = true,
    titleForMobile = '',
    closeButtonPropsForMobile = undefined,
    togglePoint = utils.MOBILE_TOGGLE_POINT
  } = mobilePopover ?? {};
  const {
    triggerProps
  } = dropdown_menu_trigger.useDropdownMenuTriggerProps(dropdownContext, isDisabled);
  const isResponsiveViewport = use_viewport_below_or_equal.useIsViewportBelowOrEqual(togglePoint);
  use_populate_descendant_nodes.usePopulateDescendantNodes({
    isMenuOpen,
    children,
    dispatch,
    popoverRef: popover.popoverRef,
    selectors: '[role="menuitem"]',
    isMobile: isResponsiveViewport
  });
  return /*#__PURE__*/jsxRuntime.jsx(context.DropdownProvider, {
    value: dropdownContext,
    children: /*#__PURE__*/jsxRuntime.jsx(mobile_context.MobileDropdownProvider, {
      value: {
        mobileFriendly,
        closeButtonProps: closeButtonPropsForMobile,
        togglePoint,
        title: titleForMobile
      },
      children: /*#__PURE__*/jsxRuntime.jsx(context$1.DropdownMenuProvider, {
        value: {
          isDisabled
        },
        children: typeof children === 'function' ? children({
          isMenuOpen,
          triggerProps
        }) : children
      })
    })
  });
}
DropdownMenu.displayName = 'DropdownMenu';

exports.DropdownMenu = DropdownMenu;
