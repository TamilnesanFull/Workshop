'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var index = require('./index-3bdbdb42.cjs.dev.js');
var composeId = require('./compose-id-8f0cde18.cjs.dev.js');
var mergeIds = require('./merge-ids-b19ec20e.cjs.dev.js');
var use_provided_or_generated_id = require('./use-provided-or-generated-id-2bfa8150.cjs.dev.js');
var styles = require('./styles-ea402050.cjs.dev.js');
var toggle_primitive = require('./toggle-primitive-f323e941.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
var stack = require('./stack-b8f38fa7.cjs.dev.js');
var spacer = require('./spacer-392b5761.cjs.dev.js');
var text = require('./text-b4d8b4ef.cjs.dev.js');
var context = require('./context-9bdca1e6.cjs.dev.js');
var track = require('./track-1da464e0.cjs.dev.js');
require('./tw-merge-70bc959c.cjs.dev.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.dev.js');
require('./styles-3e350289.cjs.dev.js');
require('./tw-cabb7e4c.cjs.dev.js');
require('./box-88b49271.cjs.dev.js');

/**
 * Toggle
 *
 * @description
 * Toggle is a UI element that allows the user to select option to
 * switch on or off.
 */

const Toggle = /*#__PURE__*/React.forwardRef(function Toggle({
  'aria-describedby': ariaDescribedByProp,
  checked,
  className = '',
  classNames = {},
  description,
  id: idProp,
  isDisabled: isDisabledProp = false,
  label,
  name,
  onBlur,
  onChange,
  onClick,
  size = 'standard',
  style = {},
  styles: styles$1 = {},
  value,
  ...consumerProps
}, forwardedRef) {
  const {
    isDisabled
  } = context.useControlInputState({
    isDisabled: isDisabledProp,
    isInvalid: false,
    isRequired: false
  });
  const a11yProps = context.useControlA11yProps({
    isDisabled
  });
  const {
    descriptionId,
    inputId
  } = useToggleIds(idProp);
  const ariaDescribedBy = mergeIds.mergeIds(a11yProps === null || a11yProps === void 0 ? void 0 : a11yProps['aria-describedby'], ariaDescribedByProp, description ? descriptionId : undefined);
  const parts = index.useComponentStyleParts({
    className,
    classNames,
    style,
    styles: styles$1,
    tw: styles.getToggleStyles({
      isDisabled,
      size
    })
  }, ['root', 'label', 'description', 'descriptionTrack', 'descriptionSpacer', 'togglePrimitiveRoot', 'togglePrimitiveInput', 'togglePrimitiveControl', 'togglePrimitiveIcon']);
  const togglePrimitiveStyleProps = {
    ...parts.togglePrimitiveRoot,
    classNames: {
      input: parts.togglePrimitiveInput.className,
      control: parts.togglePrimitiveControl.className,
      icon: parts.togglePrimitiveIcon.className
    },
    styles: {
      input: parts.togglePrimitiveInput.style,
      control: parts.togglePrimitiveControl.style,
      icon: parts.togglePrimitiveIcon.style
    }
  };
  return /*#__PURE__*/jsxRuntime.jsxs(stack.Stack, {
    ...parts.root,
    children: [/*#__PURE__*/jsxRuntime.jsx(track.Track, {
      as: "label",
      htmlFor: inputId,
      railStart: /*#__PURE__*/jsxRuntime.jsx(toggle_primitive.TogglePrimitive, {
        ...consumerProps,
        ...a11yProps,
        "aria-describedby": ariaDescribedBy,
        checked: checked,
        id: inputId,
        isDisabled: isDisabled,
        name: name,
        onBlur: onBlur,
        onChange: onChange,
        onClick: onClick,
        ref: forwardedRef,
        size: size,
        value: value,
        ...togglePrimitiveStyleProps
      }),
      verticalAlign: "top",
      ...parts.label,
      children: label
    }), description ? /*#__PURE__*/jsxRuntime.jsx(track.Track, {
      as: "span",
      railStart: /*#__PURE__*/jsxRuntime.jsx(spacer.Spacer, {
        ...parts.descriptionSpacer
      }),
      ...parts.descriptionTrack,
      children: /*#__PURE__*/jsxRuntime.jsx(text.Text, {
        id: descriptionId,
        ...parts.description,
        children: description
      })
    }) : null]
  });
});
Toggle.displayName = 'Toggle';
function useToggleIds(id) {
  const inputId = use_provided_or_generated_id.useProvidedOrGeneratedId(id);
  return {
    inputId,
    descriptionId: composeId.composeId(inputId, 'description')
  };
}

exports.Toggle = Toggle;
