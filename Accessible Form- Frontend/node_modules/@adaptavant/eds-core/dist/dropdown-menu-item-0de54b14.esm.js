'use client';
import { mergeRefs } from '@react-aria/utils';
import { forwardRef, useCallback } from 'react';
import { useDropdownContext } from './context-6e374e37.esm.js';
import { useDropdownItemId } from './use-dropdown-item-id-85a5da75.esm.js';
import { u as useScrollIntoView } from './use-scroll-into-view-3f221097.esm.js';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { jsx } from 'react/jsx-runtime';
import { MenuItem } from './menu-item-d2029a0a.esm.js';
import './utils-0956ef0f.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';

/**
 * Item to be rendered inside of a DropdownMenuList.
 */
const DropdownMenuItem = /*#__PURE__*/forwardRef(function DropdownMenuItem({
  children,
  className = '',
  classNames = {},
  id: idProp,
  isDisabled = false,
  onClick,
  style = {},
  styles = {},
  ...consumerProps
}, forwardedRef) {
  const {
    activeDescendantId,
    closeMenu
  } = useDropdownContext();
  const id = useDropdownItemId(idProp);
  const isHighlighted = id === activeDescendantId;

  // Ensure the active descendant is visible in long lists with overflow.
  // Without this, the active item may not be visible on the screen.
  const scrollIntoView = useScrollIntoView(isHighlighted);
  const handleOnClick = useCallback(event => {
    const shouldCloseMenu = typeof onClick === 'function' ? onClick(event) : undefined;
    if (shouldCloseMenu !== false) {
      closeMenu();
    }
  }, [closeMenu, onClick]);
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: {
      root: '',
      center: '',
      railStart: '',
      railEnd: ''
    }
  });
  const menuItemTrackStyleProps = {
    className: styleProps('root').className,
    classNames: {
      center: styleProps('center').className,
      railStart: styleProps('railStart').className,
      railEnd: styleProps('railEnd').className
    },
    style: styleProps('root').style,
    styles: {
      center: styleProps('center').style,
      railStart: styleProps('railStart').style,
      railEnd: styleProps('railEnd').style
    }
  };
  return /*#__PURE__*/jsx(MenuItem, {
    ...consumerProps,
    id: id,
    isDisabled: isDisabled,
    isHighlighted: isHighlighted,
    onClick: isDisabled ? undefined : handleOnClick,
    ref: mergeRefs(scrollIntoView, forwardedRef),
    role: "menuitem",
    tabIndex: -1,
    ...menuItemTrackStyleProps,
    children: children
  });
});

export { DropdownMenuItem };
