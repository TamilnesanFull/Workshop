'use client';
import { flexRender, useReactTable, getCoreRowModel, getSortedRowModel, getPaginationRowModel } from '@tanstack/react-table';
import { createElement, useState } from 'react';
import { g as getStyleProps, u as useComponentStyleParts } from './index-dd10a77e.esm.js';
import { t as tw } from './tw-c6a9a210.esm.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import { B as Box } from './box-a5dda214.esm.js';
import { I as IconButton } from './icon-button-c905d5af.esm.js';
import { C as ChevronLeftIcon, a as ChevronRightIcon } from './chevron-right-icon-ae803e37.esm.js';
import { T as Text } from './text-3fc88ad6.esm.js';
import { useTranslations } from './translations-1012abc4.esm.js';
import { m as mergeProps } from './merge-props-5c13cba9.esm.js';
import { S as Stack } from './stack-090617c5.esm.js';
import { D as DropdownUpIcon } from './dropdown-up-icon-07da5d49.esm.js';
import { D as DropdownDownIcon } from './dropdown-down-icon-372942b0.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './button-22306f71.esm.js';
import './use-button-36a8da62.esm.js';
import './styles-6927e7c9.esm.js';
import './styles-56e113a0.esm.js';
import './loading-7c0b35b6.esm.js';
import './grow-your-brand-icon-b4a6e8da.esm.js';
import './styles-53001919.esm.js';
import './setmore-icon-0a46ffb4.esm.js';
import './config-e49cd2d8.esm.js';
import '@react-aria/utils';
import './cx-c5d68be6.esm.js';
import 'clsx';
import './merge-ids-c2d2d3d7.esm.js';

const getTableStyles = () => ({
  baseContainer: tw`
		flex 
		flex-col 
		text-body-12
	`,
  tableContainer: tw`
		overflow-auto
 	`,
  table: tw`
		w-full
  	`,
  row: tw`
		border-b 
		border-tertiary
		h-12
	`,
  cell: tw`
		p-2 
	`,
  footerContainer: tw`
		flex 
		items-center 
		justify-between
		py-2
	`
});
const getPaginationStyles = () => ({
  root: tw`
		flex 
		gap-1
		items-center 
		ml-auto	
  	`,
  text: tw`
		shrink-0
		text-body-12 
		text-center 			
	`
});
const getHeaderStyles = () => ({
  root: tw`
	`,
  row: tw`
		border-b 
		border-secondary
		h-12
	`,
  cell: tw`
	    font-regular
		px-1 
		py-3 
		text-left 
		text-secondary 			
	`,
  contentWrapper: tw`
	    flex 
		group
		gap-1 
		items-center
		pl-1
	`,
  iconsWrapper: tw`
	    group-focus:visible
	    group-hover:visible 
		invisible
	`
});

function Pagination({
  className = '',
  classNames = {},
  style = {},
  styles = {},
  tableInstance
}) {
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getPaginationStyles()
  });
  const {
    experimental_table: translations
  } = useTranslations();
  const GetCurrentVisibleRows = () => {
    const {
      pageIndex,
      pageSize
    } = tableInstance.getState().pagination;
    const totalRows = tableInstance.getRowCount();

    // Calculate start and end as strings
    const start = (pageIndex * pageSize + 1).toString();
    const end = Math.min((pageIndex + 1) * pageSize, totalRows).toString();

    // Replace placeholders with actual values
    const currentPageInfo = translations.paginationContent.replace('{start}', start).replace('{end}', end).replace('{totalRows}', totalRows.toString());
    return /*#__PURE__*/jsx(Text, {
      ...styleProps('text'),
      children: currentPageInfo
    });
  };
  return /*#__PURE__*/jsxs(Box, {
    ...styleProps('root'),
    children: [/*#__PURE__*/jsx(GetCurrentVisibleRows, {}), /*#__PURE__*/jsxs(Box, {
      children: [/*#__PURE__*/jsx(IconButton, {
        "aria-label": translations.previousPageLabel,
        icon: ChevronLeftIcon,
        isDisabled: !tableInstance.getCanPreviousPage(),
        onClick: () => tableInstance.previousPage(),
        variant: "neutralTertiary"
      }), /*#__PURE__*/jsx(IconButton, {
        "aria-label": translations.nextPageLabel,
        icon: ChevronRightIcon,
        isDisabled: !tableInstance.getCanNextPage(),
        onClick: () => tableInstance.nextPage(),
        variant: "neutralTertiary"
      })]
    })]
  });
}

function TableHeader({
  className = '',
  classNames = {},
  style = {},
  styles = {},
  tableInstance
}) {
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getHeaderStyles()
  });

  // Check if there are any rows available in the table instance
  const isDataAvailable = tableInstance.getRowModel().rows.length > 0;

  // Function to render sorting icons based on the column's sorting state
  function SortingIcons({
    column
  }) {
    // Return null if sorting is not allowed or no data is available
    if (!column.getCanSort() || !isDataAvailable) return null;
    const sortingState = column.getIsSorted();
    const isAscending = sortingState === 'asc';
    const isDescending = sortingState === 'desc';
    return /*#__PURE__*/jsxs(Stack, {
      ...mergeProps(styleProps('iconsWrapper'), {
        className: sortingState !== false ? 'visible' : ''
      }),
      children: [/*#__PURE__*/jsx(DropdownUpIcon, {
        ...mergeProps(styleProps('icon'), {
          className: '-mb-2.5'
        }),
        size: "16",
        tone: isDescending || sortingState === false ? 'neutralTertiary' : undefined
      }), /*#__PURE__*/jsx(DropdownDownIcon, {
        ...styleProps('icon'),
        size: "16",
        tone: isAscending || sortingState === false ? 'neutralTertiary' : undefined
      })]
    });
  }
  return /*#__PURE__*/jsx("thead", {
    role: "rowgroup",
    ...styleProps('root'),
    children: tableInstance.getHeaderGroups().map(({
      id: headerGroupId,
      headers
    }) => /*#__PURE__*/createElement("tr", {
      ...styleProps('row'),
      key: headerGroupId,
      role: "row"
    }, headers.map(({
      id: headerId,
      index,
      colSpan,
      column,
      isPlaceholder,
      getContext
    }) => {
      return /*#__PURE__*/createElement("th", {
        ...styleProps('cell'),
        "aria-colindex": index + 1
        // Set aria-sort when active sort direction is set
        ,
        ...(column.getIsSorted() ? {
          'aria-sort': column.getIsSorted() === 'asc' ? 'ascending' : 'descending'
        } : {}),
        colSpan: colSpan,
        key: headerId
        // Toggle sorting when the header cell is clicked, if data is available
        ,
        onClick: isDataAvailable ? column.getToggleSortingHandler() : undefined,
        role: "columnheader",
        scope: column.depth === 0 ? 'col' : 'colgroup'
      }, /*#__PURE__*/jsxs(Box
      // Use button if the column can be sorted, otherwise use div
      , {
        as: column.getCanSort() ? 'button' : 'div',
        ...mergeProps(styleProps('contentWrapper'), {
          className: column.getCanSort() ? 'focus-visible:focus-ring rounded-6px' : ''
        }),
        children: [/*#__PURE__*/jsx(Box, {
          as: "span",
          ...styleProps('content'),
          children: isPlaceholder ? null : flexRender(column.columnDef.header, getContext())
        }), /*#__PURE__*/jsx(SortingIcons, {
          column: column
        })]
      }));
    })))
  });
}

/**
 * Table
 *
 * @description
 * An adaptable and accessible table component built using the `@tanstack/react-table` library.
 * Offers important features:
 * - Ensures accessibility with proper ARIA roles and attributes.
 * - Supports customizable columns for flexible data representation.
 * - Provides pagination for large datasets.
 * - Handles empty data gracefully with an empty template.
 */

function Table({
  columns,
  className = '',
  classNames = {},
  data,
  emptyTemplate,
  enableSorting,
  pagination,
  role = 'table',
  sortDescFirst,
  sortingFns,
  style = {},
  styles = {}
}) {
  const parts = useComponentStyleParts({
    className,
    classNames,
    style,
    styles,
    tw: getTableStyles()
  }, ['baseContainer', 'tableContainer', 'table', 'header', 'headerRow', 'headerCell', 'headerContentWrapper', 'headerContent', 'sortIconsWrapper', 'sortIcon', 'body', 'row', 'cell', 'footerContainer']);
  const headerStyleProps = {
    ...parts.header,
    classNames: {
      row: parts.headerRow.className,
      cell: parts.headerCell.className,
      contentWrapper: parts.headerContentWrapper.className,
      content: parts.headerContent.className,
      iconsWrapper: parts.sortIconsWrapper.className,
      icon: parts.sortIcon.className
    },
    styles: {
      row: parts.headerRow.style,
      cell: parts.headerCell.style,
      contentWrapper: parts.headerContentWrapper.style,
      content: parts.headerContent.style,
      iconsWrapper: parts.sortIconsWrapper.style,
      icon: parts.sortIcon.style
    }
  };

  // sorting state initialization
  const [sorting, setSorting] = useState([]);
  const tableInstance = useReactTable({
    columns,
    data,
    enableSorting,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    onSortingChange: setSorting,
    sortDescFirst,
    sortingFns: sortingFns,
    state: {
      sorting
    },
    ...(pagination !== null && pagination !== void 0 && pagination.pageSize ? {
      getPaginationRowModel: getPaginationRowModel()
    } : {}),
    initialState: pagination !== null && pagination !== void 0 && pagination.pageSize ? {
      pagination: {
        pageSize: pagination.pageSize,
        pageIndex: 0
      }
    } : {}
  });
  return /*#__PURE__*/jsxs(Box, {
    ...parts.baseContainer,
    children: [/*#__PURE__*/jsx(Box, {
      ...parts.tableContainer,
      children: /*#__PURE__*/jsxs("table", {
        ...parts.table,
        "aria-colcount": tableInstance.getAllColumns().length,
        "aria-rowcount": tableInstance.getRowCount(),
        role: role,
        children: [/*#__PURE__*/jsx(TableHeader, {
          ...headerStyleProps,
          tableInstance: tableInstance
        }), /*#__PURE__*/jsx("tbody", {
          ...parts.body,
          role: "rowgroup",
          children: data.length === 0 ? /*#__PURE__*/jsx("tr", {
            children: /*#__PURE__*/jsx("td", {
              colSpan: columns.length,
              children: emptyTemplate || null
            })
          }) : tableInstance.getRowModel().rows.map(({
            id: rowId,
            index: rowIndex,
            getVisibleCells
          }) => /*#__PURE__*/createElement("tr", {
            ...parts.row,
            "aria-rowindex": rowIndex + 1,
            key: rowId,
            role: "row"
          }, getVisibleCells().map(({
            id: cellId,
            column,
            getContext
          }) => /*#__PURE__*/createElement("td", {
            ...parts.cell,
            "aria-colindex": column.getIndex() + 1,
            key: cellId,
            role: role === 'grid' ? 'gridcell' : 'cell'
          }, flexRender(column.columnDef.cell, getContext())))))
        })]
      })
    }), pagination !== null && pagination !== void 0 && pagination.pageSize ? /*#__PURE__*/jsx(Box, {
      ...parts.footerContainer,
      children: /*#__PURE__*/jsx(Pagination, {
        tableInstance: tableInstance
      })
    }) : null]
  });
}
Table.displayName = 'Table';

export { Table };
