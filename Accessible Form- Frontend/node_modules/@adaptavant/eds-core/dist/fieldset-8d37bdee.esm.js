'use client';
import { forwardRef } from 'react';
import { u as useComponentStyleParts } from './index-dd10a77e.esm.js';
import { c as composeId } from './compose-id-1f2e6139.esm.js';
import { useProvidedOrGeneratedId } from './use-provided-or-generated-id-70d42050.esm.js';
import { FieldsetContextProvider } from './context-af60a359.esm.js';
import { t as tw } from './tw-c6a9a210.esm.js';
import { t as typography } from './styles-267c9284.esm.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { S as Stack } from './stack-090617c5.esm.js';
import { T as Text } from './text-3fc88ad6.esm.js';
import { B as Box } from './box-a5dda214.esm.js';
import { F as FieldErrorMessage } from './field-error-message-bfbfd8e7.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './error-icon-1fdb44d1.esm.js';
import './styles-53001919.esm.js';
import './track-26dc4fe4.esm.js';
import './align-child-to-text-c6521616.esm.js';

const getFieldsetStyles = ({
  isDisabled,
  orientation
}) => ({
  root: tw`
		${verticalSpaceClasses.gap}
		items-stretch
		text-primary
	`,
  description: tw`
		${isDisabled ? 'text-disabled' : 'text-secondary'}
		${typography['large']}
		`,
  legend: tw`
		${isDisabled ? 'text-disabled' : ''}
		${typography['large']}
		${verticalSpaceClasses.marginBottom}
		font-strong
	`,
  wrapper: tw`
		${orientation === 'horizontal' ? 'flex-row' : 'flex-col'}
		${verticalSpaceClasses.gap}
		flex
		flex-wrap
		gap-x-4
		items-start
	`,
  errorTrack: tw`
		w-full
	`,
  errorIcon: tw``,
  errorMessage: tw`
		${typography['large']}
	`
});

/**
 * The `<legend>` element doesn't participate in `<fieldset>`â€™s flex layout,
 * so we need to use margin instead to create vertical space between the legend
 * and the wrapper.
 * These classes are grouped together in an object to ensure they're always
 * using the same vertical space.
 */
const verticalSpaceClasses = {
  gap: tw`gap-y-2`,
  marginBottom: tw`mb-2`
};

/**
 * Fieldset
 *
 * @description Used to group a set of checkboxes or radio buttons.
 */

const Fieldset = /*#__PURE__*/forwardRef(function Fieldset({
  children,
  className = '',
  classNames = {},
  description,
  errorMessage,
  id: idProp,
  isDisabled = false,
  /**
   * @todo we should add some text or an asterisk (that can be overridden) to
   * indicate when a Fieldset is required.
   */
  isRequired = false,
  legend,
  orientation = 'vertical',
  style = {},
  styles = {},
  ...consumerProps
}, forwardedRef) {
  const isInvalid = Boolean(errorMessage);
  const {
    descriptionId,
    errorMessageId,
    fieldsetId,
    labelId
  } = useFieldsetIds(idProp);
  const parts = useComponentStyleParts({
    className,
    classNames,
    style,
    styles,
    tw: getFieldsetStyles({
      isDisabled,
      isInvalid,
      orientation
    })
  }, ['root', 'description', 'legend', 'errorMessage', 'errorTrack', 'errorIcon', 'errorMessage', 'wrapper']);
  const fieldErrorMessageStyleProps = {
    ...parts.errorTrack,
    classNames: {
      errorIcon: parts.errorIcon.className,
      errorMessage: parts.errorMessage.className
    },
    styles: {
      errorIcon: parts.errorIcon.style,
      errorMessage: parts.errorMessage.style
    }
  };
  return /*#__PURE__*/jsx(FieldsetContextProvider, {
    value: {
      description,
      descriptionId,
      isDisabled,
      isInvalid,
      isRequired,
      errorMessage,
      errorMessageId
    },
    children: /*#__PURE__*/jsxs(Stack, {
      ...consumerProps,
      as: "fieldset",
      id: fieldsetId,
      ref: forwardedRef,
      ...parts.root,
      children: [/*#__PURE__*/jsx(Text, {
        as: "legend",
        id: labelId,
        ...parts.legend,
        children: legend
      }), description ? /*#__PURE__*/jsx(Text, {
        id: descriptionId,
        ...parts.description,
        children: description
      }) : null, /*#__PURE__*/jsxs(Box, {
        ...parts.wrapper,
        children: [children, errorMessage ? /*#__PURE__*/jsx(FieldErrorMessage, {
          id: errorMessageId,
          isDisabled: isDisabled,
          size: "standard",
          ...fieldErrorMessageStyleProps,
          children: errorMessage
        }) : null]
      })]
    })
  });
});
Fieldset.displayName = 'Fieldset';

/**
 * useFieldsetIds
 *
 * @description generates unique ids for the subcomponents of the control group.
 */
function useFieldsetIds(idProp) {
  const id = useProvidedOrGeneratedId(idProp);
  return {
    fieldsetId: id,
    descriptionId: composeId(id, 'description'),
    labelId: composeId(id, 'label'),
    errorMessageId: composeId(id, 'error-message')
  };
}

export { Fieldset };
