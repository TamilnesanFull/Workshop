'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var context = require('./context-1e651be3.cjs.dev.js');
var index = require('./index-3bdbdb42.cjs.dev.js');
var visuallyHidden = require('./visually-hidden-9e9bf258.cjs.dev.js');
var forwardRef = require('./forward-ref-6c731e6e.cjs.dev.js');
var mergeProps = require('./merge-props-74bd38ff.cjs.dev.js');
var styles = require('./styles-8c29dd64.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
var listbox = require('./listbox-c8a36196.cjs.dev.js');
require('./tw-merge-70bc959c.cjs.dev.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.dev.js');
require('@react-aria/utils');
require('./cx-26784cbb.cjs.dev.js');
require('clsx');
require('./merge-ids-b19ec20e.cjs.dev.js');
require('./tw-cabb7e4c.cjs.dev.js');

const ComboboxListbox = forwardRef.forwardRefWithGenericComponent(function ComboboxListbox(props, forwardedRef) {
  const {
    listboxProps,
    noResultsFallback
  } = useComboboxListbox(props, forwardedRef);
  const {
    descendantNodes,
    dispatch,
    isMenuOpen
  } = context.useDropdownContext();

  // Ref to track if the component has already been initialized
  const isFirstRenderRef = React.useRef(true);

  /**
   * Sets the active descendant in the dropdown when the menu is open.
   * Finds the selected option within the popover and dispatches an action
   * to update the context with the index and ID of the active option.
   */
  React.useEffect(() => {
    if (!isMenuOpen || !descendantNodes || !isFirstRenderRef.current) {
      return;
    }
    const options = Array.from(descendantNodes);
    const activeOption = options.find(option => option.getAttribute('aria-selected') === 'true');
    if (activeOption) {
      dispatch({
        type: 'SET_ACTIVE_DESCENDANT_INDEX',
        payload: {
          activeIndex: options.indexOf(activeOption),
          activeId: activeOption.id
        }
      });
    }
    isFirstRenderRef.current = false;
  }, [descendantNodes, dispatch, isMenuOpen]);
  return /*#__PURE__*/jsxRuntime.jsxs(React.Fragment, {
    children: [/*#__PURE__*/jsxRuntime.jsx(listbox.Listbox, {
      ...listboxProps
    }), noResultsFallback]
  });
});
function useComboboxListbox({
  children,
  className = '',
  classNames = {},
  noResultsFallback,
  options,
  style = {},
  styles: styles$1 = {},
  ...consumerProps
}, forwardedRef) {
  const {
    activeDescendantId,
    comboboxId,
    isMenuOpen,
    listId
  } = context.useDropdownContext();
  const isEmptyOptions = React.useMemo(() => Boolean(options && options.length === 0), [options]);
  const styleProps = React.useMemo(() => index.getStyleProps({
    className,
    classNames,
    style,
    styles: styles$1,
    tw: styles.getComboboxListboxStyles()
  }), [className, classNames, style, styles$1]);
  return {
    listboxProps: React.useMemo(() => mergeProps.mergeProps(consumerProps, {
      'aria-activedescendant': activeDescendantId,
      'aria-labelledby': comboboxId,
      children: isMenuOpen ? children : null,
      id: listId,
      options: options,
      ref: forwardedRef
    }, styleProps('root', isEmptyOptions ? visuallyHidden.visuallyHiddenStyles : undefined)), [activeDescendantId, children, comboboxId, consumerProps, forwardedRef, isEmptyOptions, isMenuOpen, listId, options, styleProps]),
    noResultsFallback: React.useMemo(() => isMenuOpen && isEmptyOptions ? noResultsFallback : null, [isMenuOpen, isEmptyOptions, noResultsFallback])
  };
}

exports.ComboboxListbox = ComboboxListbox;
exports.useComboboxListbox = useComboboxListbox;
