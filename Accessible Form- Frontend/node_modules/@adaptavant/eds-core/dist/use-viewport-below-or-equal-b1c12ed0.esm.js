'use client';
import { useState, useEffect } from 'react';
import { M as MOBILE_TOGGLE_POINT } from './utils-0956ef0f.esm.js';
import { useDebounceFunction } from './use-debounce-function-f581583e.esm.js';

/**
 * A Custom hook that determines if the current window width is less than or equal to a specified point.
 *
 * This hook attaches a debounced resize event listener to the window, updating the state
 * only when the window width is below the specified breakpoint.
 *
 * @param [breakPoint=768] - The width in pixels at which the hook will consider the window width as "less than" the specified breakpoint. Defaults to 768.
 * @param [debounceDelay=200] - The debounce delay in milliseconds. Default is 200.
 * @returns Boolean indicating whether the current window width is less than or equal to the breakpoint.
 *
 * @example
 * const isResponsiveViewport = useIsViewportBelowOrEqual();
 * console.log(isResponsiveViewport); // true if window width is <= 768, otherwise false
 *
 * @example
 * const isUnderBreakpoint = useIsViewportBelowOrEqual(1024);
 * console.log(isResponsiveViewport); // true if window width is <= 1024, otherwise false
 */
function useIsViewportBelowOrEqual(
// When we drop the support of `togglePoint` prop, we should remove this `breakpoint` arg
// and internally handle the toggle points from a constant.
breakPoint = MOBILE_TOGGLE_POINT, debounceDelay = 200) {
  const [isViewPortBelow, setIsViewPortBelow] = useState(typeof window !== 'undefined' ? window.innerWidth <= breakPoint : false);

  // Debounce the handleResize function
  const handleResize = useDebounceFunction(() => {
    if (typeof window !== 'undefined') {
      setIsViewPortBelow(window.innerWidth <= breakPoint);
    }
  }, debounceDelay);
  useEffect(() => {
    window.addEventListener('resize', handleResize);
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, [handleResize]);
  return isViewPortBelow;
}

export { useIsViewportBelowOrEqual };
