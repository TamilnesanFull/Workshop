/**
 * Returns a space-separated string of the valid IDs.
 *
 * Used to merge multiple IDs into a single string for attributes such as
 * `aria-describedby` and `aria-labelledby`.
 *
 * @example
 * const ariaDescribedby = mergeIds('descriptionId', 'errorId'); // 'descriptionId errorId'
 * return <input aria-describedby={ariaDescribedby} />
 */
function mergeIds(...ids) {
  // Initialise a Set to keep unique IDs
  const uniqueIds = new Set();

  // Add each non-undefined ID or empty string to the Set directly after
  // splitting by space. This ensures that IDs with spaces are broken down into
  // individual words and treated as separate entities.
  ids.forEach(id => {
    if (typeof id === 'string' && id !== '') {
      id.split(' ').forEach(i => {
        if (i !== '') uniqueIds.add(i);
      });
    }
  });

  // If input types are known (string or undefined), we can infer the return
  // type. If we have at least one string, the return type will be a string; if
  // all members are undefined, the return type will be undefined.
  // Cast to any to bypass TypeScript's limitations with dynamic return types.
  if (uniqueIds.size === 0) return undefined;
  return Array.from(uniqueIds).join(' ');
}

export { mergeIds as m };
