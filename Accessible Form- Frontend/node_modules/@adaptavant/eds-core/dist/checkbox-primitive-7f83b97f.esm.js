'use client';
import { forwardRef, useCallback } from 'react';
import { a as CheckboxIndeterminateIcon, C as CheckboxCheckIcon } from './checkbox-indeterminate-icon-14425092.esm.js';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { a as getCheckboxPrimitiveStyles } from './styles-c9e46eb2.esm.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import { B as Box } from './box-a5dda214.esm.js';
import { AlignChildToText } from './align-child-to-text-c6521616.esm.js';
import './styles-53001919.esm.js';
import './tw-c6a9a210.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './styles-267c9284.esm.js';

const CheckboxPrimitive = /*#__PURE__*/forwardRef(function CheckboxPrimitive({
  checked,
  className = '',
  classNames = {},
  id,
  indeterminate = false,
  isDisabled = false,
  isInvalid = false,
  name,
  onBlur,
  onChange,
  onClick,
  size = 'standard',
  style = {},
  styles = {},
  ...consumerProps
}, forwardedRef) {
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getCheckboxPrimitiveStyles({
      isDisabled,
      isInvalid,
      size
    })
  });
  const handleOnChange = useCancellableHandler(onChange, isDisabled);
  const handleOnClick = useCancellableHandler(onClick, isDisabled);

  // "indeterminate" can be set only via javascript. see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate_state_checkboxes
  const assignRef = node => {
    if (node) {
      node.indeterminate = indeterminate; // If node is not null, set the "indeterminate prop" to current value of indeterminate for checkbox.
    }
    if (typeof forwardedRef === 'function') {
      forwardedRef(node); //  If forwardedRef is a function, call the function with node as the argument.
    } else if (forwardedRef) {
      forwardedRef.current = node; // If forwardedRef is an object (typically a React ref object), set current property to node.
    }
  };
  return /*#__PURE__*/jsxs(AlignChildToText, {
    ...styleProps('root'),
    children: [/*#__PURE__*/jsx(Box, {
      ...consumerProps,
      "aria-disabled": isDisabled || undefined,
      "aria-invalid": isInvalid || undefined,
      as: "input",
      checked: checked,
      id: id,
      name: name,
      onBlur: onBlur,
      onChange: handleOnChange,
      onClick: handleOnClick,
      ref: assignRef,
      type: "checkbox",
      ...styleProps('input')
    }), /*#__PURE__*/jsx(Box, {
      as: "span",
      ...styleProps('control'),
      children: indeterminate ? /*#__PURE__*/jsx(CheckboxIndeterminateIcon, {
        ...styleProps('icon')
      }) : /*#__PURE__*/jsx(CheckboxCheckIcon, {
        ...styleProps('icon')
      })
    })]
  });
});
function useCancellableHandler(handler, isDisabled) {
  return useCallback(event => {
    if (isDisabled) {
      event.preventDefault();
      return;
    }
    if (typeof handler === 'function') {
      handler(event);
      return;
    }
  }, [handler, isDisabled]);
}

export { CheckboxPrimitive, useCancellableHandler };
