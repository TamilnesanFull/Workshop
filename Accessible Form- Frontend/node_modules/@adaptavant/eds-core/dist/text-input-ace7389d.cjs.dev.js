'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('@react-aria/utils');
var React = require('react');
var zeroWidthSpace = require('./zero-width-space-a1290647.cjs.dev.js');
var styles = require('./styles-b5db22e5.cjs.dev.js');
var textInputPrimitive = require('./text-input-primitive-06f88f66.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
var text = require('./text-b4d8b4ef.cjs.dev.js');
var context = require('./context-fb7f9049.cjs.dev.js');
var focus_container = require('./focus-container-f89af8ff.cjs.dev.js');
require('./tw-cabb7e4c.cjs.dev.js');
require('./styles-3e350289.cjs.dev.js');
require('./index-3bdbdb42.cjs.dev.js');
require('./tw-merge-70bc959c.cjs.dev.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.dev.js');
require('./box-88b49271.cjs.dev.js');

/**
 * TextInput
 *
 * @description
 * The TextInput component provides a way for inputting text.
 * This component must be nested within a Field or InlineField.
 */
const TextInput = /*#__PURE__*/React.forwardRef(function TextInput({
  adornmentEnd,
  adornmentStart,
  className = '',
  classNames = {},
  focusContainerRef,
  style = {},
  styles: styles$1 = {},
  ...consumerProps
}, forwardedRef) {
  const {
    isDisabled,
    isInvalid,
    isRequired,
    size,
    variant
  } = context.useFieldContext();
  const a11yProps = context.useInputA11yProps({
    isDisabled,
    isInvalid,
    isRequired
  });
  const styleProps = focus_container.useCombinedFocusContainerInputStyles({
    className,
    classNames,
    isDisabled,
    isInvalid,
    style,
    styles: styles$1,
    tw: styles.getTextInputStyles({
      hasAdornmentEnd: Boolean(adornmentEnd),
      hasAdornmentStart: Boolean(adornmentStart),
      size,
      isDisabled
    })
  });
  return /*#__PURE__*/jsxRuntime.jsx(focus_container.FocusContainer, {
    adornmentEnd: adornmentEnd ? /*#__PURE__*/jsxRuntime.jsxs(text.Text, {
      ...styleProps('adornmentEnd'),
      children: [/*#__PURE__*/jsxRuntime.jsx(zeroWidthSpace.ZeroWidthSpace, {}), adornmentEnd]
    }) : undefined,
    adornmentStart: adornmentStart ? /*#__PURE__*/jsxRuntime.jsxs(text.Text, {
      ...styleProps('adornmentStart'),
      children: [/*#__PURE__*/jsxRuntime.jsx(zeroWidthSpace.ZeroWidthSpace, {}), adornmentStart]
    }) : undefined,
    classNames: {
      focusIndicator: {
        ...styleProps('focusIndicator')
      }.className
    },
    isDisabled: isDisabled,
    isGhost: variant === 'subtle',
    isInvalid: isInvalid,
    ref: focusContainerRef,
    styles: {
      focusIndicator: {
        ...styleProps('focusIndicator').style
      }
    },
    children: ({
      ref
    }) => /*#__PURE__*/jsxRuntime.jsx(textInputPrimitive.TextInputPrimitive, {
      ...consumerProps,
      ...a11yProps,
      ref: utils.mergeRefs(ref, forwardedRef),
      size: size,
      ...styleProps('root')
    })
  });
});
TextInput.displayName = 'TextInput';

exports.TextInput = TextInput;
