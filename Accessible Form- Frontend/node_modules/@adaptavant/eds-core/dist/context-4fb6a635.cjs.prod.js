'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var mergeIds = require('./merge-ids-2d47bd24.cjs.prod.js');

const FieldsetContext = /*#__PURE__*/React.createContext(undefined);
const FieldsetContextProvider = FieldsetContext.Provider;

/**
 * State for a control input based on context and optional props.
 * Returns object with merged context and prop values for each property.
 */
function useControlInputState(props) {
  const context = React.useContext(FieldsetContext);
  if (!context) {
    return {
      isDisabled: Boolean(props.isDisabled),
      isInvalid: Boolean(props.isInvalid),
      isRequired: Boolean(props.isRequired)
    };
  }
  return {
    isDisabled: props.isDisabled || context.isDisabled || false,
    isInvalid: props.isInvalid || context.isInvalid || false,
    isRequired: props.isRequired || context.isRequired || false
  };
}

/**
 * Returns aria attributes for a control input based on context and
 * optional props.
 */
function useControlA11yProps(props) {
  const context = React.useContext(FieldsetContext);
  if (!context) return;
  const {
    description,
    descriptionId,
    errorMessage,
    errorMessageId
  } = context;
  return {
    'aria-describedby': mergeIds.mergeIds(description ? descriptionId : undefined, errorMessage ? errorMessageId : undefined),
    'aria-disabled': props.isDisabled || context.isDisabled || undefined,
    'aria-invalid': props.isInvalid || context.isInvalid || undefined,
    'aria-required': props.isRequired || context.isRequired || undefined
  };
}

exports.FieldsetContextProvider = FieldsetContextProvider;
exports.useControlA11yProps = useControlA11yProps;
exports.useControlInputState = useControlInputState;
