'use client';
import { useRadioGroupState, RadioGroupContextProvider } from './context-c5d7d73b.esm.js';
import { jsx } from 'react/jsx-runtime';
import { a as forwardRefWithGenericComponent } from './forward-ref-a0e1d5d1.esm.js';
import { Fieldset } from './fieldset-8d37bdee.esm.js';
import 'react';

/**
 * RadioGroup
 *
 * @description Use a RadioGroup to control a group of radio buttons.
 */

const RadioGroup = forwardRefWithGenericComponent(function RadioGroup({
  children,
  isDisabled,
  name,
  onChange,
  size = 'standard',
  value,
  ...consumerProps
}, forwardedRef) {
  const context = useRadioGroupState({
    isDisabled,
    name,
    onChange,
    size,
    value
  });

  /**
   * If isDisabled is a function, the user is probably trying to disable individual
   * radio buttons. In this case, we don't want to disable the entire fieldset.
   */
  const isFieldsetDisabled = typeof isDisabled === 'function' ? false : isDisabled;
  return /*#__PURE__*/jsx(RadioGroupContextProvider, {
    value: context,
    children: /*#__PURE__*/jsx(Fieldset, {
      ...consumerProps,
      isDisabled: isFieldsetDisabled,
      ref: forwardedRef,
      children: children
    })
  });
});

export { RadioGroup };
