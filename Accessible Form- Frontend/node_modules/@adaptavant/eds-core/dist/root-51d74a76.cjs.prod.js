'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var reactDom = require('react-dom');
var twMerge = require('./tw-merge-885aa7a8.cjs.prod.js');
var jsxRuntime = require('react/jsx-runtime');
var config = require('./config-7c4ee3f2.cjs.prod.js');
var translations = require('./translations-4a8a2311.cjs.prod.js');
var create_portal = require('./create-portal-2405e151.cjs.prod.js');
var tooltip = require('./tooltip-4d94a9fb.cjs.prod.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.prod.js');

function Root({
  brand,
  children,
  className = '',
  colorScheme,
  translations: translations$1,
  ...consumerProps
}) {
  const rootRef = React.useRef(null);
  return /*#__PURE__*/jsxRuntime.jsx(config.BrandStylesProvider, {
    value: brand.config,
    children: /*#__PURE__*/jsxRuntime.jsx(translations.TranslationsProvider, {
      value: translations$1,
      children: /*#__PURE__*/jsxRuntime.jsx(create_portal.CreatePortalProvider, {
        value: (children, container) => rootRef.current ? /*#__PURE__*/reactDom.createPortal(children, container || rootRef.current) : null,
        children: /*#__PURE__*/jsxRuntime.jsx(tooltip.TooltipProvider, {
          children: /*#__PURE__*/jsxRuntime.jsx("div", {
            ...consumerProps,
            className: twMerge.twMerge(colorSchemeStylesLookup[colorScheme], 'bg-canvas', 'min-w-0', 'text-primary', className) || undefined,
            ref: rootRef,
            children: children
          })
        })
      })
    })
  });
}
const colorSchemeStylesLookup = {
  dark: 'dark',
  light: 'light',
  system: undefined
};

exports.Root = Root;
