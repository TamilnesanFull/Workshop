'use client';
import { mergeRefs } from '@react-aria/utils';
import { useRef, useCallback, useEffect } from 'react';
import { useDropdownContext } from './context-6e374e37.esm.js';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { a as forwardRefWithGenericComponent } from './forward-ref-a0e1d5d1.esm.js';
import { m as mergeProps } from './merge-props-5c13cba9.esm.js';
import { g as getSelectMenuListboxStyles } from './styles-3dd5cb2b.esm.js';
import { jsx } from 'react/jsx-runtime';
import { Listbox } from './listbox-279326e9.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './cx-c5d68be6.esm.js';
import 'clsx';
import './merge-ids-c2d2d3d7.esm.js';
import './styles-267c9284.esm.js';
import './tw-c6a9a210.esm.js';
import './styles-56119827.esm.js';

const SelectMenuListbox = forwardRefWithGenericComponent(function SelectMenuListbox({
  children,
  className = '',
  classNames = {},
  options,
  style = {},
  styles = {},
  ...consumerProps
}, forwardedRef) {
  const {
    activeDescendantId,
    descendantNodes,
    dispatch,
    isMenuOpen,
    listId,
    triggerId
  } = useDropdownContext();
  const handleKeyDown = useKeydownNavigation();

  // Ref to track if the component has already been initialized
  const isFirstRenderRef = useRef(true);

  // When the dropdown is opened, the menu list should be focused in order for
  // the keyboard navigation to work.
  const autoFocusOnOpen = useCallback(node => {
    if (node && isMenuOpen && isFirstRenderRef.current) {
      node.focus({
        preventScroll: true
      });
    }
  }, [isMenuOpen]);

  /**
   * Sets the active descendant in the dropdown when the menu is open.
   * Finds the selected option within the popover and dispatches an action
   * to update the context with the index and ID of the active option.
   */
  useEffect(() => {
    if (!isMenuOpen || !descendantNodes || !isFirstRenderRef.current) return;
    const options = Array.from(descendantNodes);
    const activeOption = options.find(option => option.getAttribute('aria-selected') === 'true');
    if (activeOption) {
      dispatch({
        type: 'SET_ACTIVE_DESCENDANT_INDEX',
        payload: {
          activeIndex: options.indexOf(activeOption),
          activeId: activeOption.id
        }
      });
    }
    isFirstRenderRef.current = false;
  }, [descendantNodes, dispatch, isMenuOpen]);
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getSelectMenuListboxStyles()
  });
  return /*#__PURE__*/jsx(Listbox, {
    ...mergeProps(consumerProps, {
      'aria-activedescendant': activeDescendantId,
      'aria-labelledby': triggerId,
      onKeyDown: handleKeyDown
    }),
    id: listId,
    options: options,
    ref: mergeRefs(autoFocusOnOpen, forwardedRef),
    ...styleProps('root'),
    children: children
  });
});
function useKeydownNavigation() {
  const {
    clickSelectedItem,
    closeMenu,
    goToFirstMenuItem,
    goToLastMenuItem,
    goToNextMenuItem,
    goToPreviousMenuItem,
    updateDescendantSearchTerm
  } = useDropdownContext();
  return useCallback(event => {
    switch (event.code) {
      case 'ArrowUp':
        {
          event.preventDefault();
          goToPreviousMenuItem();
          return;
        }
      case 'ArrowDown':
        {
          event.preventDefault();
          goToNextMenuItem();
          return;
        }
      case 'Home':
        {
          event.preventDefault();
          goToFirstMenuItem();
          return;
        }
      case 'End':
        {
          event.preventDefault();
          goToLastMenuItem();
          return;
        }
      case 'Escape':
        {
          closeMenu();
          return;
        }
      case 'Enter':
      case 'Space':
        {
          event.preventDefault();
          clickSelectedItem();
          return;
        }
      case 'Tab':
        {
          closeMenu();
          return;
        }
      default:
        {
          // If the key is a letter, update the search term
          if (/^[a-zA-Z]{1}$/.test(event.key) &&
          // Bail if the user is holding a modifier key so they can use
          // keyboard shortcuts
          !event.metaKey && !event.ctrlKey) {
            event.preventDefault();
            updateDescendantSearchTerm(event.key);
            return;
          }
        }
    }
  }, [clickSelectedItem, closeMenu, goToFirstMenuItem, goToLastMenuItem, goToNextMenuItem, goToPreviousMenuItem, updateDescendantSearchTerm]);
}

export { SelectMenuListbox };
