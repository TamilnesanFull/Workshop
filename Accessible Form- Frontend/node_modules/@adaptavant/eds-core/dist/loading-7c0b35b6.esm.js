import { forwardRef, useId } from 'react';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { t as tw } from './tw-c6a9a210.esm.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import { B as Box } from './box-a5dda214.esm.js';
import { G as GrowYourBrandIcon } from './grow-your-brand-icon-b4a6e8da.esm.js';
import { S as SetmoreIcon } from './setmore-icon-0a46ffb4.esm.js';

const getLoadingStyles = ({
  size,
  tone
}) => ({
  root: tw`
		${loadingSizeStylesLookup[size]}
		relative
	`,
  icon: tw`
		${loadingIconSizeStylesLookup[size]}
		${tone ? loadingIconColorStylesLookup[tone] : 'fill-current'}
		absolute
		left-1/2
		top-1/2
		-translate-x-1/2
		-translate-y-1/2
	`,
  circle: tw`
		animate-loading-spin
		block
	`,
  'circle-path': tw`
		${tone ? loadingCircleColorStylesLookup[tone] : 'stroke-current'}
		animate-loading-dash
	`
});
const loadingCircleColorStylesLookup = {
  accentPrimary: tw`stroke-accent`,
  criticalPrimary: tw`stroke-critical`,
  onPrimary: tw`stroke-onPrimary`,
  'critical-onPrimary': tw`stroke-critical-onPrimary`,
  neutralPrimary: tw`stroke-primary`,
  inverse: tw`stroke-inverse`
};
const loadingIconColorStylesLookup = {
  accentPrimary: tw`fill-accent`,
  criticalPrimary: tw`fill-critical`,
  onPrimary: tw`fill-onPrimary`,
  'critical-onPrimary': tw`fill-critical-onPrimary`,
  neutralPrimary: tw`fill-primary`,
  inverse: tw`fill-inverse`
};
const loadingSizeStylesLookup = {
  '16': tw`h-4 w-4 stroke-2`,
  '20': tw`h-5 w-5 stroke-2`,
  '24': tw`h-6 w-6 stroke-2`,
  '48': tw`h-12 w-12 stroke-1`,
  '80': tw`h-20 w-20 stroke-1`
};
const loadingIconSizeStylesLookup = {
  '48': tw`h-5 w-5`,
  '80': tw`h-8 w-8`
};

function isIconVisible({
  size
}) {
  return size === '48' || size === '80';
}

const iconMap = {
  growYourBrandIcon: {
    icon: GrowYourBrandIcon
  },
  /* Possibility to not show icon in rare cases */
  none: {
    icon: null
  },
  setmoreIcon: {
    icon: SetmoreIcon
  }
};

/**
 * Loading
 *
 * @description
 */

const Loading = /*#__PURE__*/forwardRef(function Loading({
  className = '',
  classNames = {},
  size = '24',
  style = {},
  styles = {},
  tone = 'accentPrimary',
  icon = 'setmoreIcon',
  ...consumerProps
}, forwardedRef) {
  const id = useId();
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getLoadingStyles({
      size,
      tone
    })
  });
  const Icon = iconMap[icon]['icon'];
  return /*#__PURE__*/jsxs(Box, {
    ...consumerProps,
    "aria-hidden": "true",
    id: id,
    ref: forwardedRef,
    role: "img",
    ...styleProps('root'),
    children: [Icon && isIconVisible({
      size
    }) && /*#__PURE__*/jsx(Icon, {
      ...styleProps('icon')
    }), /*#__PURE__*/jsx("svg", {
      fill: "none",
      focusable: "false",
      preserveAspectRatio: "xMidYMid meet",
      viewBox: "0 0 50 50",
      ...styleProps('circle'),
      children: /*#__PURE__*/jsx("circle", {
        cx: "25",
        cy: "25",
        r: "20",
        strokeLinecap: "round",
        ...styleProps('circle-path')
      })
    })]
  });
});
Loading.displayName = 'Loading';

export { Loading as L };
