import { t as twMerge } from './tw-merge-91a8b6ee.esm.js';

/** @private */

/**
 * Enforces the presence of all style-related keys from StyleProps in
 * component props. Each key must exist, but their values can be any type,
 * including `undefined`.
 */

/**
 * Utility type for extracting the Parts type from a components props.
 *
 * @example
 * type ButtonParts = InferParts<ButtonProps>;
 */

/** @private */
function getStyleProps({
  className,
  classNames,
  style,
  styles,
  tw
}) {
  return (part, styleProps) => ({
    className: twMerge(tw === null || tw === void 0 ? void 0 : tw[part], part === 'root' ? className : classNames[part]) || undefined,
    style: {
      ...styleProps,
      ...(part === 'root' ? style : styles[part])
    }
  });
}
function useComponentStyleParts(args, components) {
  const styleProps = getStyleProps(args);
  return components.reduce((acc, component) => {
    acc[component] = styleProps(component);
    return acc;
  }, {});
}

export { getStyleProps as g, useComponentStyleParts as u };
