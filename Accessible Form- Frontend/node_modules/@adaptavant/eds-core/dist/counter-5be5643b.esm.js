import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { t as tw } from './tw-c6a9a210.esm.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import { Track } from './track-26dc4fe4.esm.js';

/**
 * We Style the counter root element to update the text (difference value) and the filled SVG circle (for progress).
 * This lookup is responsibile for:
 * - Hiding (visually from the UI) when isAlwaysVisible is false (by-default).
 * - Showing Counter in "primary" token from 50% to 80%.
 * - Showing Counter in "caution" token for 80% to 100%.
 * - Showing Counter in "critical" token when value exceeds maxValue.
 */
const getCounterStyles = ({
  value,
  maxValue,
  isAlwaysVisible
}) => ({
  root: tw`
		${counterStylesLookup({
    value,
    maxValue,
    isAlwaysVisible
  })}
		gap-1
		text-body-12
	`
});
const getCounterCircleStyles = () => ({
  root: tw`
		h-5
		transform
		-rotate-90
		w-5
	`,
  backCircle: tw`
		stroke-text-inverse-secondary #1
	`,
  // #1 we want background circle remain grey color (using text token for icon stroke)
  frontCircle: tw`
		stroke-current
	`
});
function counterStylesLookup({
  value,
  maxValue,
  isAlwaysVisible
}) {
  if (value > maxValue) {
    return tw`
			text-critical
		`;
  }
  if (value >= maxValue * 0.8) {
    return tw`
			text-caution
		`;
  }
  if (value >= maxValue * 0.5) {
    return tw`
			text-primary
    	`;
  }
  if (!isAlwaysVisible) {
    return tw`
			hidden
		`;
  }
  return tw`
	`;
}

/**
 * CounterCircle
 *
 * @description
 * CounterCircle is base primitive component used inside Counter, presents an SVG element with background and foreground circles with filled colors to indicate progress completion.
 */
function CounterCircle({
  className = '',
  classNames = {},
  style = {},
  styles = {},
  value,
  maxValue
}) {
  const percentage = Math.min(value / maxValue * 100, 100);
  const r = 8;
  const circ = 2 * Math.PI * r;
  const strokePercentage = (100 - percentage) * circ / 100;
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getCounterCircleStyles()
  });
  return /*#__PURE__*/jsxs("svg", {
    "aria-label": "Progress bar",
    "aria-valuemax": maxValue,
    "aria-valuemin": 0,
    "aria-valuenow": value,
    "aria-valuetext": `${percentage}%`,
    role: "progressbar",
    ...styleProps('root'),
    children: [/*#__PURE__*/jsx("circle", {
      ...styleProps('backCircle'),
      cx: 10,
      cy: 10,
      fill: "transparent",
      r: r,
      strokeWidth: 2
    }), /*#__PURE__*/jsx("circle", {
      ...styleProps('frontCircle'),
      cx: 10,
      cy: 10,
      fill: "transparent",
      r: r,
      strokeDasharray: circ,
      strokeDashoffset: percentage ? strokePercentage : 0,
      strokeWidth: 2
    })]
  });
}

/**
 * Counter
 *
 * @description
 * The Counter component is utilized within the Field to enable form inputs and textareas to exhibit a character limit user interface.
 * Displays the difference between the maximum value and the current value of the counter.
 * Additionally, it has SVG Circle to showcase progress completion, manages the logic to adjust the color of the Counter according to the progress completion
 */
function Counter({
  className = '',
  classNames = {},
  isAlwaysVisible = false,
  maxValue,
  style = {},
  styles = {},
  value,
  ...consumerProps
}) {
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getCounterStyles({
      value,
      maxValue,
      isAlwaysVisible
    })
  });
  return /*#__PURE__*/jsx(Track, {
    classNames: {
      center: 'grow-0'
    },
    railEnd: /*#__PURE__*/jsx(CounterCircle, {
      maxValue: maxValue,
      value: value
    }),
    ...styleProps('root'),
    ...consumerProps,
    children: maxValue - value
  });
}

export { Counter as C };
