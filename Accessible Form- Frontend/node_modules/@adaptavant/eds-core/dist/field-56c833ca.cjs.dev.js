'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var index = require('./index-3bdbdb42.cjs.dev.js');
var composeId = require('./compose-id-8f0cde18.cjs.dev.js');
var use_provided_or_generated_id = require('./use-provided-or-generated-id-2bfa8150.cjs.dev.js');
var context = require('./context-fb7f9049.cjs.dev.js');
var styles = require('./styles-3e350289.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
var stack = require('./stack-b8f38fa7.cjs.dev.js');
var label = require('./label-800ebb2b.cjs.dev.js');
var text = require('./text-b4d8b4ef.cjs.dev.js');
var counter = require('./counter-adac6bc5.cjs.dev.js');
var fieldErrorMessage = require('./field-error-message-009c1fca.cjs.dev.js');
var track = require('./track-1da464e0.cjs.dev.js');
require('./tw-merge-70bc959c.cjs.dev.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.dev.js');
require('./tw-cabb7e4c.cjs.dev.js');
require('./error-icon-e17bfc88.cjs.dev.js');
require('./styles-32c512c4.cjs.dev.js');
require('./align-child-to-text-b4992541.cjs.dev.js');

/**
 * Field
 *
 * @description
 * The Field component exposes the elements around form inputs, and an API to
 * compose them.
 */
function Field({
  children,
  className = '',
  classNames = {},
  controlId: maybeControlId,
  counter: counter$1,
  description,
  errorMessage,
  isDisabled = false,
  isRequired = false,
  label: label$1,
  labelVisibility = 'visible',
  secondaryLabel,
  size = 'standard',
  style = {},
  styles: styles$1 = {},
  ...consumerProps
}) {
  const {
    controlId,
    descriptionId,
    errorMessageId,
    labelId
  } = useFieldIds(maybeControlId);
  const parts = index.useComponentStyleParts({
    className,
    classNames,
    style,
    styles: styles$1,
    tw: styles.getFieldStyles({
      isDisabled,
      labelVisibility,
      size
    })
  }, ['root', 'label', 'secondaryLabel', 'description', 'errorTrack', 'errorIcon', 'errorMessage', 'counter']);
  const labelStyleProps = {
    ...parts.label,
    classNames: {
      secondaryLabel: parts.secondaryLabel.className
    },
    styles: {
      secondaryLabel: parts.secondaryLabel.style
    }
  };
  const fieldErrorMessageStyleProps = {
    ...parts.errorTrack,
    classNames: {
      errorIcon: parts.errorIcon.className,
      errorMessage: parts.errorMessage.className
    },
    styles: {
      errorIcon: parts.errorIcon.style,
      errorMessage: parts.errorMessage.style
    }
  };
  const labelRef = React.useRef(null);
  const showCounterOrErrorMessage = Boolean(errorMessage || counter$1);
  return /*#__PURE__*/jsxRuntime.jsx(context.FieldContextProvider, {
    value: {
      controlId,
      description,
      descriptionId,
      errorMessage,
      errorMessageId,
      isDisabled,
      isInvalid: Boolean(errorMessage),
      isRequired,
      labelId,
      labelRef,
      label: label$1,
      size,
      variant: 'standard'
    },
    children: /*#__PURE__*/jsxRuntime.jsxs(stack.Stack, {
      ...consumerProps,
      ...parts.root,
      children: [/*#__PURE__*/jsxRuntime.jsx(label.Label, {
        htmlFor: controlId,
        id: labelId,
        labelVisibility: labelVisibility,
        ref: labelRef,
        secondaryLabel: secondaryLabel,
        size: size,
        ...labelStyleProps,
        children: label$1
      }), description ? /*#__PURE__*/jsxRuntime.jsx(text.Text, {
        id: descriptionId,
        ...parts.description,
        children: description
      }) : null, children, showCounterOrErrorMessage ? /*#__PURE__*/jsxRuntime.jsx(track.Track, {
        className: "gap-2",
        railEnd: counter$1 ? /*#__PURE__*/jsxRuntime.jsx(counter.Counter, {
          ...counter$1,
          ...parts.counter
        }) : null,
        verticalAlign: "top",
        children: errorMessage ? /*#__PURE__*/jsxRuntime.jsx(fieldErrorMessage.FieldErrorMessage, {
          id: errorMessageId,
          isDisabled: isDisabled,
          size: size,
          ...fieldErrorMessageStyleProps,
          children: errorMessage
        }) : null
      }) : null]
    })
  });
}
Field.displayName = 'Field';
function useFieldIds(id) {
  const controlId = use_provided_or_generated_id.useProvidedOrGeneratedId(id);
  return {
    controlId,
    descriptionId: composeId.composeId(controlId, 'description'),
    errorMessageId: composeId.composeId(controlId, 'error-message'),
    labelId: composeId.composeId(controlId, 'label')
  };
}

exports.Field = Field;
exports.useFieldIds = useFieldIds;
