'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var jsxRuntime = require('react/jsx-runtime');

function useTooltipVisibility() {
  const [visibleTooltipId, setVisibleTooltipId] = React.useState(undefined);
  const showTooltip = React.useCallback(id => {
    setVisibleTooltipId(id);
  }, []);
  const hideTooltip = React.useCallback(id => {
    /**
     * Since user interaction with tooltip can be faster then the timeout,
     * we need to check if id of the tooltip that we want to hide is the same
     * as the one that user is hovering right now. The issue mainly occurs
     * when user hover elements with tooltip very fast which are attached to each other.
     * @Commented by: mateusz-kopec-anywhere
     */
    setVisibleTooltipId(prevVisibleTooltipId => prevVisibleTooltipId === id ? undefined : prevVisibleTooltipId);
  }, []);
  return {
    visibleTooltipId,
    showTooltip,
    hideTooltip
  };
}
const TooltipContext = /*#__PURE__*/React.createContext(undefined);
function TooltipProvider({
  children
}) {
  const context = useTooltipVisibility();
  return /*#__PURE__*/jsxRuntime.jsx(TooltipContext.Provider, {
    value: context,
    children: children
  });
}
function useTooltip() {
  const context = React.useContext(TooltipContext);
  if (context === undefined) {
    throw new Error('useTooltip must be used within a TooltipProvider');
  }
  return context;
}

exports.TooltipProvider = TooltipProvider;
exports.useTooltip = useTooltip;
