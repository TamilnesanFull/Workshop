'use strict';

var React = require('react');
var radioControlIcon = require('./radio-control-icon-9196869f.cjs.dev.js');
var index = require('./index-3bdbdb42.cjs.dev.js');
var checkbox_primitive = require('./checkbox-primitive-f4324c66.cjs.dev.js');
var tw = require('./tw-cabb7e4c.cjs.dev.js');
var styles = require('./styles-3e350289.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
var box = require('./box-88b49271.cjs.dev.js');
var align_child_to_text = require('./align-child-to-text-b4992541.cjs.dev.js');

// ------------------------------ Radio ----------------------------------------

const getRadioStyles = ({
  isDisabled,
  size
}) => ({
  root: tw.tw`
	`,
  radioPrimitiveRoot: tw.tw`
	`,
  radioPrimitiveInput: tw.tw`
	`,
  radioPrimitiveControl: tw.tw`
	`,
  radioPrimitiveIcon: tw.tw`
	`,
  label: tw.tw`
		${isDisabled ? 'text-disabled' : ''}
		${styles.typography[size]}
		gap-2
		group
	`,
  descriptionTrack: tw.tw`
		gap-2
	`,
  description: tw.tw`
		${styles.typography[size]}
		${isDisabled ? 'text-disabled' : 'text-secondary'}
	`,
  spacer: tw.tw`
		${iconSizeMap[size]}
	`
});
const iconSizeMap = {
  large: tw.tw`
		h-4
		w-4
	`,
  standard: tw.tw`
		h-4
		w-4
	`
};

// -------------------------- RadioPrimitive -----------------------------------

const getRadioPrimitiveStyles = ({
  size
}) => ({
  root: tw.tw`
	`,
  input: tw.tw`
		peer
		sr-only
	`,
  control: tw.tw`
		${disabledStyles}
		${iconSizeMap[size]}
		${styles.typography[size]}
		[--visibility:hidden]
		[transition-timing-function:ease]
		bg-canvas
		border
		border-input
		duration-300
		group-hover:border-input-hover
		hover:border-input-hover
		inline-flex
		items-center
		justify-center
		p-0.5
		peer-checked:[--visibility:visible]
		peer-checked:bg-inverse
		peer-checked:border-input-active
		peer-checked:hover:border-input-active-hover
		peer-checked:text-inverse
		peer-focus-visible:focus-ring
		rounded-full
		text-transparent
		transition-colors
	`,
  icon: tw.tw`
		[visibility:--visibility]
		fill-current
		h-full
		w-full
	`
});
const disabledStyles = tw.tw`
	peer-aria-disabled:bg-neutral-disabled
	peer-aria-disabled:border-input-disabled
	peer-aria-disabled:high-contrast:border-dotted
	peer-aria-disabled:hover:border-input-disabled
	peer-aria-disabled:peer-checked:text-disabled
	peer-aria-disabled:text-transparent
`;

/**
 * Radio Primitive
 *
 * @description
 * Radio Primitive can be used in places where the entire layout (like card) is to be selected
 * If multiple choices are valid, consider using a `Checkbox` instead.
 */
const RadioPrimitive = /*#__PURE__*/React.forwardRef(function RadioPrimitive({
  checked,
  className = '',
  classNames = {},
  id,
  isDisabled = false,
  name,
  onBlur,
  onChange,
  onClick,
  size = 'standard',
  style = {},
  styles = {},
  ...consumerProps
}, forwardedRef) {
  const styleProps = index.getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getRadioPrimitiveStyles({
      isDisabled,
      size
    })
  });
  const handleOnChange = checkbox_primitive.useCancellableHandler(onChange, isDisabled);
  const handleOnClick = checkbox_primitive.useCancellableHandler(onClick, isDisabled);
  return /*#__PURE__*/jsxRuntime.jsxs(align_child_to_text.AlignChildToText, {
    ...styleProps('root'),
    children: [/*#__PURE__*/jsxRuntime.jsx(box.Box, {
      ...consumerProps,
      "aria-disabled": isDisabled || undefined,
      as: "input",
      checked: checked,
      id: id,
      name: name,
      onBlur: onBlur,
      onChange: handleOnChange,
      onClick: handleOnClick,
      ref: forwardedRef,
      type: "radio",
      ...styleProps('input')
    }), /*#__PURE__*/jsxRuntime.jsx(box.Box, {
      as: "span",
      ...styleProps('control'),
      children: /*#__PURE__*/jsxRuntime.jsx(radioControlIcon.RadioControlIcon, {
        ...styleProps('icon')
      })
    })]
  });
});

exports.RadioPrimitive = RadioPrimitive;
exports.getRadioStyles = getRadioStyles;
