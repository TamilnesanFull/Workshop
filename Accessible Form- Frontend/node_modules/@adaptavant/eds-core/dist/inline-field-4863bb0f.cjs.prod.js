'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var context = require('./context-008fcad0.cjs.prod.js');
var field = require('./field-8fcfe704.cjs.prod.js');
var index = require('./index-7955fb8e.cjs.prod.js');
var tw = require('./tw-9929267e.cjs.prod.js');
var jsxRuntime = require('react/jsx-runtime');
var stack = require('./stack-fa75d919.cjs.prod.js');
var label = require('./label-f7aa50fa.cjs.prod.js');
var counter = require('./counter-5ac13ec5.cjs.prod.js');
var fieldErrorMessage = require('./field-error-message-deff68ec.cjs.prod.js');
var track = require('./track-f65e0bbd.cjs.prod.js');
require('./tw-merge-885aa7a8.cjs.prod.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.prod.js');
require('./styles-3786e407.cjs.prod.js');
require('./text-a5ab226e.cjs.prod.js');
require('./error-icon-892410c8.cjs.prod.js');
require('./styles-30814c9d.cjs.prod.js');
require('./align-child-to-text-c75908d4.cjs.prod.js');

const getInlineFieldStyles = () => ({
  root: tw.tw`
		gap-0.5
		items-stretch
		[&:has(textarea)_label]:[--padding:theme(spacing.2)] #1
	`,
  // #1 when there is a textarea inside the inline field, we need to add more padding to the label so it aligns with the text in textarea.
  errorIcon: tw.tw`
	`,
  errorMessage: tw.tw`
	`,
  errorTrack: tw.tw`
	`,
  inputWrapper: tw.tw`
		items-stretch
		gap-1 #2
	`,
  // #2 to create spacing between (input or textarea) and (error message or counter) elements
  label: tw.tw`
	    font-strong
		py-[var(--padding,theme(spacing[1.5]))]
		text-secondary		
	`,
  labelWrapper: tw.tw`
	`,
  secondaryLabel: tw.tw`
	`,
  counter: tw.tw``
});

/**
 * InlineField
 *
 * @description
 * The InlineField component exposes the elements around form inputs, and an API
 * to compose them.
 */
function InlineField({
  children,
  className = '',
  classNames = {},
  errorMessage,
  id: idProp,
  isDisabled = false,
  isRequired = false,
  label: label$1,
  labelVisibility = 'visible',
  secondaryLabel,
  counter: counter$1,
  style = {},
  styles = {},
  ...consumerProps
}) {
  const {
    controlId,
    descriptionId,
    errorMessageId,
    labelId
  } = field.useFieldIds(idProp);
  const parts = index.useComponentStyleParts({
    className,
    classNames,
    style,
    styles,
    tw: getInlineFieldStyles()
  }, ['root', 'description', 'errorIcon', 'errorMessage', 'errorTrack', 'inputWrapper', 'labelWrapper', 'label', 'secondaryLabel', 'counter']);
  const labelStyleProps = {
    ...parts.label,
    classNames: {
      secondaryLabel: parts.secondaryLabel.className
    },
    styles: {
      secondaryLabel: parts.secondaryLabel.style
    }
  };
  const fieldErrorMessageStyleProps = {
    ...parts.errorTrack,
    classNames: {
      errorIcon: parts.errorIcon.className,
      errorMessage: parts.errorMessage.className
    },
    styles: {
      errorIcon: parts.errorIcon.style,
      errorMessage: parts.errorMessage.style
    }
  };
  const showCounterOrErrorMessage = Boolean(errorMessage || counter$1);
  const labelRef = React.useRef(null);
  return /*#__PURE__*/jsxRuntime.jsx(context.FieldContextProvider, {
    value: {
      controlId,
      descriptionId,
      errorMessage,
      errorMessageId,
      isDisabled,
      isInvalid: Boolean(errorMessage),
      isRequired,
      labelId,
      labelRef,
      label: label$1,
      size: 'standard',
      variant: 'subtle'
    },
    children: /*#__PURE__*/jsxRuntime.jsx(track.Track, {
      ...consumerProps,
      ...parts.root,
      railStart: /*#__PURE__*/jsxRuntime.jsx(stack.Stack, {
        ...parts.labelWrapper,
        children: /*#__PURE__*/jsxRuntime.jsx(label.Label, {
          htmlFor: controlId,
          id: labelId,
          labelVisibility: labelVisibility,
          ref: labelRef,
          secondaryLabel: secondaryLabel,
          ...labelStyleProps,
          children: label$1
        })
      }),
      children: /*#__PURE__*/jsxRuntime.jsxs(stack.Stack, {
        ...parts.inputWrapper,
        children: [children, showCounterOrErrorMessage ? /*#__PURE__*/jsxRuntime.jsx(track.Track, {
          className: "gap-2",
          railEnd: counter$1 ? /*#__PURE__*/jsxRuntime.jsx(counter.Counter, {
            ...counter$1,
            ...parts.counter
          }) : null,
          verticalAlign: "top",
          children: errorMessage ? /*#__PURE__*/jsxRuntime.jsx(fieldErrorMessage.FieldErrorMessage, {
            id: errorMessageId,
            isDisabled: isDisabled,
            ...fieldErrorMessageStyleProps,
            children: errorMessage
          }) : null
        }) : null]
      })
    })
  });
}
InlineField.displayName = 'InlineField';

exports.InlineField = InlineField;
