import { type ButtonProps } from "../../../dist/adaptavant-eds-core.cjs.js";
import { type StyleProps } from "../../shared/style-utils/index.js";
import { type ModalWrapperClassNames } from "./components/modal-wrapper/types.js";
type Parts = 'root';
export type GetCropModalStyles = () => Partial<Record<Parts, string>>;
export type OnFilesChange = (files: File[]) => void;
export type ErrorLocation = 'REMOTE_IMAGE_FETCHING' | 'PROCESS_LOCAL_FILE' | 'RESIZE_IMAGE' | 'VALIDATE_IMAGE_TYPE' | 'SAVE_CHANGES';
export type ErrorDetails = {
    location: ErrorLocation;
    message: string;
    stack?: string;
    name?: string;
    originalError?: unknown;
};
export type OnError = (errorDetails: ErrorDetails) => void;
export interface ParsedImageData {
    originalCropDimensions: CropDimensions | null;
    originalFullUrl: ImageUrl;
    originalUrl: ImageUrl;
}
export interface ImageMetadata extends ParsedImageData {
    hasCropChanged: boolean;
    isNewlyUploaded: boolean;
    originalBlob: Blob | null;
    originalBlobUrl: string | null;
    processedBlob: Blob | null;
    processedBlobUrl: string | null;
    updatedCropDimensions: CropDimensions | null;
}
/**
 * Image Processing and Metadata Interfaces
 */
export type CropDimensions = {
    top: number;
    left: number;
    width: number;
    height: number;
};
/**
 * API and Data Interfaces
 */
export type GoogleStorageApiResponse = {
    upload_url: string;
    formParams: Record<string, string>;
};
export type ImageUrl = string | null | undefined;
export type SendFormDataRequest = (url: string, file: File, formParams: Record<string, string>) => Promise<string>;
export type FetchInitialImageUrl = (url: string) => Promise<Blob>;
export type FetchGoogleStorageUploadUrl = (accessToken: string, fileName: string) => Promise<GoogleStorageApiResponse>;
export type OnSuccessfulUpload = (url: string) => void;
export type ApiOptions = {
    uploadUrl: string;
    getAccessToken: () => Promise<string>;
    sendFormDataRequest?: SendFormDataRequest;
    fetchInitialImageUrl?: FetchInitialImageUrl;
    fetchGoogleStorageUploadUrl?: FetchGoogleStorageUploadUrl;
};
export type ImageProcessingOptions = {
    maxWidth?: number;
    maxHeight?: number;
    enableResize?: boolean;
    maxFileSizeMB?: number;
    enableCompression?: boolean;
    compressionQuality?: number;
    allowedMimeTypes?: string[];
};
/**
 * UI Configuration Interfaces
 */
export type CropAreaTranslations = {
    zoomInButtonLabel?: string;
    zoomOutButtonLabel?: string;
    uploadNewButtonLabel?: string;
};
export type ModalWrapperTranslations = {
    title: string;
    subtitle: string;
    saveButtonLabel: string;
    cancelButtonLabel: string;
    closeModalButtonLabel: string;
};
export type ErrorTranslations = {
    fileUploadError?: string;
    androidFileReadError?: string;
    fileTypeMismatchError?: string;
    fetchIncomingImageError?: string;
    localFileProcessingError?: string;
    fileSizeExceedsLimitError?: string;
};
export type DropAreaTranslations = {
    bottomLinkUrl?: string;
    bottomLinkText?: string;
    bottomTextPrefix?: string;
    bottomTextSuffix?: string;
    uploadImageButtonLabel: string;
};
export type GeneralOptions = {
    canvasWidth?: number;
    canvasHeight?: number;
    maxScaleFactor?: number;
    totalSidePadding?: number;
    hideZoomSliderOnMobile?: boolean;
    saveButtonVariant?: ButtonProps['variant'];
};
export type CropViewBoxOptions = {
    width: number;
    isCircle?: boolean;
    aspectRatio?: number;
};
export type CropModalClassNames = ModalWrapperClassNames;
/**
 * Main Component Props
 */
export type CropModalProps = Partial<StyleProps<Parts>> & {
    cropAreaTranslations?: CropAreaTranslations;
    cropViewBoxOptions: CropViewBoxOptions;
    dropAreaTranslations?: DropAreaTranslations;
    errorTranslations?: ErrorTranslations;
    generalOptions?: GeneralOptions;
    imageProcessingOptions?: ImageProcessingOptions;
    imageUrl: ImageUrl;
    isOpen: boolean;
    modalWrapperTranslations: ModalWrapperTranslations;
    onCancel: () => void;
    onClose: () => void;
    onError?: OnError;
    onSuccessfulUpload: (url: string) => void;
    apiOptions: ApiOptions;
    classNames?: CropModalClassNames;
};
export {};
