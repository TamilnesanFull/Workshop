import type { IconProps, ModalHeaderProps } from "../../../dist/adaptavant-eds-core.cjs.js";
import type { ReactNode } from 'react';
import { type ModalProps } from "../../experimental/index.js";
import type { StyleProps } from "../../shared/style-utils/index.js";
type Parts = 'root' | 'title' | 'modalHeader' | 'modalContent' | 'modalHeaderContent' | 'modalWrapper' | 'content' | 'optionStack' | 'optionButton';
export type GetShareModalStylesType = () => Partial<Record<Parts, string>>;
export type ShareModalProps = Partial<StyleProps<Parts>> & Pick<ModalProps, 'closeOnEsc' | 'closeOnOverlayClick' | 'mobileFriendly' | 'onClose' | 'onEscPress' | 'onOverlayClick' | 'open' | 'togglePoint' | 'size'> & Pick<ModalHeaderProps, 'closeButtonProps'> & {
    /**
     * Props (label and src) of the image to be displayed next to the heading.
     * If not provided, the image won't be rendered.
     */
    headingImageProps?: {
        label: string;
        src: string;
    };
    /** Link to be shared */
    link: string;
    /** Callback for when a share option is selected. */
    onShareOptionSelect?: (selectionOption: ShareModalOption) => void;
    /**
     * Share options array.
     * If no share options are passed, the default share options will be displayed.
     */
    shareOptions?: Array<ShareModalOption>;
    /**
     * Translations object for the ShareModal.
     * `title` keys is required
     * `content` and `optionLabels` are optional. If optionLabels are undefined then shareOption should be provided.
     * All keys in optionLabels are optional, a default option will be rendered only if a corresponding key is provided.
     */
    translations: {
        title: string;
        content?: string;
        optionLabels?: OptionLabelsTranslationsType;
    };
};
export type OptionLabelsTranslationsType = {
    copyLabel?: string;
    emailLabel?: string;
    facebookLabel?: string;
    messengerLabel?: string;
    whatsappLabel?: string;
};
export type ShareModalOption = {
    id: string;
    label: string;
    icon?: (props: IconProps) => ReactNode;
    onClick: () => void;
};
export {};
