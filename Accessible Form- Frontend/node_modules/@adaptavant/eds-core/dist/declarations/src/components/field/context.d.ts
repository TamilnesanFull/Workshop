import { type FieldProps } from "./types.js";
export type FieldContextProps = Pick<FieldProps, 'description' | 'errorMessage'> & Required<Pick<FieldProps, 'size' | 'isDisabled' | 'isRequired'>> & {
    /** ID for the form control. */
    controlId: string;
    /** ID for the description. */
    descriptionId: string;
    /** ID for the error message. */
    errorMessageId: string;
    /** ID for the label. */
    labelId: string;
    /** If true, the invalid state will be rendered. */
    isInvalid: boolean;
    /** The default visual style of the nested input. */
    variant: 'standard' | 'subtle';
    /** Ref Object for Label Element used inside Field */
    labelRef: React.RefObject<HTMLLabelElement>;
    /** Label for the field */
    label: FieldProps['label'];
};
export declare const FieldContextProvider: import("react").Provider<FieldContextProps | undefined>;
export declare function useFieldContext(): FieldContextProps;
/**
 * Returns aria attributes for an input based on context and optional props.
 */
export declare function useInputA11yProps(props: {
    id?: string;
    isDisabled?: boolean;
    isInvalid?: boolean;
    isRequired?: boolean;
}): {
    'aria-describedby': undefined;
    'aria-disabled': true | undefined;
    'aria-invalid': true | undefined;
    'aria-required': true | undefined;
    readOnly: true | undefined;
    id: string;
};
