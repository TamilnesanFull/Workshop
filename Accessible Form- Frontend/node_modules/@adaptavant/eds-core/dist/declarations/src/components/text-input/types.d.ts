import { type StyleProps } from "../../shared/style-utils/index.js";
import { type FieldProps } from "../field/index.js";
export type TextInputParts = 'root' | 'adornmentStart' | 'adornmentEnd' | 'focusIndicator';
type NativeInputProps = React.InputHTMLAttributes<HTMLInputElement>;
type SharedInputProps = Pick<NativeInputProps, 'aria-activedescendant' | 'aria-autocomplete' | 'aria-controls' | 'aria-expanded' | 'aria-haspopup' | 'autoComplete' | 'autoCorrect' | 'autoFocus' | 'defaultValue' | 'disabled' | 'inputMode' | 'name' | 'onBlur' | 'onChange' | 'onFocus' | 'onKeyDown' | 'onPaste' | 'pattern' | 'placeholder' | 'role' | 'spellCheck' | 'value'> & {
    /**
     * The ref to the wrapper FocusContainer element.
     */
    focusContainerRef?: React.Ref<HTMLDivElement>;
    /** The type of the input. */
    type?: 'email' | 'password' | 'search' | 'tel' | 'text' | 'url';
};
export type TextInputProps = Partial<StyleProps<TextInputParts>> & SharedInputProps & {
    /** Slot to render start adornment. */
    adornmentStart?: React.ReactNode;
    /** Slot to render end adornment. */
    adornmentEnd?: React.ReactNode;
};
export type GetTextInputStyles = (props: Required<Pick<FieldProps, 'size' | 'isDisabled'>> & {
    hasAdornmentStart: boolean;
    hasAdornmentEnd: boolean;
}) => Partial<Record<TextInputParts, string>>;
type TextInputPrimitiveParts = 'root';
export type TextInputPrimitiveProps = Partial<StyleProps<TextInputPrimitiveParts>> & SharedInputProps & Pick<NativeInputProps, 'aria-disabled' | 'id'> & Required<Pick<FieldProps, 'size'>>;
export type GetTextInputPrimitiveStyles = (props: Required<Pick<FieldProps, 'size'>>) => Partial<Record<TextInputPrimitiveParts, string>>;
export {};
