import { type StyleProps } from "../../shared/style-utils/index.js";
import { type BrandStyles } from "../../shared/types.js";
import { type ButtonProps } from "../button/index.js";
import { type IconProps } from "../icon/index.js";
type Parts = 'root' | 'labelTrack' | 'label' | 'iconStart' | 'iconEnd';
export type ButtonLinkProps = Pick<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'children' | 'onBlur' | 'onFocus' | 'rel' | 'target'> & {
    /** The URL that the hyperlink points to. */
    href: string;
    /** The icon to display before the buttons children. */
    iconStart?: (props: IconProps) => React.ReactNode;
    /** The icon to display after the buttons children. */
    iconEnd?: (props: IconProps) => React.ReactNode;
    /** The size of the link. */
    size?: Extract<ButtonProps['size'], 'standard' | 'small' | 'large'>;
    /** The variant of the link. */
    variant?: Extract<ButtonProps['variant'], 'accentPrimary' | 'accentSecondary' | 'neutralPrimary' | 'neutralSecondary' | 'neutralSecondaryIntense' | 'neutralTertiary'>;
} & Partial<StyleProps<Parts>>;
export type GetButtonLinkStyles<T> = (props: Pick<BrandStyles, 'buttonRadius'> & Required<Pick<ButtonLinkProps, 'size' | 'variant'>>) => Partial<Record<Parts, T>>;
export {};
