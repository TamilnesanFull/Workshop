import { type StyleProps } from "../../shared/style-utils/index.js";
type CheckboxParts = 'root' | 'checkboxPrimitiveRoot' | 'checkboxPrimitiveInput' | 'checkboxPrimitiveControl' | 'checkboxPrimitiveIcon' | 'label' | 'descriptionTrack' | 'description' | 'spacer' | 'errorTrack' | 'errorIcon' | 'errorMessage';
type NativeCheckboxProps = React.InputHTMLAttributes<HTMLInputElement>;
type SharedCheckboxProps = Pick<NativeCheckboxProps, 'aria-describedby' | 'checked' | 'id' | 'name' | 'onBlur' | 'onClick' | 'onChange'> & {
    /**
     * Whether checkbox in an indeterminate state or not.
     * Designed for scenarios like header groups where some, but not all, options are selected.
     */
    indeterminate?: boolean;
    /**
     * When true, the checkbox will be announced as disabled to screen-readers and
     * styled to signify this.
     * @default false
     */
    isDisabled?: boolean;
    /** The size of the checkbox.
     * @default standard
     */
    size?: 'standard' | 'large';
    /** The value of the checkbox. */
    value?: string;
};
export type CheckboxProps = Partial<StyleProps<CheckboxParts>> & SharedCheckboxProps & {
    /**  Description of the checkbox. */
    description?: React.ReactNode;
    /**
     * Message to show when the field is invalid.
     * When an error message is present, the checkbox will be announced as
     * invalid to screen-readers and styled to signify this.
     */
    errorMessage?: React.ReactNode;
    /** Label for the checkbox. */
    label: React.ReactNode;
};
export type GetCheckboxStyles = (props: Required<Pick<CheckboxProps, 'isDisabled' | 'size'>> & {
    isInvalid: boolean;
}) => Partial<Record<CheckboxParts, string>>;
type CheckboxPrimitiveParts = 'root' | 'input' | 'control' | 'icon';
export type CheckboxPrimitiveProps = Partial<StyleProps<CheckboxPrimitiveParts>> & SharedCheckboxProps & {
    /**
     * When true, the checkbox will be announced as invalid to screen-readers and
     * styled to signify this.
     */
    isInvalid?: boolean;
};
export type CheckboxPrimitiveStyles = (props: Required<Pick<CheckboxPrimitiveProps, 'isDisabled' | 'size' | 'isInvalid'>>) => Partial<Record<CheckboxPrimitiveParts, string>>;
export {};
