import { type StyleProps } from "../../shared/style-utils/index.js";
import { type ForwardRefComponent } from "../../shared/types.js";
import { type ColorSchemeTokens, type GlobalTokens } from "../../tokens/index.js";
type Parts = 'root';
export type TextProps = Partial<StyleProps<Parts>> & {
    /** The content of the component. */
    children: React.ReactNode;
    /**
     * The weight of the text.
     *
     * @deprecated please use font-weight utility classes instead.
     * "font-regular" | "font-strong" | "font-stronger"
     */
    fontWeight?: keyof GlobalTokens['typography']['fontWeight'];
    /**
     * Clamp the text to a specific number of lines.
     *
     * @deprecated please use line-clamp utility classes instead.
     * @see https://tailwindcss.com/docs/line-clamp
     */
    lineClamp?: '1' | '2' | '3' | '4' | true;
    /**
     * When enabled, numbers will be the same width. Similar to a monospaced font.
     *
     * @deprecated please use tabular-nums utility class instead.
     * @see https://tailwindcss.com/docs/font-variant-numeric#tabular-figures
     */
    tabularNumbers?: boolean;
    /**
     * The horizontal alignment.
     *
     * @deprecated please use text-align utility classes instead.
     * @see https://tailwindcss.com/docs/text-align
     */
    textAlign?: 'start' | 'center' | 'end';
    /**
     * Transform the text casing.
     *
     * @deprecated please use text-transform utility classes instead.
     * @see https://tailwindcss.com/docs/text-transform
     */
    textTransform?: 'capitalize' | 'lowercase' | 'none' | 'uppercase';
    /**
     * The color of the text.
     *
     * @deprecated please use text color utility classes instead.
     */
    tone?: keyof ColorSchemeTokens['text'];
    /**
     * The typographic styles of the text.
     *
     * @deprecated please use text utility classes instead.
     */
    typography?: 'body.1' | 'body.2' | 'body.3' | 'body.4' | 'body.5' | 'body.6' | 'heading.1' | 'heading.2' | 'heading.3' | 'heading.4' | 'heading.5' | 'heading.6';
};
export type GetTextStyles = (props: Pick<TextProps, 'fontWeight' | 'lineClamp' | 'tabularNumbers' | 'textAlign' | 'textTransform' | 'tone' | 'typography'>) => Partial<Record<Parts, string>>;
export type PolymorphicText = ForwardRefComponent<'span', TextProps>;
export type EmojiProps = React.HTMLAttributes<HTMLSpanElement> & {
    /** Label used to describe the symbol that will be announced to screen readers. */
    label?: string;
    /** Emoji symbol. */
    children: string;
};
export {};
