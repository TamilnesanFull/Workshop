import { type CounterObjProps } from "../../shared/counter/types.js";
import { type StyleProps } from "../../shared/style-utils/index.js";
import { type LabelProps } from "../label/index.js";
type Parts = 'root' | 'label' | 'secondaryLabel' | 'description' | 'errorTrack' | 'errorIcon' | 'errorMessage' | 'counter';
export type FieldProps = Partial<StyleProps<Parts>> & Omit<LabelProps, 'children'> & {
    /** Input component. */
    children: React.ReactNode;
    /** Provide additional information that will aid user input. */
    description?: React.ReactNode;
    /** Message to show when the field is invalid. */
    errorMessage?: React.ReactNode;
    /**
     * Specifies the unique identifier for the form control within the
     * component.
     *
     * This ID is used to associate the input, textarea, select, button etc with
     * its label or other descriptive elements.
     */
    controlId?: string;
    /**
     * Whether the field is disabled.
     * @default false
     */
    isDisabled?: boolean;
    /**
     * Whether user input is required on the field before form submission.
     * @default false
     */
    isRequired?: boolean;
    /** Label for the field. */
    label: React.ReactNode;
    /**
     * Counter object containing maxValue, value and isAlwaysVisible.
     * "maxValue:" maximum value the counter can reach.
     * "value:" current value of the counter.
     * isAlwaysVisible: whether the counter should always be visible.
     * @example { value: 10, maxValue: 15, isAlwaysVisible: true }
     */
    counter?: CounterObjProps;
};
export type GetFieldStyles = (props: Required<Pick<FieldProps, 'isDisabled' | 'labelVisibility' | 'size'>>) => Partial<Record<Parts, string>>;
export {};
