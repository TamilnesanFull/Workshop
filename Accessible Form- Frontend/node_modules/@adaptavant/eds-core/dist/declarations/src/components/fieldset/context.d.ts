import { type FieldsetProps } from "./types.js";
type FieldsetContextType = Pick<FieldsetProps, 'isDisabled' | 'isRequired' | 'description' | 'errorMessage'> & {
    /** Unique identifier for the description. */
    descriptionId: string;
    /** Unique identifier for the error message. */
    errorMessageId: string;
    /** Whether the fieldset has a error message associated with it or not. */
    isInvalid: boolean;
};
export declare const FieldsetContextProvider: import("react").Provider<FieldsetContextType | undefined>;
/**
 * State for a control input based on context and optional props.
 * Returns object with merged context and prop values for each property.
 */
export declare function useControlInputState(props: Required<Pick<FieldsetProps, 'isDisabled' | 'isRequired'>> & {
    isInvalid: boolean;
}): {
    isDisabled: boolean;
    isInvalid: boolean;
    isRequired: boolean;
};
/**
 * Returns aria attributes for a control input based on context and
 * optional props.
 */
export declare function useControlA11yProps(props: {
    isDisabled?: boolean;
    isInvalid?: boolean;
    isRequired?: boolean;
}): {
    'aria-describedby': undefined;
    'aria-disabled': true | undefined;
    'aria-invalid': true | undefined;
    'aria-required': true | undefined;
} | undefined;
export {};
