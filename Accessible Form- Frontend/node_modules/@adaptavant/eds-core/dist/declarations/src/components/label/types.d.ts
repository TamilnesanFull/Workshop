import { type StyleProps } from "../../shared/style-utils/index.js";
import { type ForwardRefComponent } from "../../shared/types.js";
type Parts = 'root' | 'secondaryLabel';
export type LabelProps = Partial<StyleProps<Parts>> & {
    /** Label for the field. */
    children: React.ReactNode;
    /**
     * A label must always be provided for assistive technology, but you may
     * hide it from sighted users when the intent can be inferred from context.
     * @default 'visible'
     */
    labelVisibility?: 'hidden' | 'visible';
    /** Additional context, typically used to indicate that the field is optional. */
    secondaryLabel?: React.ReactNode;
    /**
     * The size of the field.
     * @default 'standard'
     */
    size?: 'standard' | 'large';
};
export type PolymorphicLabel = ForwardRefComponent<'label', LabelProps>;
export type GetLabelStyles = (props: Required<Pick<LabelProps, 'labelVisibility' | 'size'>>) => Partial<Record<Parts, string>>;
export {};
