import { type StyleProps } from "../../shared/style-utils/index.js";
import { type BrandStyles } from "../../shared/types.js";
import { type IconProps } from "../icon/index.js";
export type IconButtonTranslations = Record<'loadingLabel', string>;
type Parts = 'root' | 'icon' | 'loadingWrapper' | 'loading';
export type IconButtonProps = Pick<React.ButtonHTMLAttributes<HTMLButtonElement>, 'aria-controls' | 'aria-expanded' | 'aria-haspopup' | 'id' | 'onClick' | 'type'> & {
    /**
     * An aria-label is required to describe the component to assistive tech users.
     * Describe the action or effect that will take place when the button is clicked.
     */
    'aria-label': string;
    /** The icon to display inside the icon button. */
    icon: (props: IconProps) => React.ReactNode;
    /** When true, the icon button will be announced as disabled to screen-readers only. */
    isDisabled?: boolean;
    /** When true, the icon button will display a loading indicator. */
    isLoading?: boolean;
    /** When true, the icon button will have aria-pressed set and be styled visually pressed. */
    isPressed?: boolean;
    /** Text to read out to assistive technologies when icon button is loading. */
    loadingLabel?: string;
    /** The size of the button. */
    size?: 'large' | 'standard' | 'small';
    /** The variant of the button. */
    variant?: 'accentPrimary' | 'accentSecondary' | 'criticalPrimary' | 'criticalTertiary' | 'neutralPrimary' | 'neutralSecondary' | 'neutralSecondaryIntense' | 'neutralTertiary';
} & Partial<StyleProps<Parts>>;
export type GetIconButtonStyles = (props: Pick<BrandStyles, 'buttonRadius'> & Required<Pick<IconButtonProps, 'isDisabled' | 'isLoading' | 'isPressed' | 'size' | 'variant'>>) => Partial<Record<Parts, string>>;
export {};
