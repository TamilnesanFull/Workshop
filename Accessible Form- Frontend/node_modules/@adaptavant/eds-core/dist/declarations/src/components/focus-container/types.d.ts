import { type StyleProps } from "../../shared/style-utils/index.js";
type Parts = 'root' | 'center' | 'adornmentEnd' | 'adornmentStart' | 'control' | 'focusIndicator';
export type FocusContainerProps = Partial<StyleProps<Parts>> & {
    /** Slot to render end adornment. */
    adornmentEnd?: React.ReactNode;
    /** Slot to render start adornment. */
    adornmentStart?: React.ReactNode;
    /** Slot to render the control that pseudo focus ring is applied to. */
    children: (args: {
        ref: React.MutableRefObject<any>;
    }) => React.ReactNode;
    /**
     * Whether the field is disabled.
     * @default false
     */
    isDisabled: boolean;
    /**
     * If true, the focus container will not have a border.
     * @default false
     * */
    isGhost?: boolean;
    /**
     * If true, the invalid state will be rendered.
     * @default false
     * */
    isInvalid: boolean;
};
export type GetFocusContainerTwStyles = (props: Required<Pick<FocusContainerProps, 'isDisabled' | 'isInvalid' | 'isGhost'>>) => Partial<Record<Parts, string>>;
export {};
