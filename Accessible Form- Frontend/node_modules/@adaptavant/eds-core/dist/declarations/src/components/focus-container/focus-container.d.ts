import { type StyleProps } from "../../shared/style-utils/index.js";
/**
 * FocusContainer
 *
 * @description
 *
 * The FocusContainer is used internally to handle some shared styling between
 * components that are wrapped in the Field component.
 *
 * Typically adornments (icons or buttons that appear to be inside the control)
 * will be absolutely positioning above it and padding is applied to make sure
 * that text does not get obscured below the adornments.
 *
 * On top of this, password managers will insert buttons above the input which
 * can get in the way of our adornments.
 *
 * To get around these problems, we wrap the input and adornments with the
 * FocusContainer and apply our own focus styles to an absolutely positioned
 * element that is a sibling of the input (when the input is focused).
 *
 * The FocusContainer also provides the border and background styles and has
 * slots to place the start and end adornments.
 */
export declare const FocusContainer: (props: Partial<StyleProps<"root" | "center" | "adornmentStart" | "adornmentEnd" | "focusIndicator" | "control">> & {
    adornmentEnd?: import("react").ReactNode;
    adornmentStart?: import("react").ReactNode;
    children: (args: {
        ref: import("react").MutableRefObject<any>;
    }) => import("react").ReactNode;
    isDisabled: boolean;
    isGhost?: boolean | undefined;
    isInvalid: boolean;
} & import("react").RefAttributes<HTMLDivElement>) => JSX.Element;
export declare function useCombinedFocusContainerInputStyles<Parts extends string = 'root'>({ className, classNames, isDisabled, isGhost, isInvalid, style, styles, tw, }: StyleProps<Parts> & {
    isDisabled: boolean;
    isGhost?: boolean;
    isInvalid: boolean;
    tw: Partial<Record<Parts, string>>;
}): import("../../shared/style-utils/index.js").GetStylePropsReturn<Parts>;
