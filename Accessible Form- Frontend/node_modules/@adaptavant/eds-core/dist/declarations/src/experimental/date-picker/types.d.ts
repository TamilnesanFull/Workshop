import type React from 'react';
import { type ButtonProps, type FieldProps } from "../../components/index.js";
import { type StyleProps } from "../../shared/style-utils/index.js";
import { type CalendarProps } from "../calendar/types.js";
export type DatePickerParts = 'root' | 'popover' | 'trigger' | 'triggerChevron' | 'triggerLabel';
export type DatePickerProps = Partial<StyleProps<DatePickerParts>> & {
    /**
     * Calendar component to be used.
     */
    calendar: React.ReactElement<CalendarProps> | ((props: {
        close: () => void;
    }) => React.ReactElement<CalendarProps>);
    /**
     * Customise how the value is presented in the default trigger.
     */
    formattedValue?: React.ReactNode;
    /**
     * Custom trigger component.
     */
    trigger?: (props: {
        triggerProps: ButtonProps;
        isOpen: boolean;
        placeholder: string;
    }) => React.ReactElement<ButtonProps>;
    /**
     * Placeholder text to be displayed in the date picker trigger.
     */
    placeholder: string;
};
export type GetDatePickerStyles = (args: {
    size: NonNullable<FieldProps['size']>;
}) => Partial<Record<DatePickerParts, string>>;
/** Props for the default trigger */
export type DatePickerTriggerProps = Partial<StyleProps<DatePickerParts>> & Pick<DatePickerProps, 'placeholder' | 'formattedValue'>;
export type DatePickerPopoverProps = {
    children: DatePickerProps['calendar'];
};
