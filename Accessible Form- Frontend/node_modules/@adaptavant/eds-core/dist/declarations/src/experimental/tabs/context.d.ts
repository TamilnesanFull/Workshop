import type React from 'react';
import { type TabsProps } from "./types.js";
type useTabsContextValuesArgs = {
    /** The currently selected value. */
    selectedValue?: string;
    /** Callback function triggered when the selected value changes. */
    onSelectedValueChange?: (value: string) => void;
    /**
     * The currently selected element.
     * We use this to visually highlight the selected tab.
     */
    selectedElement?: HTMLElement | null;
    /** Dispatch function for updating the selected element. */
    onSelectedElementChange?: React.Dispatch<React.SetStateAction<HTMLElement | null>>;
} & Required<Pick<TabsProps, 'size'>>;
export declare const TabsContextProvider: React.Provider<useTabsContextValuesArgs | undefined>;
export declare function useTabsContext(value?: string, disabled?: boolean): {
    tabItemA11yProps: {
        id: string;
        role: "tab";
        'aria-controls': string;
        'aria-selected': boolean;
        'aria-disabled': true | undefined;
        disabled: true | undefined;
    };
    tabContentA11yProps: {
        id: string;
        role: "tabpanel";
        'aria-labelledby': string;
        tabIndex: number;
        'aria-hidden': true | undefined;
    };
    tabListA11yProps: {
        role: "tablist";
        'aria-orientation': "horizontal";
    };
    /** The currently selected value. */
    selectedValue?: string | undefined;
    /** Callback function triggered when the selected value changes. */
    onSelectedValueChange?: ((value: string) => void) | undefined;
    /**
     * The currently selected element.
     * We use this to visually highlight the selected tab.
     */
    selectedElement?: HTMLElement | null | undefined;
    /** Dispatch function for updating the selected element. */
    onSelectedElementChange?: React.Dispatch<React.SetStateAction<HTMLElement | null>> | undefined;
    size: "small" | "standard";
};
export {};
