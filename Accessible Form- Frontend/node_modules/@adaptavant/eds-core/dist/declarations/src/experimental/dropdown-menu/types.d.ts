import { type Strategy } from '@floating-ui/react-dom';
import { type ButtonProps } from "../../components/button/types.js";
import { type CachedChildrenOptions } from "../../shared/dropdowns/hooks/use-cached-children.js";
import { type MobileDropdownContextType } from "../../shared/dropdowns/mobile-context.js";
import { type ExtractParts, type StyleProps } from "../../shared/style-utils/index.js";
import { type ForwardRefComponent } from "../../shared/types.js";
import { type MenuItemProps } from "../menu-item/index.js";
import { type ModalHeaderProps } from "../modal/types.js";
import { type PopoverProps } from "../popover/index.js";
export type TriggerProps<T extends React.ElementType> = Pick<React.ComponentPropsWithRef<T>, 'aria-controls' | 'aria-disabled' | 'aria-expanded' | 'aria-haspopup' | 'id' | 'onClick' | 'onKeyDown' | 'ref'>;
export type DropdownMenuProps = {
    /**
     * The content of the dropdown menu.
     *
     * @example
     * <DropdownMenu {...props}>
     * 	{({ triggerProps }) => (
     * 		<>
     * 			<IconButton
     * 				icon={EditIcon}
     * 				label="Toggle dropdown menu"
     * 				{...triggerProps}
     * 			/>
     * 			<DropdownMenuPopover>
     * 				<DropdownMenuList>
     * 					<DropdownMenuItem onClick={() => alert('Profile')}>
     * 						Profile
     * 					</DropdownMenuItem>
     * 					// ...more items
     * 					</DropdownMenuList>
     * 			</DropdownMenuPopover>
     * 		</>
     * 	)}
     * </DropdownMenu>
     */
    children: ((menuState: {
        isMenuOpen: boolean;
        triggerProps: TriggerProps<React.ElementType>;
    }) => React.ReactNode) | React.ReactNode;
    /**
     * Whether the dropdownmenu is disabled.
     * @default false
     */
    isDisabled?: boolean;
    /**
     * Match the width of the popover with the reference element.
     *
     * @default false
     */
    popoverMatchReferenceWidth?: boolean;
    /**
     * The max height of the dropdown panel popover.
     *
     * @default 356
     */
    popoverMaxHeight?: number;
    /**
     * The max width of the dropdown panel popover.
     *
     * @default 400
     */
    popoverMaxWidth?: number;
    /**
     * The offset of the dropdown panel popover.
     *
     * @default 4
     */
    popoverOffset?: number;
    /**
     * The placement of the dropdown panel popover in relation to the dropdown
     * menu trigger.
     *
     * @default 'bottom-start'
     */
    popoverPlacement?: 'bottom' | 'bottom-start' | 'bottom-end';
    /**
     * The strategy used to position the floating element.
     *
     * @default 'absolute'
     */
    strategy?: Strategy;
    /**
     * Config options for responsive behavior of the dropdown menu.
     *
     * @property {boolean} mobileFriendly - Enables mobile-friendly rendering of the dropdown menu.
     * When true, the menu transforms into a more touch-friendly interface on mobile devices.
     *
     * @property {number} togglePoint - The breakpoint (in pixels) at which the menu switches
     * between desktop and mobile layouts. Default is 768px.
     *
     * @property {string} titleForMobile - The heading text displayed at the top of the mobile menu.
     *
     * @property {object} closeButtonPropsForMobile - Configuration for the mobile menu's close button.
     * Inherits properties from ModalHeaderProps['closeButtonProps'].
     */
    mobilePopover?: MobileResponsiveProps;
};
type TriggerParts = 'root';
export type DropdownMenuTriggerProps = Partial<StyleProps<TriggerParts>> & Omit<ButtonProps, 'aria-controls' | 'aria-expanded' | 'aria-haspopup' | 'id' | 'onClick' | 'type'>;
export type GetDropdownMenuTriggerStyles = (props: Required<Pick<ButtonProps, 'size' | 'variant'>>) => Partial<Record<TriggerParts, string>>;
type PopoverParts = ExtractParts<PopoverProps> | 'modalWrapper' | 'modalHeader' | 'modalContent' | 'modalHeading';
export type DropdownMenuPopoverProps = Omit<PopoverProps, 'shouldUsePortal'> & {
    /**
     * Determines whether the DropdownMenuPopover should be rendered in a React Portal.
     * If `true`, the Popover will be rendered outside the DOM hierarchy of the
     * parent component.
     * Useful for avoiding issues with z-index or overflow.
     *
     * @default true
     */
    shouldUsePortal?: PopoverProps['shouldUsePortal'];
};
export type GetDropdownMenuPopoverStyles = () => Partial<Record<PopoverParts, string>>;
type MenuListParts = ExtractParts<MenuItemProps>;
export type DropdownMenuListProps<Option extends object> = Partial<StyleProps<MenuListParts>> & CachedChildrenOptions<Option>;
export type GetDropdownMenuListStyles = () => Partial<Record<MenuListParts, string>>;
export type DropdownMenuItemProps = Omit<MenuItemProps, 'children'> & {
    /** The content of the dropdown menu item. */
    children: React.ReactNode;
    /**
     * An optional ID for the menu item.
     * If no value is provided, an ID will be automatically generated.
     */
    id?: string;
    /** Function to be fired following a click event of the item. */
    onClick?: (event?: React.MouseEvent<HTMLDivElement>) => boolean | void;
};
export type PolymorphicDropdownMenuItem = ForwardRefComponent<'div', DropdownMenuItemProps>;
export type MobileResponsiveProps = {
    /** Controls whether the DropdownMenuPopover renders as a sheet component on responsive screens.
     * @default true
     */
    mobileFriendly?: boolean;
    /**
     * If `closeButtonPropsForMobile` is provided then the mobile version of the component will
     * have a close button
     */
    closeButtonPropsForMobile?: Partial<ModalHeaderProps['closeButtonProps']>;
    /**
     * On mobile DropdownMenuPopover renders a Sheet component.
     * If `titleForMobile` is provided then the Sheet will have a Header with title rendered
     */
    titleForMobile: string;
} & Pick<MobileDropdownContextType, 'togglePoint'>;
export {};
