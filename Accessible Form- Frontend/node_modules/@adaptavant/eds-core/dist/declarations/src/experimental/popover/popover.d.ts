import { type Placement, type ReferenceType, type Strategy } from '@floating-ui/react-dom';
import { type PolymorphicPopover, type UsePopoverResult } from "./types.js";
/**
 * Popover
 *
 * @description
 * The popover component provides the visual styles for popovers.
 * It should be used in conjunction with the `usePopover` hook which handles the
 * positioning logic.
 */
export declare const Popover: PolymorphicPopover;
type UsePopoverArgs = {
    /**
     * When true, the popover element is open.
     * Required when using the `isPopoverAlwaysMounted` option.
     */
    isOpen?: boolean;
    /**
     * Set this value to true when the popover remains mounted but is visually
     * hidden with CSS when the popover is closed.
     *
     * @default false
     */
    isPopoverAlwaysMounted?: boolean;
    /**
     * When true, the popover element will match the width of the reference
     * element.
     */
    matchReferenceWidth?: boolean;
    /**
     * The maximum height of the popover.
     */
    maxHeight?: number;
    /**
     * The maximum width of the popover.
     */
    maxWidth?: number | 'fit-content' | 'min-content' | 'max-content';
    /**
     * Distance between the reference element and popover element in pixels.
     *
     * @default 4
     */
    offset?: number;
    /**
     * Placement of the popover relative to the reference.
     *
     * @default 'bottom-start'
     */
    placement?: Placement;
    /**
     * The strategy used to position the floating element.
     *
     * @default 'absolute'
     */
    strategy?: Strategy;
};
/**
 * usePopover
 *
 * @description
 * The `usePopover` hook handles the positioning logic for popovers.
 */
export declare function usePopover<TReferenceType extends ReferenceType>({ isOpen, isPopoverAlwaysMounted, matchReferenceWidth, maxHeight: maxHeightOption, maxWidth, offset: offsetProp, placement, strategy, }?: UsePopoverArgs): UsePopoverResult<TReferenceType>;
export {};
