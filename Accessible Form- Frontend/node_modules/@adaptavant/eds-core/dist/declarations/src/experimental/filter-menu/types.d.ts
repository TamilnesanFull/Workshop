import { type Strategy } from '@floating-ui/react-dom';
import { type ButtonProps } from "../../components/button/types.js";
import { type FieldProps, type useInputA11yProps } from "../../components/field/index.js";
import { type ExtractParts, type StyleProps } from "../../shared/style-utils/index.js";
import { type ListboxProps } from "../listbox/index.js";
import { type MenuItemProps } from "../menu-item/index.js";
import { type PopoverProps } from "../popover/index.js";
import { type SearchInputProps } from "../search-input/index.js";
export type TriggerProps = ReturnType<typeof useInputA11yProps> & {
    'aria-controls': string;
    'aria-describedby': string | undefined;
    'aria-disabled': true | undefined;
    'aria-expanded': boolean;
    'aria-haspopup': 'listbox' | boolean;
    'aria-invalid': true | undefined;
    'aria-labelledby': string;
    'aria-required': true | undefined;
    onClick: (() => void) | undefined;
    onKeyDown: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
    ref: (node: HTMLButtonElement | null) => void;
};
export type FilterMenuProps = {
    /**
     * The content of the filter menu.
     *
     * @example
     * <Field label="Select Items">
     * 	<FilterMenu>
     * 		{({ triggerProps }) => (
     * 			<>
     * 				<IconButton
     * 					{...triggerProps}
     * 					aria-label="Toggle filter menu"
     * 					icon={EditIcon}
     * 				/>
     * 				<FilterMenuPopover>
     * 					<FilterMenuSearchField label="Search Items">
     * 						<FilterMenuSearchInput
     * 							onChange={handleChange}
     * 							onClear={handleClear}
     * 							placeholder="Search..."
     * 							value={value}
     * 						/>
     * 					</FilterMenuSearchField>
     * 					<FilterMenuListbox
     * 						noResultsFallback={
     * 							<Text className="text-secondary text-center text-body-12 py-4">
     * 								No matching results
     * 							</Text>
     * 						}
     * 						options={filteredOptions}
     * 					>
     * 						{(option) => (
     * 							<FilterMenuItem
     * 								id={option.id}
     * 								isSelected={selectedOption.id === option.id}
     * 								onClick={() => {
     * 									setSelectedOption(option);
     * 								}}
     * 							>
     * 								{option.value}
     * 							</FilterMenuItem>
     * 						)}
     * 					</FilterMenuListbox>
     * 				</FilterMenuPopover>
     * 			</>
     * 		)}
     * 	</FilterMenu>
     * </Field>
     */
    children: ((menuState: {
        isMenuOpen: boolean;
        triggerProps: TriggerProps;
    }) => React.ReactNode) | React.ReactNode;
    /**
     * Match the width of the popover with the reference element.
     *
     * @default false
     */
    popoverMatchReferenceWidth?: boolean;
    /**
     * The max height of the filter panel popover.
     *
     * @default 356
     */
    popoverMaxHeight?: number;
    /**
     * The max width of the filter panel popover.
     *
     * @default 400
     */
    popoverMaxWidth?: number;
    /**
     * The offset of the filter panel popover.
     *
     * @default 4
     */
    popoverOffset?: number;
    /**
     * The placement of the filter panel popover in relation to the filter
     * menu trigger.
     *
     * @default 'bottom-start'
     */
    popoverPlacement?: 'bottom' | 'bottom-start' | 'bottom-end';
    /**
     * The strategy used to position the floating element.
     *
     * @default 'absolute'
     */
    strategy?: Strategy;
};
type TriggerParts = 'root' | 'chevron' | 'focusContainer' | 'focusIndicator' | 'label' | 'labelTrack';
export type FilterMenuTriggerProps = Partial<StyleProps<TriggerParts>> & Omit<ButtonProps, 'aria-controls' | 'aria-expanded' | 'aria-haspopup' | 'id' | 'isDisabled' | 'onClick' | 'size' | 'type' | 'variant' | 'iconStart' | 'isLoading' | 'loadingLabel' | 'isPressed' | 'form'> & {
    /** Displays a placeholder text when no children is provided  */
    placeholder?: string;
    /** @deprecated FilterMenuTrigger uses a standard chevron icon pattern and doesn't need custom start icons */
    iconStart?: ButtonProps['iconStart'];
    /** @deprecated FilterMenuTrigger is a simple toggle control that doesn't perform async operations requiring loading states */
    isLoading?: ButtonProps['isLoading'];
    /** @deprecated FilterMenuTrigger doesn't display loading states, so loading labels are unnecessary */
    loadingLabel?: ButtonProps['loadingLabel'];
    /** @deprecated FilterMenuTrigger doesn't need isPressed state, We won't be supporting isPressed in future releases as we are cleaning up un-used props */
    isPressed?: ButtonProps['isPressed'];
    /** @deprecated FilterMenuTrigger doesn't need form, We won't be supporting form in future releases as we are cleaning up un-used props */
    form?: ButtonProps['form'];
};
export type GetFilterMenuTriggerStyles = (props: Required<Pick<FieldProps, 'size'>>) => Partial<Record<TriggerParts, string>>;
export type FilterMenuPopoverProps = Omit<PopoverProps, 'shouldUsePortal'> & {
    /**
     * Determines whether the Popover should be rendered in a React Portal.
     * If `true`, the Popover will be rendered outside the DOM hierarchy of the
     * parent component.
     * Useful for avoiding issues with z-index or overflow.
     *
     * @default true
     */
    shouldUsePortal?: PopoverProps['shouldUsePortal'];
};
export type FilterMenuListboxProps<Option extends object> = Omit<ListboxProps<Option>, 'id'> & {
    /**
     * Component to render when there are not options left in the filtered result.
     */
    noResultsFallback?: React.ReactNode;
};
type FieldParts = ExtractParts<FieldProps>;
export type FilterMenuSearchFieldProps = Omit<FieldProps, 'id' | 'labelVisibility' | 'secondaryLabel' | 'counter' | 'description' | 'isDisabled' | 'isRequired' | 'errorMessage'> & {
    /** @deprecated FilterMenuSearchField internally manages label visibility and sets it to hidden by default. */
    labelVisibility?: FieldProps['labelVisibility'];
    /** @deprecated FilterMenuSearchField is a simplified search field that doesn't need secondary labels */
    secondaryLabel?: FieldProps['secondaryLabel'];
    /** @deprecated FilterMenuSearchField search inputs don't need character counters as they're typically used for textarea */
    counter?: FieldProps['counter'];
    /** @deprecated FilterMenuSearchField is a simplified search field that doesn't need description */
    description?: FieldProps['description'];
    /** @deprecated FilterMenuSearchField doesn't need disabling the search input in FilterMenu component */
    isDisabled?: FieldProps['isDisabled'];
    /** @deprecated FilterMenuSearchField doesn't require validation, so isRequired prop is unnecessary */
    isRequired?: FieldProps['isRequired'];
    /** @deprecated FilterMenuSearchField doesn't require validation, so error messages are unnecessary */
    errorMessage?: FieldProps['errorMessage'];
};
export type GetFilterMenuSearchFieldStyles = () => Partial<Record<FieldParts, string>>;
type SearchInputParts = 'root';
export type FilterMenuSearchInputProps = Omit<SearchInputProps, 'disabled' | 'name' | 'aria-activedescendant' | 'aria-autocomplete' | 'aria-controls' | 'aria-expanded' | 'autoComplete' | 'autoCorrect' | 'role' | 'spellCheck'> & {
    /** @deprecated FilterMenuSearchInput doesn't need disabling the search input in FilterMenu component */
    disabled?: SearchInputProps['disabled'];
    /** @deprecated FilterMenuSearchInput doesn't need form association, so name attribute is unnecessary */
    name?: SearchInputProps['name'];
    /** @deprecated FilterMenuSearchInput internally sets aria-activedescendant based on device type and selected item */
    'aria-activedescendant'?: SearchInputProps['aria-activedescendant'];
    /** @deprecated FilterMenuSearchInput internally sets aria-autocomplete to 'list' for proper accessibility */
    'aria-autocomplete'?: SearchInputProps['aria-autocomplete'];
    /** @deprecated FilterMenuSearchInput internally sets aria-controls to the listId from dropdown context */
    'aria-controls'?: SearchInputProps['aria-controls'];
    /** @deprecated FilterMenuSearchInput internally sets aria-expanded based on menu open state from context */
    'aria-expanded'?: SearchInputProps['aria-expanded'];
    /** @deprecated FilterMenuSearchInput internally sets autoComplete to 'off' to prevent browser suggestions */
    autoComplete?: SearchInputProps['autoComplete'];
    /** @deprecated FilterMenuSearchInput internally sets autoCorrect to 'off' to prevent text correction */
    autoCorrect?: SearchInputProps['autoCorrect'];
    /** @deprecated FilterMenuSearchInput internally sets role to 'combobox' for proper accessibility */
    role?: SearchInputProps['role'];
    /** @deprecated FilterMenuSearchInput internally sets spellCheck to 'false' to prevent spell checking */
    spellCheck?: SearchInputProps['spellCheck'];
};
export type GetFilterMenuSearchInputStyles = () => Partial<Record<SearchInputParts, string>>;
export type FilterMenuItemProps = Omit<MenuItemProps, 'children' | 'railStart' | 'railEnd'> & {
    /**
     * The content of the filter menu item.
     */
    children: React.ReactNode;
    /**
     * An optional ID for the menu item.
     * If no value is provided, an ID will be automatically generated.
     */
    id?: string;
    /** @deprecated FilterMenuItem uses railStart internally sets CheckIcon for selected items */
    railStart?: MenuItemProps['railStart'];
    /** @deprecated FilterMenuItem doesn't need railEnd for FilterMenu component */
    railEnd?: MenuItemProps['railEnd'];
    /**
     * Function to be fired following a click event of the item.
     */
    onClick?: (event?: React.MouseEvent<HTMLDivElement>) => boolean | void;
};
export {};
