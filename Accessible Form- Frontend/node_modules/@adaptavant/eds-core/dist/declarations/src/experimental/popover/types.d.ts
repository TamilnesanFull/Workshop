import { type ReferenceType } from '@floating-ui/react-dom';
import { type StyleProps } from "../../shared/style-utils/index.js";
import { type CSSProperties, type ForwardRefComponent } from "../../shared/types.js";
type Parts = 'root';
export type PopoverProps = Partial<StyleProps<Parts>> & {
    /** The content of the component. */
    children: React.ReactNode;
    /**
     * Determines whether the Popover should be rendered in a React Portal.
     * If `true`, the Popover will be rendered outside the DOM hierarchy of the
     * parent component.
     * Useful for avoiding issues with z-index or overflow.
     *
     * @default false
     */
    shouldUsePortal?: boolean;
};
export type PolymorphicPopover = ForwardRefComponent<'div', PopoverProps>;
export type GetPopoverStyles = () => Record<Parts, string>;
/**
 * Return type is needed to generated DTS files as we're using a 3rd party library
 */
export type UsePopoverResult<TReferenceType extends ReferenceType> = {
    getReferenceProps: () => {
        ref: (node: TReferenceType | null) => void;
    };
    getPopoverProps: () => {
        ref: (node: HTMLElement | null) => void;
        style: CSSProperties;
    };
    referenceRef: React.MutableRefObject<TReferenceType | null>;
    popoverRef: React.MutableRefObject<HTMLElement | null>;
};
export {};
