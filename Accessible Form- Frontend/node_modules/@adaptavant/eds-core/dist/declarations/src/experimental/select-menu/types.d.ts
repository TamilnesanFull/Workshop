import { type Strategy } from '@floating-ui/react-dom';
import { type ButtonProps } from "../../components/button/types.js";
import { type FieldProps, type useInputA11yProps } from "../../components/field/index.js";
import { type MobileDropdownContextType } from "../../shared/dropdowns/mobile-context.js";
import { type ExtractParts, type StyleProps } from "../../shared/style-utils/index.js";
import { type ForwardRefComponent } from "../../shared/types.js";
import { type ListboxProps } from "../listbox/index.js";
import { type MenuItemProps } from "../menu-item/index.js";
import { type ModalHeaderProps } from "../modal/index.js";
import { type PopoverProps } from "../popover/index.js";
export type TriggerProps = ReturnType<typeof useInputA11yProps> & {
    'aria-activedescendant': string | undefined;
    'aria-controls': string;
    'aria-describedby': string | undefined;
    'aria-disabled': true | undefined;
    'aria-expanded': boolean;
    'aria-haspopup': 'listbox' | boolean;
    'aria-invalid': true | undefined;
    'aria-labelledby': string;
    'aria-required': true | undefined;
    onClick: (() => void) | undefined;
    onKeyDown: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
    ref: (node: HTMLButtonElement | null) => void;
};
export type SelectMenuProps<Option extends object> = {
    /**
     * The content of the select menu.
     *
     * If children is a function, we call it with
     * the menu state and triggerProps so that consumers can choose to render a
     * custom trigger or style other items based on state.
     *
     * If children is not a function, we render it as a React node.
     *
     * @example
     * ```jsx
     * <SelectMenu>
     * 	{({ isMenuOpen, triggerProps }) => (
     * 		<>
     * 			<Button {...triggerProps}>
     * 				{selectedOption ? selectedOption.label : 'Select an option'}
     * 			</Button>
     * 			<SelectMenuPopover>
     * 				<SelectMenuListbox options={options}>
     * 					{(option) => (
     * 						<SelectMenuItem
     * 							id={option.id}
     * 							isSelected={option.id === selectedOption.id}
     * 							onClick={() => {
     * 								setSelectedOption(option);
     * 							}
     * 						>
     * 							{option.label}
     * 						</SelectMenuItem>
     * 					)}
     * 				</SelectMenuListbox>
     * 			</SelectMenuPopover>
     * 		</>
     * 	)}
     * </SelectMenu>
     * ```
     */
    children: ((menuState: {
        isMenuOpen: boolean;
        triggerProps: TriggerProps;
    }) => React.ReactNode) | React.ReactNode;
    /**
     * If `closeButtonPropsForMobile` is provided then the mobile version of the component will
     * have a close button
     */
    closeButtonPropsForMobile?: Partial<ModalHeaderProps['closeButtonProps']>;
    /** Indicates if the modal should be render Sheet in responsive view
     * @default true
     */
    mobileFriendly?: boolean;
    /**
     * Match the width of the popover with the reference element
     *
     * @default false
     */
    popoverMatchReferenceWidth?: boolean;
    /**
     * The max height of the select popover.
     *
     * @default 356
     */
    popoverMaxHeight?: number;
    /**
     * The max width of the select popover.
     *
     * @default 400
     */
    popoverMaxWidth?: number;
    /**
     * The offset of the dropdown panel popover.
     *
     * @default 4
     */
    popoverOffset?: number;
    /**
     * The placement of the dropdown panel popover in relation to the dropdown
     * menu trigger.
     *
     * @default 'bottom-start'
     */
    popoverPlacement?: 'bottom' | 'bottom-start' | 'bottom-end';
    /**
     * The currently selected option.
     */
    /**
     * @deprecated This prop is deprecated and will be removed in future versions.
     * A much better API will be used similar to <FilterMenu>.
     */
    selectedOption?: Option;
    /**
     * The strategy used to position the floating element.
     *
     * @default 'absolute'
     */
    strategy?: Strategy;
    /**
     * On mobile SelectMenuPopover renders a Sheet component.
     * If `titleForMobile` is provided then the Sheet will have a Header with title rendered
     */
    titleForMobile?: string;
} & Pick<MobileDropdownContextType, 'togglePoint'>;
type TriggerParts = 'root' | 'chevron' | 'focusContainer' | 'focusIndicator' | 'label' | 'labelTrack';
export type SelectMenuTriggerProps = Partial<StyleProps<TriggerParts>> & Omit<ButtonProps, 'aria-controls' | 'aria-expanded' | 'aria-haspopup' | 'id' | 'isDisabled' | 'onClick' | 'size' | 'type' | 'variant'> & {
    /**
     * Placeholder text when no value is selected.
     */
    placeholder?: string;
};
export type GetSelectMenuTriggerStyles = (props: Required<Pick<FieldProps, 'size'>>) => Partial<Record<TriggerParts, string>>;
type PopoverParts = 'root' | 'modalWrapper';
export type SelectMenuPopoverProps = Partial<StyleProps<PopoverParts>> & Omit<PopoverProps, 'shouldUsePortal'> & {
    /**
     * Determines whether the Popover should be rendered in a React Portal.
     * If `true`, the Popover will be rendered outside the DOM hierarchy of the
     * parent component.
     * Useful for avoiding issues with z-index or overflow.
     *
     * @default true
     */
    shouldUsePortal?: PopoverProps['shouldUsePortal'];
};
export type GetSelectMenuPopoverStyles = () => Partial<Record<PopoverParts, string>>;
type ListboxParts = ExtractParts<ListboxProps<any>>;
export type SelectMenuListboxProps<Option extends object> = Omit<ListboxProps<Option>, 'id'>;
export type GetSelectMenuListboxStyles = () => Partial<Record<ListboxParts, string>>;
export type SelectMenuItemProps = Omit<MenuItemProps, 'children' | 'isSelected'> & {
    /** The content of the select menu item */
    children: React.ReactNode;
    /**
     * An optional ID for the menu item.
     * If no value is provided, an ID will be automatically generated.
     */
    id?: string;
    /**
     * Indicates if the menu item is currently selected.
     * Applies the `aria-selected` attribute to the menu item.
     */
    isSelected: boolean;
    /** Function to be fired following a click event of the item. */
    onClick?: (event?: React.MouseEvent<HTMLDivElement>) => boolean | void;
};
export type PolymorphicSelectMenuItem = ForwardRefComponent<'div', SelectMenuItemProps>;
export {};
