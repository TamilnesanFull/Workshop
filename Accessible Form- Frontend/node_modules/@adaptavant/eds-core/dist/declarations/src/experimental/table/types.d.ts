import { type ColumnDef, type SortingFn, type Table } from '@tanstack/react-table';
import { type StyleProps } from "../../shared/style-utils/index.js";
type TableParts = 'baseContainer' | 'tableContainer' | 'table' | 'header' | 'headerRow' | 'headerCell' | 'headerContentWrapper' | 'headerContent' | 'sortIconsWrapper' | 'sortIcon' | 'body' | 'row' | 'cell' | 'footerContainer';
export type PaginationConfig = {
    /**
     *
     * This determines the number of rows to be displayed per page.
     *
     */
    pageSize?: number;
};
export type TableProps<TData extends object> = Partial<StyleProps<TableParts>> & {
    /**
     * Each column is defined by a ColumnDef object, which specifies
     * properties such as the header, accessor, and other column configurations.
     */
    columns: ColumnDef<TData, any>[];
    /**
     * Define the data property, which is an array of data objects.
     * Each object in this array represents a row in the table.
     */
    data: TData[];
    /**
     * By default, sorting is enabled at table options.
     * Set this prop to false to disable sorting for the entire table.
     */
    enableSorting?: boolean;
    /**
     * By default, the first sorting direction when cycling through the sorting
     * for a column using the toggleSorting APIs is:
     * - ascending for string columns
     * - descending for number columns
     * Setting this prop will descend any data type to desc
     */
    sortDescFirst?: boolean;
    /**
     * This prop is used to define custom sorting functions for the table.
     * The key of the record is the column accessor and the value is the sorting function.
     *
     * @example:
     * ```
     * sortingFns: {
     * 		myCustomSorting: (rowA: any, rowB: any, columnId: any): number =>
     * 		rowA.getValue(columnId).value < rowB.getValue(columnId).value ? 1 : -1,
     * 		},
     * ```
     */
    sortingFns?: Record<string, SortingFn<any>>;
    /**
     * configuration to control the pagination behavior of the table.
     * * {Object} - {pageSize: number }
     */
    pagination?: PaginationConfig;
    /**
     * Role attribute to specify if the table is a 'table' or 'grid'.
     * Use 'table' for static content and 'grid' for interactive tables
     * that have buttons, links, or other interactive elements.
     *
     * @default 'table'
     */
    role: 'table' | 'grid';
    /**
     * Fallback template to render inside Table body when data is empty
     */
    emptyTemplate?: React.ReactNode;
};
export type GetTableStyles = () => Partial<Record<TableParts, string>>;
type TableHeaderParts = 'root' | 'row' | 'cell' | 'contentWrapper' | 'content' | 'iconsWrapper' | 'icon';
export type TableHeaderProps<TData extends object> = Partial<StyleProps<TableHeaderParts>> & {
    /**
     * The instance of the Table component that this header is associated with.
     * This is used to access the table's state and methods for sorting API.
     */
    tableInstance: Table<TData>;
};
export type GetHeaderStyles = () => Partial<Record<TableHeaderParts, string>>;
type PaginationParts = 'root' | 'text';
export type PaginationProps<TData extends object> = Partial<StyleProps<PaginationParts>> & {
    /**
     * The table instance that the pagination controls will be associated with.
     * To access the table's state and methods required for pagination.
     */
    tableInstance: Table<TData>;
};
export type GetPaginationStyles = () => Partial<Record<PaginationParts, string>>;
export {};
