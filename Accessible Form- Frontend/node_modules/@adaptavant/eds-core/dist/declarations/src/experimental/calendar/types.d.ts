import { type DayPickerSingleProps } from 'react-day-picker';
import { type StyleProps } from "../../shared/style-utils/index.js";
import { type supportedDateFnsLocales } from "./localeMap.js";
type CalendarParts = 'caption' | 'captionIconEnd' | 'captionLabel' | 'captionWrapper' | 'captionYear' | 'head' | 'headCell' | 'headCellContent' | 'headRow' | 'monthGrid' | 'nav' | 'navButtonNext' | 'navButtonPrevious' | 'root' | 'row' | 'table' | 'tableBody' | DayParts;
/**
 * Represents the locale code (ISO 639-1) keys from the `supportedDateFnsLocales` object.
 */
type LocaleCode = keyof typeof supportedDateFnsLocales;
type Labels = {
    /** Label for the days that are not available. */
    disabledDayLabel?: string;
    /** Label for the button that navigates to today. */
    goTodayLabel?: string;
    /** Label for the button that navigates to the next month. */
    nextMonthLabel?: string;
    /** Label for the button that navigates to the next year. */
    nextYearLabel?: string;
    /** Label for the button that navigates to the previous month. */
    previousMonthLabel?: string;
    /** Label for the button that navigates to the previous year. */
    previousYearLabel?: string;
    /** Label for the months that are not available. */
    disableMonthLabel?: string;
};
export type CalendarProps = Partial<StyleProps<CalendarParts>> & {
    /**
     * Calendar copy labels for accessibility and tooltips
     */
    copyLabels?: Labels;
    /** Determines whether Calendar has month grid or not.
     * @default true
     */
    hasMonthPicker?: boolean;
    /**
     * Callback that is called for each date of the calendar.
     * If it returns true, then the date is unavailable.
     */
    isDateUnavailable?: (date: Date) => boolean;
    /**
     * Locale code (ISO 639-1) for date localization. Should match one of the entry from `supportedDateFnsLocales`.
     *
     * @defaultValue 'en' - English (US)
     */
    localeCode?: LocaleCode;
    /** The maximum allowed date that a user may select. */
    maxValue?: Date;
    /** The minimum allowed date that a user may select. */
    minValue?: Date;
    /** Handler that is called when the value changes. */
    onValueChange?: DayPickerSingleProps['onSelect'];
    /** Handler that is called when the focused date changes. */
    onVisibleMonthChange?: (date: Date) => void;
    /** Handler that is called when the focused year changes. */
    onVisibleYearChange?: (date: Date) => void;
    /**
     * The size of the calendar.
     */
    size?: 'small' | 'standard';
    /**
     * The timezone modifier for the calendar to consider the "today" date.
     *
     * When a consumer passes a valid time zone string, "today" (which was originally based on the system time)
     * will be offset according to the specified timezone.
     *
     * @example tzModifier="America/Los_Angeles"
     *
     * @default Intl.DateTimeFormat().resolvedOptions().timeZone
     *
     */
    tzModifier?: string;
    /** The current value (controlled). */
    value?: Date;
    /** Controls the currently focused date within the calendar. */
    visibleMonth?: Date;
    /**
     * The index of the first day of the week (0 - Sunday).
     * Overrides the locale's one.
     */
    weekStartsOn?: DayPickerSingleProps['weekStartsOn'];
    /**
     * Calendar will focus the first selected day (if set) or the today's date (if not disabled).
     *
     * Use this prop when you need to focus Calendar after a user actions, for improved accessibility.
     */
    initialFocus?: boolean;
};
export type GetCalendarStyles = (props: {
    size: 'small' | 'standard';
    monthView: boolean;
}) => Partial<Record<CalendarParts, string>>;
type DayParts = 'cell' | 'cellButton' | 'cellText';
export type CalendarDayStylesProps = {
    isDisabled: boolean;
    isOutside: boolean;
    isSelected: boolean;
    isToday: boolean;
    isMonthView: boolean;
};
export type GetCalendarDayStyles = (props: CalendarDayStylesProps & Required<Pick<CalendarProps, 'size'>> & {
    monthView: boolean;
}) => Partial<Record<DayParts, string>>;
export type CellButtonStyles = Required<Pick<CalendarProps, 'size'>> & CalendarDayStylesProps;
export type DayCellProps = {
    buttonRef: React.RefObject<HTMLButtonElement>;
    children: React.ReactNode;
    humanReadableDate: string;
    isSelected: boolean;
};
export {};
