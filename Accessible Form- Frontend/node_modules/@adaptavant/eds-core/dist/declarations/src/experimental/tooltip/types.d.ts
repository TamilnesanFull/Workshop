import { type Placement, type Strategy } from '@floating-ui/react-dom';
import { type StyleProps } from "../../shared/style-utils/index.js";
import { type PopoverProps } from "../popover/types.js";
type Parts = 'root';
export type TooltipProps = Partial<StyleProps<Parts>> & {
    /**
     * The child element that the tooltip will wrap, such as a button or other
     * interactive element.
     */
    children: (props: {
        triggerProps: TooltipTriggerProps<React.ElementType>;
    }) => React.ReactNode;
    /** The text or content that will be displayed inside the tooltip. */
    content: string;
    /**
     * An optional ID for the tooltip.
     * If no value is provided, an ID will be automatically generated.
     */
    id?: string;
    /**
     * Defines the tooltip's placement relative to the trigger element.
     *
     * @default 'top'
     */
    placement?: Placement;
    /**
     * The strategy used to position the floating element.
     *
     * @default 'absolute'
     */
    strategy?: Strategy;
    /**
     * Whether the tooltip should be placed within a React Portal
     *
     * @default true
     */
    shouldUsePortal?: PopoverProps['shouldUsePortal'];
    /**
     * The maximum width of the popover.
     *
     * @default 200
     */
    maxWidth?: number;
    /**
     * Controls the visibility of tooltip. When set to `true` tooltip will not render and removes all events in `trigger` element.
     *
     * @default false
     */
    visibilityHidden?: boolean;
};
export type GetTooltipStyles = () => Partial<Record<Parts, string>>;
export type TooltipTriggerProps<T extends React.ElementType> = Pick<React.ComponentPropsWithRef<T>, 'aria-describedby' | 'onBlur' | 'onFocus' | 'onMouseEnter' | 'onMouseLeave' | 'onTouchEnd' | 'ref'>;
export {};
