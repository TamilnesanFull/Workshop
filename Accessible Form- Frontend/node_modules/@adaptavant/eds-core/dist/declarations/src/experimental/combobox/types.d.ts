import { type Strategy } from '@floating-ui/react-dom';
import { type TextInputProps } from "../../components/text-input/index.js";
import { type TrackParts } from "../../components/track/types.js";
import { type ExtractParts, type StyleProps } from "../../shared/style-utils/index.js";
import { type ListboxProps } from "../listbox/index.js";
import { type MenuItemProps } from "../menu-item/index.js";
import { type PopoverProps } from "../popover/index.js";
export type ComboboxContextProps<Option extends object> = {
    /**
     * The value of the Combobox input.
     */
    inputValue?: string;
    /**
     * The interaction required to display the Combobox menu.
     * @default 'input'
     */
    menuTrigger?: MenuTriggerAction;
    /**
     * Handler that is called when the ComboboxSearchInput's value is cleared.
     */
    onClear?: () => void;
    /**
     * Handler that is called when the Combobox input value changes.
     */
    onInputChange: (value: string) => void;
    /**
     * Handler that is called when the selection changes.
     */
    onSelectionChange: (newOption: Option | undefined) => void;
    /**
     * The selected Combobox option.
     */
    selectedOption: Option | undefined;
    /**
     * The selected Combobox option.
     */
    selectedKey: keyof Option;
};
export type ComboboxProps<Option extends object> = ComboboxContextProps<Option> & {
    /**
     * The content of the filter menu.
     *
     * @example
     * <Field label="Select Items">
     * 	<Combobox
     * 		inputValue={searchTerm}
     * 		onClear={() => setSearchTerm("")}
     * 		onInputChange={setSearchTerm}
     * 		onSelectionChange={setSelectedOption}
     * 		options={filteredOptions}
     * 		selectedKey="value"
     * 		selectedOption={selectedOption}
     * 	>
     * 		{({ isMenuOpen }) => (
     * 			<>
     * 				<ComboboxSearchInput placeholder="Search..." />
     * 				<ComboboxPopover>
     * 					<ComboboxListbox
     * 						noResultsFallback={
     * 							<Text className="text-secondary text-center text-body-12 py-4">
     * 								No matching results
     * 							</Text>
     * 						}
     * 						options={filteredOptions}
     * 					>
     * 						{(item) => <ComboboxItem option={item}>{item.value}</ComboboxItem>}
     * 					</ComboboxListbox>
     * 				</ComboboxPopover>
     * 			</>
     * 		)}
     * 	</Combobox>
     * </Field>
     */
    children: ((menuState: {
        isMenuOpen: boolean;
    }) => React.ReactNode) | React.ReactNode;
    /**
     * Match the width of the popover with the reference element.
     *
     * @default false
     */
    popoverMatchReferenceWidth?: boolean;
    /**
     * The max height of the filter panel popover.
     *
     * @default 356
     */
    popoverMaxHeight?: number;
    /**
     * The max width of the filter panel popover.
     *
     * @default 400
     */
    popoverMaxWidth?: number;
    /**
     * The offset of the filter panel popover.
     *
     * @default 4
     */
    popoverOffset?: number;
    /**
     * The placement of the filter panel popover in relation to the filter
     * menu trigger.
     *
     * @default 'bottom-start'
     */
    popoverPlacement?: 'bottom' | 'bottom-start' | 'bottom-end';
    /**
     * The strategy used to position the floating element.
     *
     * @default 'absolute'
     */
    strategy?: Strategy;
};
type PopoverParts = 'root';
export type ComboboxPopoverProps = Partial<StyleProps<PopoverParts>> & Omit<PopoverProps, 'shouldUsePortal'> & {
    /**
     * Determines whether the Popover should be rendered in a React Portal.
     * If `true`, the Popover will be rendered outside the DOM hierarchy of the
     * parent component.
     * Useful for avoiding issues with z-index or overflow.
     *
     * @default true
     */
    shouldUsePortal?: PopoverProps['shouldUsePortal'];
};
type ListboxParts = ExtractParts<ListboxProps<any>>;
export type ComboboxListboxProps<Option extends object> = Omit<ListboxProps<Option>, 'id'> & {
    /**
     * Component to render when there are not options left in the filtered result.
     */
    noResultsFallback?: React.ReactNode;
};
export type GetComboboxListboxStyles = () => Partial<Record<ListboxParts, string>>;
type SearchInputParts = 'root';
export type MenuTriggerAction = 'focus' | 'input';
export type ComboboxInputProps = Omit<TextInputProps, 'defaultValue' | 'value'>;
export type GetComboboxSearchInputStyles = () => Partial<Record<SearchInputParts, string>>;
export type ComboboxItemProps<Option extends object> = Omit<MenuItemProps, 'children' | 'isHighlighted' | 'isSelected'> & {
    /**
     * If true, the menu will not close after the item is selected.
     * @default false
     */
    avoidCloseOnClick?: boolean;
    /**
     * The content of the filter menu item.
     */
    children: React.ReactNode;
    /**
     * An optional ID for the menu item.
     * If no value is provided, an ID will be automatically generated.
     */
    id?: string;
    /**
     * The Combobox option to be rendered.
     */
    option: Option;
    /**
     * Function to be fired following a click event of the item.
     */
    onClick?: (event?: React.MouseEvent<HTMLDivElement>) => void;
};
export type GetComboboxItemStyles = (selectedOption: boolean) => Partial<Record<TrackParts, string>>;
export {};
