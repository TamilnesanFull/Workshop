import { type DayPickerSingleProps } from 'react-day-picker';
import { type StyleProps } from "../../shared/style-utils/index.js";
type CalendarParts = 'root' | 'month' | 'caption' | 'captionLabel' | 'captionYear' | 'nav' | 'navButtonPrevious' | 'navButtonNext' | 'table' | 'head' | 'headRow' | 'headCell' | 'headCellContent' | 'row';
/**
 * @deprecated  use `CalendarProps` from `@adaptavant/eds-core/experimental` instead.
 */
export type CalendarProps = Partial<StyleProps<CalendarParts>> & {
    /**
     * The initial month to show in the calendar.
     * Use this prop to let the Calendar control the current month.
     * If you need to set the month programmatically, use visibleMonth
     * and onVisibleMonthChange.
     *
     * @defaultValue The current month
     */
    defaultVisibleMonth?: Date;
    /**
     * Callback that is called for each date of the calendar.
     * If it returns true, then the date is today's date.
     */
    isToday?: (date: Date) => boolean;
    /**
     * Callback that is called for each date of the calendar.
     * If it returns true, then the date is unavailable.
     */
    isDateUnavailable?: (date: Date) => boolean;
    /**
     * The date-fns locale object used to localize dates.
     *
     * @defaultValue 'en-US'
     */
    locale?: DayPickerSingleProps['locale'];
    /** The maximum allowed date that a user may select. */
    maxValue?: Date;
    /** The minimum allowed date that a user may select. */
    minValue?: Date;
    /** Handler that is called when the value changes. */
    onValueChange?: DayPickerSingleProps['onSelect'];
    /** Handler that is called when the focused date changes. */
    onVisibleMonthChange?: (date: Date) => void;
    /** The current value (controlled). */
    value?: Date;
    /** Controls the currently focused date within the calendar. */
    visibleMonth?: Date;
    /**
     * The index of the first day of the week (0 - Sunday).
     * Overrides the locale's one.
     */
    weekStartsOn?: DayPickerSingleProps['weekStartsOn'];
};
export type GetCalendarStyles = () => Partial<Record<CalendarParts, string>>;
type DayParts = 'root' | 'cellButtonWrapper' | 'cellButton' | 'cellText';
export type GetCalendarDayStyles = (props: {
    isDisabled: boolean;
    isOutside: boolean;
    isSelected: boolean;
    isToday: boolean;
}) => Partial<Record<DayParts, string>>;
export {};
