import { type ComboboxInputProps } from "./types.js";
export declare const ComboboxSearchInput: import("react").ForwardRefExoticComponent<ComboboxInputProps & import("react").RefAttributes<HTMLInputElement>>;
export declare function useComboboxSearchInput(props: ComboboxInputProps): {
    inputProps: {
        focusContainerRef: (node: HTMLElement | null) => void;
        className?: string | undefined;
        style?: import("../../shared/index.js").CSSProperties | undefined;
        classNames?: Partial<Record<import("../../components/text-input/types.js").TextInputParts, string | undefined> & {
            root: never;
        }> | undefined;
        styles?: Partial<Record<import("../../components/text-input/types.js").TextInputParts, import("../../shared/index.js").CSSProperties> & {
            root: never;
        }> | undefined;
        disabled?: boolean | undefined;
        autoComplete: "off";
        name?: string | undefined;
        pattern?: string | undefined;
        placeholder?: string | undefined;
        type?: "text" | "search" | "tel" | "url" | "email" | "password" | undefined;
        autoFocus?: boolean | undefined;
        spellCheck: "false";
        role: "combobox";
        autoCorrect: string;
        inputMode?: "none" | "text" | "search" | "decimal" | "tel" | "url" | "email" | "numeric" | undefined;
        "aria-activedescendant": string | undefined;
        "aria-autocomplete": "list";
        "aria-controls": string;
        "aria-expanded": boolean;
        "aria-haspopup": "listbox";
        onPaste?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
        onFocus: (import("react").FocusEventHandler<HTMLInputElement> & (() => void)) | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onChange: import("react").ChangeEventHandler<HTMLInputElement> & ((event: React.ChangeEvent<HTMLInputElement>) => void);
        onKeyDown: (import("react").KeyboardEventHandler<HTMLInputElement> & ((event: import("react").KeyboardEvent<HTMLInputElement>) => void)) | undefined;
        adornmentStart?: import("react").ReactNode;
        adornmentEnd?: import("react").ReactNode;
        value: string;
    };
};
/**
 * On desktop Safari with VoiceOver, the aria-activedescendant
 * attribute seems to be ignored so we have set up a aria-live region
 * to fake it.
 * However, older versions of VoiceOver of Safari for iOS it ignores
 * the aria-live region and only announces the aria-activedescendant
 * so we need to use both.
 */
export declare function LiveRegion(): import("react/jsx-runtime").JSX.Element | null;
type EnterInputHandler = () => void;
export declare function useKeydownNavigation(onEnterInputHandler?: EnterInputHandler): (event: React.KeyboardEvent<HTMLInputElement>) => void;
export {};
