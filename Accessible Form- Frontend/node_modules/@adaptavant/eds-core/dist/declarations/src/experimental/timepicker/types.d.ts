import { type TextInputProps } from "../../components/text-input/types.js";
import { type StyleProps } from "../../shared/style-utils/index.js";
import { type ComboboxItemProps } from "../combobox/types.js";
import { type ListboxProps } from "../listbox/types.js";
import { type PopoverProps } from "../popover/types.js";
/**
 * Parts of the TimePicker component that can be styled.
 */
export type Parts = 'durationLabel' | 'errorIcon' | 'errorMessage' | 'errorTrack' | 'field' | 'input' | 'label' | 'listbox' | 'listboxItem' | 'listboxItemCenter' | 'listboxItemEnd' | 'listboxItemStart' | 'popover' | 'separator' | 'timeSlot' | 'timeSlotWrapper';
/** Represents each option in the TimePicker and the data sent to the callback. */
export type TimeOption = {
    /** Represents the selected time as a string */
    time: string;
    /** Represents System Timezone using `Date` object */
    dateObject: Date;
    /**
     * Represents the duration label as a string.
     */
    durationLabel?: string;
};
/** Represents the state of the TimePicker input value. */
export declare enum TimePickerInputState {
    EMPTY = "EMPTY",
    VALID = "VALID",
    INVALID_FORMAT = "INVALID_FORMAT",
    LTE_MIN = "LTE_MIN",
    GTE_MAX = "GTE_MAX"
}
export type TimePickerProps = Partial<StyleProps<Parts>> & {
    /**
     * Determines whether to clear the TimePicker input and selection.
     * When set to `true`, it will reset the input field and remove any selected time.
     * @default false
     */
    clear?: boolean;
    /**
     * An optional array of custom strings that can be displayed in the time picker.
     * Each string represents a day option that the user can select.
     * Empty or whitespace-only strings will be ignored.
     * @example ['Full Day']
     */
    customDays?: string[];
    /**
     * Custom times to include in the generated options.
     * An optional array of `Date` objects representing custom times.
     */
    customValues?: Date[];
    /**
     * The default TimeOption to be selected on Load.
     */
    defaultValue?: Date;
    /** Message to show when the timepicker is invalid. */
    errorMessage?: React.ReactNode;
    /**
     * Format for the time (12-hour or 24-hour).
     *
     * @default '12'
     */
    format?: '12' | '24';
    /**
     * Interval for time options (in minutes).
     *
     * @default 60
     */
    interval?: 15 | 30 | 45 | 60;
    /**
     * When true, the timepicker will be announced as disabled to screen-readers and
     * styled to signify this.
     * @default false
     */
    isDisabled?: boolean;
    /**
     * Label for the TimePicker.
     */
    label: React.ReactNode;
    /**
     * A label must always be provided for assistive technology, but you may
     * hide it from sighted users when the intent can be inferred from context.
     *
     * @default hidden
     */
    labelVisibility?: 'visible' | 'hidden';
    /**
     * The maximum allowed time value.
     * The time picker will only show options that are earlier than this value,
     * excluding any times after and equal to the specified time.
     */
    maxValue?: Date;
    /**
     * The minimum allowed time value.
     * The time picker will only show options that are later than this value,
     * excluding any times before and equal to the specified time.
     */
    minValue?: Date;
    /**
     * Callback function for when a new option is selected.
     */
    onSelect: ({ newOption, inputState, }: {
        newOption: TimeOption | undefined;
        inputState: TimePickerInputState;
    }) => void;
    /**
     * Determines whether to show the duration label.
     * @default false
     * @remarks This property will work only if `minValue` is provided.
     */
    showDurationLabel?: boolean;
    /**
     * Determines whether the TimePicker Options Popover should be rendered in a React Portal.
     * If `true`, the Popover will be rendered outside the DOM hierarchy of the
     * parent component.
     * Useful for avoiding issues with z-index or overflow.
     *
     * @default true
     */
    shouldUsePortal?: PopoverProps['shouldUsePortal'];
    /**
     * The default visual style of the nested input.
     *
     * @default 'standard'
     */
    variant?: 'standard' | 'subtle';
};
export type TimePickerInputProps = Omit<TextInputProps, 'defaultValue' | 'value'> & {
    /**
     * Handler to trigger validation on Enter if no matching option.
     */
    onEnterInputHandler: () => void;
};
export type TimePickerListboxProps<Option extends object> = Omit<ListboxProps<Option>, 'id'> & {
    /**
     * Index of the highlighted item in the Popover.
     */
    'data-highlighted-index': number;
};
export type TimePickerItemProps<Option extends object> = Omit<ComboboxItemProps<Option>, 'isDisabled'> & {
    /**
     * times array to validate the selectedOption.
     */
    timeOptions: TimeOption[];
};
export type GetTimePickerStyles = (props: Required<Pick<TimePickerProps, 'format' | 'variant'> & {
    isDurationEnabled: boolean;
}>) => Partial<Record<Parts, string>>;
