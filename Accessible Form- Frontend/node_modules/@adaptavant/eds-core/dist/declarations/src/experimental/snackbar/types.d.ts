import { type StyleProps } from "../../shared/style-utils/index.js";
type SnackbarBaseProps = {
    /** The variant of the SnackbarContent. */
    variant?: 'info' | 'positive' | 'critical' | 'loading';
    /**  The title of the SnackbarContent. */
    title: string;
    /** The description of the SnackbarContent. */
    description?: string;
    /** Callback invoked when the close button is clicked. */
    onCloseButtonClick?: () => void;
    /** Renders an action button with specified text and provides an onClick handler */
    actionButton?: {
        /** The text of the action button. */
        text: string;
        /** Callback invoked when the action button is clicked. */
        onClick: () => void;
    };
};
type SnackbarContentParts = 'root' | 'title' | 'description' | 'closeButton' | 'actionButton';
export type SnackbarContentProps = SnackbarBaseProps & Partial<StyleProps<SnackbarContentParts>>;
export type GetSnackbarContentStyles = () => Partial<Record<SnackbarContentParts, string>>;
type SnackbarParts = 'root';
export type SnackbarProps = SnackbarBaseProps & {
    /** Whether the snackbar is open or closed. */
    open: boolean;
    /** The duration after which the snackbar automatically closes.
     * Values in milliseconds.
     *
     * @example When autoCloseDuration is 3000, the snackbar will close after 3 seconds.
     *
     * @default 3000
     */
    autoCloseDuration?: number;
    /** The placement of the snackbar. */
    placement: 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end';
    /**
     * Set offset to adjust the position of the snackbar based on the `placement` prop.
     * Value is in pixels.
     *
     * @example When placement is 'top-start' and offset is [4, 4],
     * the snackbar will be positioned 4px from the top and 4px from the left / start of the viewport.
     *
     * @default [8,8]
     */
    offset?: [number, number];
    /** Callback invoked when the snackbar is auto-dismissed */
    onClose: () => void;
} & Partial<StyleProps<SnackbarParts>>;
export type GetSnackbarStyles = () => Partial<Record<SnackbarParts, string>>;
export {};
