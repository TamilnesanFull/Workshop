import { type StyleProps } from "../../shared/style-utils/index.js";
type SelectCardParts = 'root' | 'legend' | 'controlWrapper' | 'directContentWrapper' | 'dynamicContentWrapper' | CardParts;
export type CardParts = 'card' | 'cardRow' | 'focusIndicator';
export type SelectCardOptionProps = {
    /** Defines an identifier (ID) which must be unique. */
    id?: string;
    /** Block of component to display after Radio or Checkbox, in same flex row  */
    directSlot: React.ReactNode;
    /** The Block of component to display below CardRow, will be visible only when option is checked */
    dynamicSlot?: React.ReactNode;
    /**
     * When true, the checkbox / radio will be announced as disabled to screen-readers and
     * styled to signify this.
     */
    isDisabled?: boolean;
    /** The name of the option. Forwarded to CheckBox or Radio input internally */
    name?: string;
    /** Pass css classNames as string to transition height of expanded dynamic contents.
     * when not passed there will not be any transition
     * Note: When passed container will not grow more than passed height as it has overflow-hidden
     */
    transitionHeightClass?: string;
    /** The value of the option. Forwarded to CheckBox or Radio input internally */
    value: string;
};
export type SelectCardProps = Partial<StyleProps<SelectCardParts>> & {
    /**
     * The type of input element to render in each card.
     * @default 'radio'
     */
    controlType?: 'checkbox' | 'radio';
    /**
     * Makes all cards in the group disabled.
     * @default false
     */
    isDisabled?: boolean;
    /**
     * The text description of the fieldset element.
     * Renders the passed ReactNode as the first child of the fieldset, inside a
     * `<legend>` element.
     */
    legend?: React.ReactNode;
    /**
     * Callback to be called when the selected card(s) state changes.
     */
    onChange: (value: string | string[]) => void;
    /**
     * An array of options to be rendered.
     */
    options: SelectCardOptionProps[];
    /**
     * Indicates whether the element's orientation is horizontal, vertical.
     * @default 'horizontal'
     */
    orientation?: 'horizontal' | 'vertical';
    /**
     * The value(s) of the selected card(s).
     */
    value: string[] | string;
};
export type GetSelectCardStyles = (props: Required<Pick<SelectCardProps, 'isDisabled' | 'orientation'>>) => Partial<Record<SelectCardParts, string>>;
export type GetCardStyles = (props: Required<Pick<SelectCardProps, 'isDisabled' | 'orientation'>>) => Partial<Record<CardParts, string>>;
export {};
