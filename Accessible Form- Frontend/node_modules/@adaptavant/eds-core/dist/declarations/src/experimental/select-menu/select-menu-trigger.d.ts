import { type ButtonProps } from "../../components/button/index.js";
import { type DropdownContextType } from "../../shared/dropdowns/context.js";
export declare const SelectMenuTrigger: import("react").ForwardRefExoticComponent<Partial<import("../../shared/style-utils/index.js").StyleProps<"root" | "label" | "labelTrack" | "focusIndicator" | "chevron" | "focusContainer">> & Omit<ButtonProps, "id" | "size" | "isDisabled" | "type" | "aria-controls" | "aria-expanded" | "aria-haspopup" | "onClick" | "variant"> & {
    placeholder?: string | undefined;
} & import("react").RefAttributes<HTMLButtonElement>>;
export declare function useSelectMenuTriggerProps({ activeDescendantId, descendantNodes, goToFirstMenuItem, goToLastMenuItem, isMenuOpen, listId, openMenu, popover, toggleMenu, triggerId, }: DropdownContextType): {
    triggerProps: {
        'aria-activedescendant': string | undefined;
        'aria-controls': string;
        'aria-expanded': boolean;
        'aria-haspopup': "listbox";
        'aria-labelledby': string;
        onClick: (() => void) | undefined;
        onKeyDown: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
        ref: (node: HTMLElement | null) => void;
        'aria-describedby': undefined;
        'aria-disabled': true | undefined;
        'aria-invalid': true | undefined;
        'aria-required': true | undefined;
        readOnly: true | undefined;
        id: string;
    };
};
