import { type ReactElement } from 'react';
import { type IconButtonProps } from "../../components/index.js";
import { type StyleProps } from "../../shared/style-utils/index.js";
import { type DialogContent } from "./dialog-content.js";
import { type DialogFooter } from "./dialog-footer.js";
import { type DialogHeader } from "./dialog-header.js";
type Parts = 'root' | 'dialogWrapper';
type DialogChildren = ReactElement<typeof DialogHeader> | ReactElement<typeof DialogContent> | ReactElement<typeof DialogFooter>;
export type DialogBaseProps = {
    /**
     * The element to render the dialog into. Defaults to the root element.
     * This prop is used by the Dropdown Popover components to render the dialog into the correct element for Mobile dropdowns.
     */
    container?: HTMLElement | null;
    /**
     * Children of Dialog
     * Component component used as slot for DialogHeader, DialogContent, DialogFooter
     */
    children: DialogChildren | DialogChildren[];
    /**
     * If `false`, the dialog will not close when the `Esc` key is pressed
     * @default true
     */
    closeOnEsc?: boolean;
    /**
     * If `false`, the dialog will not close when the overlay is clicked
     * @default true
     */
    closeOnOverlayClick?: boolean;
    /**
     * Id of element that is Dialog description
     * should be added to content which excepted to be added 'aria-describedby'
     */
    descriptionId?: string;
    /**
     * The delay in milliseconds for the dialog to animate in and out.
     */
    delay?: number;
    /**
     * Callback invoked to close the dialog.
     */
    onClose: () => void;
    /**
     * Callback fired when the escape key is pressed and focus is within dialog
     */
    onEscPress?: () => void;
    /**
     * Callback fired when the overlay is clicked.
     */
    onOverlayClick?: () => void;
    /**
     * If `true`, the dialog will be open.
     */
    open: boolean;
    /**
     * The `role` attribute of the dialog
     * @default 'dialog'
     */
    role?: 'dialog' | 'alertdialog';
    /**
     * Id of element that is Dialog title
     * should be added to content which should be marked as 'aria-labelledby'
     */
    titleId: string;
};
export type DialogProps = Partial<StyleProps<Parts>> & DialogBaseProps;
export type GetDialogStyles = () => Partial<Record<Parts, string>>;
type DialogHeaderParts = 'root' | 'closeButton';
/**
 * Base type for close button props
 * When not passed CloseButton will not render in UI.
 * @property label: Aria label content of the close Icon button.
 * @property onClick: Callback function to be invoked when the close button is clicked.
 * @property size: Size of the close button.
 */
export type DialogCloseButtonProps = {
    label: string;
    onClick: () => void;
    size?: IconButtonProps['size'];
};
export type DialogBaseHeaderProps = Partial<StyleProps<Parts>> & {
    /**
     * Children of Dialog Header
     * Component component used as slot for title, subheading
     */
    children: React.ReactNode;
};
export type DialogHeaderProps = DialogBaseHeaderProps & {
    closeButtonProps?: DialogCloseButtonProps;
};
export type GetDialogHeaderStyles = () => Partial<Record<DialogHeaderParts, string>>;
type DialogContentParts = 'root';
export type DialogContentProps = Partial<StyleProps<Parts>> & {
    children: React.ReactNode;
};
export type GetDialogContentStyles = () => Partial<Record<DialogContentParts, string>>;
type DialogFooterParts = 'root';
export type DialogFooterProps = Partial<StyleProps<Parts>> & {
    children: React.ReactNode;
};
export type GetDialogFooterStyles = () => Partial<Record<DialogFooterParts, string>>;
export {};
