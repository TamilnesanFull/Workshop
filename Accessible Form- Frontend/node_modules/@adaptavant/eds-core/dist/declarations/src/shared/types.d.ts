import { type GlobalTokens } from "../tokens/index.js";
/**
 * Makes all properties in an object type required while allowing their values
 * to be undefined. Useful for ensuring key presence without enforcing defined
 * values.
 */
export type RequiredKeys<T> = {
    [K in keyof T & {}]: T[K];
};
export type CSSProperties = React.CSSProperties | (React.CSSProperties & Partial<Record<`--${string}`, string>>);
export type ButtonTranslations = Record<'loadingLabel', string>;
export type Experimental_CalendarTranslations = Record<'previousMonthLabel' | 'nextMonthLabel', string>;
export type Experimental_NewFilterMenu = Record<'noResultsText', string>;
export type Experimental_Table = Record<'previousPageLabel' | 'nextPageLabel' | 'paginationContent', string>;
export type Experimental_TimePicker = Record<'errorMessage', string>;
export type Translations = Readonly<{
    button: ButtonTranslations;
    experimental_calendar: Experimental_CalendarTranslations;
    experimental_newFilterMenu: Experimental_NewFilterMenu;
    experimental_table: Experimental_Table;
}>;
export type BrandStyles = {
    buttonRadius: keyof GlobalTokens['radius'];
};
/**
 * Lightly modified version of Radix UI's `ForwardRefComponent` type.
 * @see https://www.radix-ui.com/docs/primitives/utilities/polymorphic
 */
export type Merge<P1 = {}, P2 = {}> = Omit<P1, keyof P2> & P2;
/**
 * Infers the OwnProps if E is a ForwardRefExoticComponentWithAs
 */
export type OwnProps<E> = E extends ForwardRefComponent<any, infer P> ? P : {};
/**
 * Infers the JSX.IntrinsicElement if E is a ForwardRefExoticComponentWithAs
 */
export type IntrinsicElement<E> = E extends ForwardRefComponent<infer I, any> ? I : never;
type ForwardRefExoticComponent<E, OwnProps> = React.ForwardRefExoticComponent<Merge<E extends React.ElementType ? React.ComponentPropsWithRef<E> : never, OwnProps & {
    as?: E;
}>>;
export interface ForwardRefComponent<IntrinsicElementString, OwnProps = {}> extends ForwardRefExoticComponent<IntrinsicElementString, OwnProps> {
    /**
     * When `as` prop is passed, use this overload.
     * Merges original own props (without DOM props) and the inferred props
     * from `as` element with the own props taking precendence.
     *
     * We explicitly avoid `React.ElementType` and manually narrow the prop types
     * so that events are typed when using JSX.IntrinsicElements.
     */
    <As = IntrinsicElementString>(props: As extends '' ? {
        as: keyof JSX.IntrinsicElements;
    } : As extends React.ComponentType<infer P> ? Merge<P, OwnProps & {
        as: As;
    }> : As extends keyof JSX.IntrinsicElements ? Merge<JSX.IntrinsicElements[As], OwnProps & {
        as: As;
    }> : never): React.ReactElement | null;
}
export {};
