export type DropdownAction = {
    type: 'ACTIVATE_FIRST_DESCENDANT';
} | {
    type: 'ACTIVATE_LAST_DESCENDANT';
} | {
    type: 'ACTIVATE_NEXT_DESCENDANT';
} | {
    type: 'ACTIVATE_PREVIOUS_DESCENDANT';
} | {
    type: 'CLEAR_SELECTED_ITEM';
} | {
    type: 'CLOSE_MENU';
} | {
    type: 'OPEN_MENU';
} | {
    type: 'SELECT_ITEM';
    payload: {
        optionId: string;
    };
} | {
    type: 'SET_DESCENDANT_NODES';
    payload: {
        nodes: NodeListOf<HTMLElement> | undefined;
    };
} | {
    type: 'UPDATE_DESCENDANT_SEARCH_TERM';
    payload: {
        eventKey: string;
    };
} | {
    type: 'SET_ACTIVE_DESCENDANT_INDEX';
    payload: {
        activeIndex: number;
        activeId: string;
    };
} | {
    type: 'SET_HIGHLIGHTED_INDEX';
    payload: {
        activeIndex: number;
    };
};
export type DropdownState = {
    /**
     * The index of the active descendantIndex.
     * -1 means there is no active descendant.
     *
     * @default -1
     */
    activeDescendantIndex: number;
    /**
     * The count of descendant nodes.
     *
     * @default 0
     */
    descendantCount: number;
    /** The HTML node elements containing each menu item. */
    descendantNodes: NodeListOf<HTMLElement> | undefined;
    /**
     * Typing any a-z character should focus the menu item with a label that starts
     * with the typed character (if exists).
     *
     * @see https://www.w3.org/WAI/ARIA/apg/patterns/menu-button/examples/menu-button-actions-active-descendant/
     */
    descendantSearchTerm: string;
    /**
     * Indicates if the menu is open.
     *
     * @default false
     */
    isMenuOpen: boolean;
    /**
     * Time of the last keypress for handling quick successive keypresses.
     * Value is a timestamp in milliseconds.
     *
     * @default 0
     */
    lastKeyPressTime: number;
    /**
     * The index of the selected menu item.
     * -1 means there is no selected item.
     *
     * @default undefined
     */
    selectedOptionId: string | undefined;
};
export declare const initialDropdownState: {
    activeDescendantIndex: number;
    descendantCount: number;
    descendantNodes: undefined;
    descendantSearchTerm: string;
    isMenuOpen: false;
    lastKeyPressTime: number;
    selectedOptionId: undefined;
};
export declare function dropdownReducer(state: DropdownState, action: DropdownAction): DropdownState;
