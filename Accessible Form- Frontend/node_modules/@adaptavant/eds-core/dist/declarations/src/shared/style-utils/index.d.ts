import { type CSSProperties, type RequiredKeys } from "../types.js";
export type StylePart = {
    className: string | undefined;
    style: CSSProperties;
};
/** @private */
export type StyleProps<Part extends string> = StylePart & {
    classNames: Partial<Record<Part, string | undefined> & {
        root: never;
    }>;
    styles: Partial<Record<Part, CSSProperties> & {
        root: never;
    }>;
};
type StylePropKeys = keyof StyleProps<string>;
/**
 * Enforces the presence of all style-related keys from StyleProps in
 * component props. Each key must exist, but their values can be any type,
 * including `undefined`.
 */
export type RequiredStyleProps<ComponentProps extends Partial<Record<StylePropKeys, any>>> = RequiredKeys<Pick<ComponentProps, StylePropKeys>>;
/**
 * Utility type for extracting the Parts type from a components props.
 *
 * @example
 * type ButtonParts = InferParts<ButtonProps>;
 */
export type ExtractParts<Props> = Props extends {
    classNames?: infer Parts;
} ? keyof Parts : never;
type GetStylePropsArgs<Part extends string> = StyleProps<Part> & {
    tw?: Partial<Record<Part, string>>;
};
export type GetStylePropsReturn<Part> = (
/**
 * The "part" of the component to get style props for.
 */
part: Part, 
/**
 * An object of style properties to merge with the component's styles.
 */
styleProps?: CSSProperties) => StylePart;
/** @private */
export declare function getStyleProps<Part extends string>({ className, classNames, style, styles, tw, }: GetStylePropsArgs<Part>): GetStylePropsReturn<Part>;
export declare function useComponentStyleParts<Part extends string>(args: GetStylePropsArgs<Part>, components: Part[]): Record<Part, StylePart>;
export {};
