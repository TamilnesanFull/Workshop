type UseFilteredOptionsArgs<Option extends object> = {
    /**
     * Initial options array from which to filter.
     *
     * This should include all possible options before any search filtering is
     * applied.
     */
    initialOptions: Option[];
    /**
     * Function to filter options based on search term.
     *
     * This function should return a filtered subset of `initialOptions` that
     * match the search criteria.
     */
    searchFunction: (args: {
        options: Option[];
        searchTerm: string;
    }) => Option[];
    /**
     * The value of the input (controlled).
     */
    value?: string;
    /**
     * Handler that is called when the input value changes (controlled).
     */
    onValueChange?: (newValue: string) => void;
};
/**
 * Manages state and logic for filtering options based on user input.
 *
 * Simplifies filtering data on search terms, managing search state, optimising
 * performance with `useDeferredValue` for input responsiveness, and handling
 * search inputs.
 */
export declare function useFilteredOptions<Option extends object>({ initialOptions, onValueChange: controlledOnChange, searchFunction, value: controlledValue, }: UseFilteredOptionsArgs<Option>): {
    /**
     * Currently filtered options matching the search term.
     */
    filteredOptions: Option[];
    /**
     * Prop getter function to be spread onto the search input component.
     */
    getSearchInputProps: () => {
        onClear: () => void;
        onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
        value: string;
    };
    /**
     * Indicates whether the displayed options are based on the latest search
     * term or a deferred version.
     */
    isStale: boolean;
    searchTerm: string;
};
export {};
