import { forwardRef, useCallback } from 'react';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { g as getTextInputPrimitiveStyles } from './styles-12c293a4.esm.js';
import { jsx } from 'react/jsx-runtime';
import { B as Box } from './box-a5dda214.esm.js';

const TextInputPrimitive = /*#__PURE__*/forwardRef(function TextInputPrimitive({
  'aria-disabled': ariaDisabled,
  className = '',
  classNames = {},
  onKeyDown,
  size,
  style = {},
  styles = {},
  type = 'text',
  ...consumerProps
}, forwardedRef) {
  const handleKeyDown = useCallback(event => {
    if (ariaDisabled && event.key !== 'Tab') {
      event.preventDefault();
    }
    if (onKeyDown) {
      onKeyDown(event);
    }
  }, [ariaDisabled, onKeyDown]);
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getTextInputPrimitiveStyles({
      size
    })
  });
  return /*#__PURE__*/jsx(Box, {
    ...consumerProps,
    "aria-disabled": ariaDisabled,
    as: "input",
    autoComplete: ariaDisabled ? 'off' : consumerProps.autoComplete,
    onKeyDown: handleKeyDown,
    ref: forwardedRef,
    type: type,
    ...styleProps('root')
  });
});

export { TextInputPrimitive as T };
