'use client';
import { mergeRefs } from '@react-aria/utils';
import { forwardRef, useState, useEffect, useCallback } from 'react';
import { D as DropdownDownIcon } from './dropdown-down-icon-372942b0.esm.js';
import { D as DropdownUpIcon } from './dropdown-up-icon-07da5d49.esm.js';
import { useDropdownContext } from './context-6e374e37.esm.js';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { m as mergeProps } from './merge-props-5c13cba9.esm.js';
import { useDropdownMenu } from './context-bbc9b8ce.esm.js';
import { a as getDropdownMenuTriggerStyles } from './styles-c330e9dd.esm.js';
import { jsx } from 'react/jsx-runtime';
import { Button } from './button-22306f71.esm.js';
import './styles-53001919.esm.js';
import './tw-c6a9a210.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './cx-c5d68be6.esm.js';
import 'clsx';
import './merge-ids-c2d2d3d7.esm.js';
import './styles-56e113a0.esm.js';

const DropdownMenuTrigger = /*#__PURE__*/forwardRef(function DropdownMenuTrigger({
  className = '',
  classNames = {},
  iconEnd,
  size = 'standard',
  style = {},
  styles = {},
  variant = 'neutralSecondary',
  ...consumerProps
}, forwardedRef) {
  const context = useDropdownContext();
  const {
    isDisabled
  } = useDropdownMenu();
  const {
    triggerProps
  } = useDropdownMenuTriggerProps(context, isDisabled);
  const defaultIconEnd = context.isMenuOpen ? DropdownUpIcon : DropdownDownIcon;
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getDropdownMenuTriggerStyles({
      size,
      variant
    })
  });
  return /*#__PURE__*/jsx(Button, {
    ...mergeProps(consumerProps, triggerProps),
    iconEnd: iconEnd ? iconEnd : defaultIconEnd,
    isDisabled: isDisabled,
    ref: mergeRefs(triggerProps.ref, forwardedRef),
    size: size,
    variant: variant,
    ...styleProps('root')
  });
});
DropdownMenuTrigger.displayName = 'DropdownMenuTrigger';
function useDropdownMenuTriggerProps({
  descendantNodes,
  goToFirstMenuItem,
  goToLastMenuItem,
  isMenuOpen,
  listId,
  openMenu,
  popover,
  toggleMenu,
  triggerId
}, isDisabled) {
  const [lastKeyPressed, setLastKeyPressed] = useState();
  useEffect(() => {
    if (!isMenuOpen || !descendantNodes || !lastKeyPressed) return;
    if (lastKeyPressed === 'ArrowUp') {
      goToLastMenuItem();
    } else {
      goToFirstMenuItem();
    }
    setLastKeyPressed(undefined);
  }, [descendantNodes, goToFirstMenuItem, goToLastMenuItem, isMenuOpen, lastKeyPressed]);
  const onKeyDown = useCallback(event => {
    if (!supportedKeys.includes(event.code)) return;
    event.preventDefault();
    setLastKeyPressed(event.code);
    openMenu();
  }, [openMenu]);
  return {
    triggerProps: {
      ...popover.getReferenceProps(),
      'aria-controls': listId,
      'aria-expanded': isMenuOpen,
      'aria-haspopup': true,
      'aria-disabled': isDisabled || undefined,
      id: triggerId,
      onClick: isDisabled ? undefined : toggleMenu,
      onKeyDown: isDisabled ? undefined : onKeyDown
    }
  };
}
const supportedKeys = ['ArrowDown', 'ArrowUp', 'Enter', 'Space'];

export { DropdownMenuTrigger, useDropdownMenuTriggerProps };
