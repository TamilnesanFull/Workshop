'use client';
import { createContext, useContext } from 'react';
import { m as mergeIds } from './merge-ids-c2d2d3d7.esm.js';

const FieldsetContext = /*#__PURE__*/createContext(undefined);
const FieldsetContextProvider = FieldsetContext.Provider;

/**
 * State for a control input based on context and optional props.
 * Returns object with merged context and prop values for each property.
 */
function useControlInputState(props) {
  const context = useContext(FieldsetContext);
  if (!context) {
    return {
      isDisabled: Boolean(props.isDisabled),
      isInvalid: Boolean(props.isInvalid),
      isRequired: Boolean(props.isRequired)
    };
  }
  return {
    isDisabled: props.isDisabled || context.isDisabled || false,
    isInvalid: props.isInvalid || context.isInvalid || false,
    isRequired: props.isRequired || context.isRequired || false
  };
}

/**
 * Returns aria attributes for a control input based on context and
 * optional props.
 */
function useControlA11yProps(props) {
  const context = useContext(FieldsetContext);
  if (!context) return;
  const {
    description,
    descriptionId,
    errorMessage,
    errorMessageId
  } = context;
  return {
    'aria-describedby': mergeIds(description ? descriptionId : undefined, errorMessage ? errorMessageId : undefined),
    'aria-disabled': props.isDisabled || context.isDisabled || undefined,
    'aria-invalid': props.isInvalid || context.isInvalid || undefined,
    'aria-required': props.isRequired || context.isRequired || undefined
  };
}

export { FieldsetContextProvider, useControlA11yProps, useControlInputState };
