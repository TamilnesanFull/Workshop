'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var utils$1 = require('./utils-72a515c0.cjs.prod.js');
var index = require('./index-7955fb8e.cjs.prod.js');
var use_viewport_below_or_equal = require('./use-viewport-below-or-equal-8326f73f.cjs.prod.js');
var dialogHeader = require('./dialog-header-f473f372.cjs.prod.js');
var utils = require('./utils-a47fd647.cjs.prod.js');
var context = require('./context-40089a09.cjs.prod.js');
var tw = require('./tw-9929267e.cjs.prod.js');
var jsxRuntime = require('react/jsx-runtime');
var sheet = require('./sheet-572b219b.cjs.prod.js');
var dialog = require('./dialog-7dd5a841.cjs.prod.js');
require('./tw-merge-885aa7a8.cjs.prod.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.prod.js');
require('./styles-4e86148b.cjs.prod.js');
require('./box-e39057bd.cjs.prod.js');
require('./icon-button-42ea08f2.cjs.prod.js');
require('./button-c6c568ca.cjs.prod.js');
require('./use-button-c05d68a1.cjs.prod.js');
require('./styles-3c34b522.cjs.prod.js');
require('./styles-4d7be1cb.cjs.prod.js');
require('./loading-8f0b3165.cjs.prod.js');
require('./grow-your-brand-icon-cce9ad51.cjs.prod.js');
require('./styles-30814c9d.cjs.prod.js');
require('./setmore-icon-24e17637.cjs.prod.js');
require('./translations-4a8a2311.cjs.prod.js');
require('./config-7c4ee3f2.cjs.prod.js');
require('./remove-icon-50c42d9b.cjs.prod.js');

// ------------------------------ Modal Wrapper ---------------------------------------

const getModalStyles = () => ({
  modalWrapper: tw.tw``,
  root: tw.tw``
});

/**
 * Modal
 *
 * @description
 * A modal component that prevents interaction with the rest of the application.
 * Modal component renders its children (ModalTitle, ModalContent, ModalFooter) nodes in front of a backdrop component.
 * Offers important features:
 * - It properly manages focus; moves inside modal, and keeping it there until the modal is closed.
 * - It disables scrolling of the page content while open.
 * - It render with Portal by default to avoid Stacking issues.
 * - Ensure Modal never touch edge of screen (16px space is reserved).
 * - Manages the appropriate ARIA roles.
 * - Creates a backdrop, for disabling interaction below the modal.
 */

function Modal({
  children,
  className = '',
  classNames = {},
  mobileFriendly = true,
  size = 640,
  style = {},
  styles = {},
  togglePoint = utils$1.MOBILE_TOGGLE_POINT,
  ...consumerProps
}) {
  const isResponsiveViewport = use_viewport_below_or_equal.useIsViewportBelowOrEqual(togglePoint);
  const styleProps = index.getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getModalStyles()
  });
  utils.validateChildren(React.Children.toArray(children), [ModalHeader, ModalContent, ModalFooter]);
  const shouldUseSheet = mobileFriendly && isResponsiveViewport;
  return /*#__PURE__*/jsxRuntime.jsx(context.ModalProvider, {
    value: {
      mobileFriendly,
      togglePoint
    },
    children: shouldUseSheet ? /*#__PURE__*/jsxRuntime.jsx(sheet.Sheet, {
      ...consumerProps,
      classNames: {
        sheetWrapper: styleProps('modalWrapper').className
      },
      ...styleProps('root'),
      children: children
    }) : /*#__PURE__*/jsxRuntime.jsx(dialog.Dialog, {
      ...consumerProps,
      classNames: {
        dialogWrapper: styleProps('modalWrapper').className
      },
      ...styleProps('root'),
      style: {
        ...style,
        width: `${size}px`
      } // Override width with size prop
      ,
      children: children
    })
  });
}
Modal.displayName = 'Modal';
const ModalContent = dialogHeader.DialogContent;
ModalContent.displayName = 'ModalContent';
const ModalFooter = dialogHeader.DialogFooter;
ModalFooter.displayName = 'ModalFooter';
function ModalHeader({
  children,
  closeButtonProps,
  ...consumerProps
}) {
  const {
    mobileFriendly,
    togglePoint
  } = context.useModalContext();
  const isResponsiveViewport = use_viewport_below_or_equal.useIsViewportBelowOrEqual(togglePoint);
  const updatedCloseButtonProps = mobileFriendly && isResponsiveViewport ? closeButtonProps ? {
    ...closeButtonProps,
    size: 'large'
  } : undefined : closeButtonProps;
  return /*#__PURE__*/jsxRuntime.jsx(dialogHeader.DialogHeader, {
    ...consumerProps,
    closeButtonProps: updatedCloseButtonProps,
    children: children
  });
}
ModalHeader.displayName = 'ModalHeader';

exports.Modal = Modal;
exports.ModalContent = ModalContent;
exports.ModalFooter = ModalFooter;
exports.ModalHeader = ModalHeader;
