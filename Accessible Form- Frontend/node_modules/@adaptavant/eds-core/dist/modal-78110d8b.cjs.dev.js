'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var utils$1 = require('./utils-1d447d37.cjs.dev.js');
var index = require('./index-3bdbdb42.cjs.dev.js');
var use_viewport_below_or_equal = require('./use-viewport-below-or-equal-a63c017b.cjs.dev.js');
var dialogHeader = require('./dialog-header-6abacd43.cjs.dev.js');
var utils = require('./utils-414a3959.cjs.dev.js');
var context = require('./context-50a769da.cjs.dev.js');
var tw = require('./tw-cabb7e4c.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
var sheet = require('./sheet-7191938f.cjs.dev.js');
var dialog = require('./dialog-dd17b89f.cjs.dev.js');
require('./tw-merge-70bc959c.cjs.dev.js');
require('tailwind-merge');
require('../tokens/dist/adaptavant-eds-core-tokens.cjs.dev.js');
require('./styles-3403aaec.cjs.dev.js');
require('./box-88b49271.cjs.dev.js');
require('./icon-button-705aec14.cjs.dev.js');
require('./button-4b229f71.cjs.dev.js');
require('./use-button-2241e53a.cjs.dev.js');
require('./styles-8337486f.cjs.dev.js');
require('./styles-554c7d0d.cjs.dev.js');
require('./loading-902bdbe2.cjs.dev.js');
require('./grow-your-brand-icon-6c89c797.cjs.dev.js');
require('./styles-32c512c4.cjs.dev.js');
require('./setmore-icon-45794869.cjs.dev.js');
require('./translations-433e453a.cjs.dev.js');
require('./config-cec3759c.cjs.dev.js');
require('./remove-icon-ad27b88f.cjs.dev.js');

// ------------------------------ Modal Wrapper ---------------------------------------

const getModalStyles = () => ({
  modalWrapper: tw.tw``,
  root: tw.tw``
});

/**
 * Modal
 *
 * @description
 * A modal component that prevents interaction with the rest of the application.
 * Modal component renders its children (ModalTitle, ModalContent, ModalFooter) nodes in front of a backdrop component.
 * Offers important features:
 * - It properly manages focus; moves inside modal, and keeping it there until the modal is closed.
 * - It disables scrolling of the page content while open.
 * - It render with Portal by default to avoid Stacking issues.
 * - Ensure Modal never touch edge of screen (16px space is reserved).
 * - Manages the appropriate ARIA roles.
 * - Creates a backdrop, for disabling interaction below the modal.
 */

function Modal({
  children,
  className = '',
  classNames = {},
  mobileFriendly = true,
  size = 640,
  style = {},
  styles = {},
  togglePoint = utils$1.MOBILE_TOGGLE_POINT,
  ...consumerProps
}) {
  const isResponsiveViewport = use_viewport_below_or_equal.useIsViewportBelowOrEqual(togglePoint);
  const styleProps = index.getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getModalStyles()
  });
  utils.validateChildren(React.Children.toArray(children), [ModalHeader, ModalContent, ModalFooter]);
  const shouldUseSheet = mobileFriendly && isResponsiveViewport;
  return /*#__PURE__*/jsxRuntime.jsx(context.ModalProvider, {
    value: {
      mobileFriendly,
      togglePoint
    },
    children: shouldUseSheet ? /*#__PURE__*/jsxRuntime.jsx(sheet.Sheet, {
      ...consumerProps,
      classNames: {
        sheetWrapper: styleProps('modalWrapper').className
      },
      ...styleProps('root'),
      children: children
    }) : /*#__PURE__*/jsxRuntime.jsx(dialog.Dialog, {
      ...consumerProps,
      classNames: {
        dialogWrapper: styleProps('modalWrapper').className
      },
      ...styleProps('root'),
      style: {
        ...style,
        width: `${size}px`
      } // Override width with size prop
      ,
      children: children
    })
  });
}
Modal.displayName = 'Modal';
const ModalContent = dialogHeader.DialogContent;
ModalContent.displayName = 'ModalContent';
const ModalFooter = dialogHeader.DialogFooter;
ModalFooter.displayName = 'ModalFooter';
function ModalHeader({
  children,
  closeButtonProps,
  ...consumerProps
}) {
  const {
    mobileFriendly,
    togglePoint
  } = context.useModalContext();
  const isResponsiveViewport = use_viewport_below_or_equal.useIsViewportBelowOrEqual(togglePoint);
  const updatedCloseButtonProps = mobileFriendly && isResponsiveViewport ? closeButtonProps ? {
    ...closeButtonProps,
    size: 'large'
  } : undefined : closeButtonProps;
  return /*#__PURE__*/jsxRuntime.jsx(dialogHeader.DialogHeader, {
    ...consumerProps,
    closeButtonProps: updatedCloseButtonProps,
    children: children
  });
}
ModalHeader.displayName = 'ModalHeader';

exports.Modal = Modal;
exports.ModalContent = ModalContent;
exports.ModalFooter = ModalFooter;
exports.ModalHeader = ModalHeader;
