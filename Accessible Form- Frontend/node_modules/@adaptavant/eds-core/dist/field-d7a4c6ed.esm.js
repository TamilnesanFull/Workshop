'use client';
import { useRef } from 'react';
import { u as useComponentStyleParts } from './index-dd10a77e.esm.js';
import { c as composeId } from './compose-id-1f2e6139.esm.js';
import { useProvidedOrGeneratedId } from './use-provided-or-generated-id-70d42050.esm.js';
import { FieldContextProvider } from './context-2a1498a6.esm.js';
import { g as getFieldStyles } from './styles-267c9284.esm.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { S as Stack } from './stack-090617c5.esm.js';
import { L as Label } from './label-617d5123.esm.js';
import { T as Text } from './text-3fc88ad6.esm.js';
import { C as Counter } from './counter-5be5643b.esm.js';
import { F as FieldErrorMessage } from './field-error-message-bfbfd8e7.esm.js';
import { Track } from './track-26dc4fe4.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './tw-c6a9a210.esm.js';
import './error-icon-1fdb44d1.esm.js';
import './styles-53001919.esm.js';
import './align-child-to-text-c6521616.esm.js';

/**
 * Field
 *
 * @description
 * The Field component exposes the elements around form inputs, and an API to
 * compose them.
 */
function Field({
  children,
  className = '',
  classNames = {},
  controlId: maybeControlId,
  counter,
  description,
  errorMessage,
  isDisabled = false,
  isRequired = false,
  label,
  labelVisibility = 'visible',
  secondaryLabel,
  size = 'standard',
  style = {},
  styles = {},
  ...consumerProps
}) {
  const {
    controlId,
    descriptionId,
    errorMessageId,
    labelId
  } = useFieldIds(maybeControlId);
  const parts = useComponentStyleParts({
    className,
    classNames,
    style,
    styles,
    tw: getFieldStyles({
      isDisabled,
      labelVisibility,
      size
    })
  }, ['root', 'label', 'secondaryLabel', 'description', 'errorTrack', 'errorIcon', 'errorMessage', 'counter']);
  const labelStyleProps = {
    ...parts.label,
    classNames: {
      secondaryLabel: parts.secondaryLabel.className
    },
    styles: {
      secondaryLabel: parts.secondaryLabel.style
    }
  };
  const fieldErrorMessageStyleProps = {
    ...parts.errorTrack,
    classNames: {
      errorIcon: parts.errorIcon.className,
      errorMessage: parts.errorMessage.className
    },
    styles: {
      errorIcon: parts.errorIcon.style,
      errorMessage: parts.errorMessage.style
    }
  };
  const labelRef = useRef(null);
  const showCounterOrErrorMessage = Boolean(errorMessage || counter);
  return /*#__PURE__*/jsx(FieldContextProvider, {
    value: {
      controlId,
      description,
      descriptionId,
      errorMessage,
      errorMessageId,
      isDisabled,
      isInvalid: Boolean(errorMessage),
      isRequired,
      labelId,
      labelRef,
      label,
      size,
      variant: 'standard'
    },
    children: /*#__PURE__*/jsxs(Stack, {
      ...consumerProps,
      ...parts.root,
      children: [/*#__PURE__*/jsx(Label, {
        htmlFor: controlId,
        id: labelId,
        labelVisibility: labelVisibility,
        ref: labelRef,
        secondaryLabel: secondaryLabel,
        size: size,
        ...labelStyleProps,
        children: label
      }), description ? /*#__PURE__*/jsx(Text, {
        id: descriptionId,
        ...parts.description,
        children: description
      }) : null, children, showCounterOrErrorMessage ? /*#__PURE__*/jsx(Track, {
        className: "gap-2",
        railEnd: counter ? /*#__PURE__*/jsx(Counter, {
          ...counter,
          ...parts.counter
        }) : null,
        verticalAlign: "top",
        children: errorMessage ? /*#__PURE__*/jsx(FieldErrorMessage, {
          id: errorMessageId,
          isDisabled: isDisabled,
          size: size,
          ...fieldErrorMessageStyleProps,
          children: errorMessage
        }) : null
      }) : null]
    })
  });
}
Field.displayName = 'Field';
function useFieldIds(id) {
  const controlId = useProvidedOrGeneratedId(id);
  return {
    controlId,
    descriptionId: composeId(controlId, 'description'),
    errorMessageId: composeId(controlId, 'error-message'),
    labelId: composeId(controlId, 'label')
  };
}

export { Field, useFieldIds };
