import { useCallback } from 'react';
import { g as getRelativeBoundingClientRect } from './utils-0956ef0f.esm.js';

/**
 * Hook to ensure that a highlighted element is visible within its own scrollable parent container not the viewport.
 *
 * @param {boolean} isHighlighted - Indicates if the element is highlighted or not.
 * @returns {Function} A callback ref function to be used with the element that needs to be scrolled into view.
 */
const useScrollIntoView = isHighlighted => {
  return useCallback(node => {
    if (node && isHighlighted && node.parentElement) {
      const parent = node.parentElement;
      const {
        top,
        bottom
      } = getRelativeBoundingClientRect(node, parent);
      if (top < 0) {
        // Scroll up if the top of the node is above the visible area
        parent.scrollTop += top;
      } else if (bottom > parent.clientHeight) {
        // Scroll down if the bottom of the node is below the visible area
        parent.scrollTop += bottom - parent.clientHeight;
      }
    }
  }, [isHighlighted]);
};

export { useScrollIntoView as u };
