'use client';
import { forwardRef, Fragment } from 'react';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { i as getButtonStyles } from './styles-56e113a0.esm.js';
import { useButton } from './use-button-36a8da62.esm.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import { B as Box } from './box-a5dda214.esm.js';
import { L as Loading } from './loading-7c0b35b6.esm.js';
import { useTranslations } from './translations-1012abc4.esm.js';
import { useBrandStyles } from './config-e49cd2d8.esm.js';
import { Track } from './track-26dc4fe4.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import './tw-c6a9a210.esm.js';
import './grow-your-brand-icon-b4a6e8da.esm.js';
import './styles-53001919.esm.js';
import './setmore-icon-0a46ffb4.esm.js';

const Button = /*#__PURE__*/forwardRef(function Button(props, forwardedRef) {
  const {
    button: translations
  } = useTranslations();
  const {
    children,
    className = '',
    classNames = {},
    iconEnd: IconEnd,
    iconStart: IconStart,
    isDisabled = false,
    isLoading = false,
    isPressed,
    loadingLabel = translations.loadingLabel,
    onClick,
    size = 'standard',
    style = {},
    styles = {},
    type = 'button',
    variant = 'accentPrimary',
    ...consumerProps
  } = props;
  const {
    buttonProps
  } = useButton({
    isDisabled,
    isLoading,
    isPressed,
    onClick
  }, forwardedRef);
  const config = useBrandStyles();
  const styleProps = getStyleProps({
    className,
    classNames,
    style,
    styles,
    tw: getButtonStyles({
      ...config,
      isDisabled,
      isLoading,
      isPressed: Boolean(isPressed),
      size,
      variant
    })
  });
  const labelTrackStyles = styleProps('labelTrack');
  const labelStyles = styleProps('label');
  const trackStyleProps = {
    className: labelTrackStyles.className,
    classNames: {
      center: labelStyles.className
    },
    style: labelTrackStyles.style,
    styles: {
      center: labelStyles.style
    }
  };
  return /*#__PURE__*/jsxs(Box, {
    ...consumerProps,
    ...buttonProps,
    as: "button",
    type: type,
    ...styleProps('root'),
    children: [/*#__PURE__*/jsx(Track, {
      as: "span",
      railEnd: IconEnd ? /*#__PURE__*/jsx(IconEnd, {
        size: buttonSizeToIconSize[size],
        ...styleProps('iconEnd')
      }) : null,
      railStart: IconStart ? /*#__PURE__*/jsx(IconStart, {
        size: buttonSizeToIconSize[size],
        ...styleProps('iconStart')
      }) : null,
      ...trackStyleProps,
      children: children
    }), /*#__PURE__*/jsx(Box, {
      "aria-live": "assertive",
      as: "span",
      ...styleProps('loadingWrapper'),
      children: isLoading ? /*#__PURE__*/jsxs(Fragment, {
        children: [/*#__PURE__*/jsx(Box, {
          as: "span",
          className: "sr-only",
          children: loadingLabel
        }), /*#__PURE__*/jsx(Loading, {
          size: buttonSizeToIconSize[size],
          tone: "neutralPrimary",
          ...styleProps('loading')
        })]
      }) : null
    })]
  });
});
Button.displayName = 'Button';
const buttonSizeToIconSize = {
  large: '20',
  small: '16',
  standard: '16'
};

export { Button, buttonSizeToIconSize };
