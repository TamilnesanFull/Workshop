'use client';
import { buttonSizeToIconSize } from './button-22306f71.esm.js';
import { g as getStyleProps } from './index-dd10a77e.esm.js';
import { Tooltip } from './tooltip-43d67011.esm.js';
import { b as buttonBaseStyles, f as buttonSizeStylesLookup } from './styles-56e113a0.esm.js';
import { i as iconButtonSizeStylesLookup } from './styles-6927e7c9.esm.js';
import { t as tw } from './tw-c6a9a210.esm.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import { B as Box } from './box-a5dda214.esm.js';
import { m as mergeProps } from './merge-props-5c13cba9.esm.js';
import { S as SetmoreIcon } from './setmore-icon-0a46ffb4.esm.js';
import './tw-merge-91a8b6ee.esm.js';
import 'tailwind-merge';
import '../tokens/dist/adaptavant-eds-core-tokens.esm.js';
import 'react';
import '@react-aria/utils';
import './cx-c5d68be6.esm.js';
import 'clsx';
import './merge-ids-c2d2d3d7.esm.js';
import './styles-53001919.esm.js';

const getGetProStyles = ({
  isRounded,
  size,
  isExpanded
}) => {
  return {
    root: tw`
			${buttonBaseStyles}
			${getProBaseStyles}
			${getProGapStylesLookup[size]}
			${isExpanded ? buttonSizeStylesLookup[size] : iconButtonSizeStylesLookup[size]} 
			${isRounded ? `rounded-full` : `rounded-8px`}
			group/get-pro
		`,
    iconAfterAnimation: tw`
			group-focus/get-pro:animate-getpro-slide-in
			group-hover/get-pro:animate-getpro-slide-in
			fill-positive
			translate-y-full
		`,
    iconBeforeAnimation: tw`
			absolute 
			group-focus/get-pro:animate-getpro-slide-up
			group-hover/get-pro:animate-getpro-slide-up
			left-0 
			fill-positive
			top-0 
		`,
    iconWrapper: tw`
			${isExpanded ? `-ms-1` : ``}
			leading-none
			overflow-hidden 
			relative 
		`,
    label: tw``
  };
};
const getProBaseStyles = tw`
		active:bg-positive-secondary-pressed
		aria-expanded:bg-positive-secondary-pressed
		bg-positive-secondary
		hover:bg-positive-secondary-hover
		text-positive-secondary
`;
const getProGapStylesLookup = {
  large: tw`gap-2`,
  small: tw`gap-0.5`,
  standard: tw`gap-1`
};

/**
 * GetPro
 *
 * @description
 * GetPro is a visual indicator, acts as a trigger to switch to "Paid" plans.
 */

const GetPro = ({
  className = '',
  classNames = {},
  isExpanded = false,
  isRounded = false,
  label = 'Get Pro',
  size = 'standard',
  style = {},
  styles = {},
  ...consumerProps
}) => {
  const styleProps = getStyleProps({
    className,
    style,
    classNames,
    styles,
    tw: getGetProStyles({
      isRounded,
      size,
      isExpanded
    })
  });
  if (isExpanded) {
    return /*#__PURE__*/jsxs(Box, {
      as: "button",
      ...styleProps('root'),
      ...consumerProps,
      children: [/*#__PURE__*/jsxs(Box, {
        ...styleProps('iconWrapper'),
        children: [/*#__PURE__*/jsx(SetmoreIcon, {
          ...styleProps('iconAfterAnimation'),
          size: buttonSizeToIconSize[size]
        }), /*#__PURE__*/jsx(SetmoreIcon, {
          ...styleProps('iconBeforeAnimation'),
          size: buttonSizeToIconSize[size]
        })]
      }), /*#__PURE__*/jsx(Box, {
        as: "span",
        role: "text",
        ...styleProps('label'),
        children: label
      })]
    });
  }
  return /*#__PURE__*/jsx(Tooltip, {
    content: label,
    placement: "bottom",
    children: ({
      triggerProps
    }) => {
      return /*#__PURE__*/jsx(Box, {
        "aria-label": label,
        as: "button",
        ...styleProps('root'),
        ...mergeProps(triggerProps, consumerProps),
        children: /*#__PURE__*/jsxs(Box, {
          ...styleProps('iconWrapper'),
          children: [/*#__PURE__*/jsx(SetmoreIcon, {
            ...styleProps('iconAfterAnimation'),
            size: buttonSizeToIconSize[size]
          }), /*#__PURE__*/jsx(SetmoreIcon, {
            ...styleProps('iconBeforeAnimation'),
            size: buttonSizeToIconSize[size]
          })]
        })
      });
    }
  });
};

export { GetPro };
