import defaultTheme from 'tailwindcss/defaultTheme';
import plugin from 'tailwindcss/plugin';

// Generated file - do not edit directly
const commonBlocklist = ['flex', 'flex-1', 'flex-row', 'flex-row-reverse', 'flex-col', 'flex-wrap', 'flex-nowrap', 'justify-end', 'justify-center', 'justify-between', 'items-start', 'items-end', 'items-center', 'items-baseline', 'items-stretch', 'ps-0.5', 'ps-1', 'ps-1.5', 'ps-2', 'ps-3', 'ps-8', 'pe-0.5', 'pe-1', 'pe-1.5', 'pe-12', 'pe-2', 'pe-3', 'pb-0', 'pb-3', 'pb-6', 'pb-[calc(env(safe-area-inset-bottom)\+24px)]', 'pb-[calc(env(safe-area-inset-bottom)\\\+24px)]', 'pt-2', 'pt-4', 'pt-5', 'pt-9', 'mx-auto', 'my-0', 'my-0.5', 'my-1', 'my-10', 'mt-1', 'mt-2', 'mt-3', 'mt-4', 'mt-5', 'mt-[1px]', 'mt-[5px]', 'mb-1', 'mb-2', 'mb-4', 'm-4', 'm-5', 'm-auto', 'p-0', 'p-0.5', 'p-1', 'p-1.5', 'p-2', 'p-3', 'p-4', 'p-6', 'fill-accent', 'fill-caution', 'fill-critical', 'fill-critical-onPrimary', 'fill-current', 'fill-decoration-brand', 'fill-decoration-teleport', 'fill-inverse', 'fill-onPrimary', 'fill-positive', 'fill-primary', 'fill-secondary', 'fill-status-available', 'fill-status-away', 'fill-status-busy', 'fill-status-icon', 'fill-status-offline', 'fill-tertiary', 'fill-text-inverse', 'fill-text-inverse-critical', 'fill-text-inverse-positive', 'fill-transparent', 'stroke-accent', 'stroke-critical', 'stroke-critical-onPrimary', 'stroke-current', 'stroke-inverse', 'stroke-onPrimary', 'stroke-primary', 'stroke-secondary', 'stroke-tertiary', 'stroke-text-inverse-secondary', 'stroke-transparent', 'stroke-1', 'stroke-2', 'stroke-[2px]', 'stroke-[3px]', 'bg-[#D4F7E9]', 'bg-[red]', 'bg-accent', 'bg-accent-secondary', 'bg-avatar', 'bg-canvas', 'bg-canvas-secondary', 'bg-canvas-tertiary', 'bg-caution', 'bg-caution-secondary', 'bg-critical', 'bg-critical-hover', 'bg-critical-pressed', 'bg-critical-secondary', 'bg-inverse', 'bg-inverse-secondary', 'bg-inverse-tertiary', 'bg-modal-overlay', 'bg-neutral', 'bg-neutral-disabled', 'bg-neutral-secondary', 'bg-neutral-tertiary', 'bg-positive-secondary', 'bg-transparent', 'bg-gradient-to-r', 'bg-none', 'text-heading-12', 'text-heading-14', 'text-heading-16', 'text-heading-18', 'text-heading-20', 'text-heading-24', 'text-heading-28', 'text-heading-32', 'text-body-8', 'text-body-10', 'text-body-12', 'text-body-14', 'text-body-16', 'text-body-20', 'text-left', 'text-center', 'text-right', 'text-start', 'text-end', 'text-[#0D442E]', 'text-[#198057]', 'text-[orange]', 'text-accent', 'text-accent-hover', 'text-accent-pressed', 'text-caution', 'text-caution-secondary', 'text-constant-white', 'text-critical', 'text-critical-onPrimary', 'text-critical-secondary', 'text-disabled', 'text-disabled-secondary', 'text-inverse', 'text-inverse-accent', 'text-inverse-caution', 'text-inverse-critical', 'text-inverse-positive', 'text-inverse-secondary', 'text-link', 'text-link-hover', 'text-link-pressed', 'text-onPrimary', 'text-onPrimary-disabled', 'text-positive', 'text-positive-secondary', 'text-primary', 'text-secondary', 'text-secondary-hover', 'text-tertiary', 'text-transparent', 'font-regular', 'font-strong', 'font-stronger', 'rounded-12px', 'rounded-16px', 'rounded-4px', 'rounded-6px', 'rounded-8px', 'rounded-full', 'rounded-none', 'rounded-b-12px', 'rounded-b-none', 'rounded-l-16px', 'rounded-l-none', 'rounded-r-6px', 'rounded-r-none', 'rounded-t-4px', 'rounded-t-none', 'shadow-10', 'shadow-20', 'shadow-30', 'shadow-40', 'sm:text-heading-12', 'md:text-heading-12', 'lg:text-heading-12', 'text-heading-12', 'sm:text-heading-14', 'md:text-heading-14', 'lg:text-heading-14', 'text-heading-14', 'sm:text-heading-16', 'md:text-heading-16', 'lg:text-heading-16', 'text-heading-16', 'sm:text-heading-18', 'md:text-heading-18', 'lg:text-heading-18', 'text-heading-18', 'sm:text-heading-20', 'md:text-heading-20', 'lg:text-heading-20', 'text-heading-20', 'sm:text-heading-24', 'md:text-heading-24', 'lg:text-heading-24', 'text-heading-24', 'sm:text-heading-28', 'md:text-heading-28', 'lg:text-heading-28', 'text-heading-28', 'sm:text-heading-32', 'md:text-heading-32', 'lg:text-heading-32', 'text-heading-32', 'sm:text-body-8', 'md:text-body-8', 'lg:text-body-8', 'text-body-8', 'sm:text-body-10', 'md:text-body-10', 'lg:text-body-10', 'text-body-10', 'sm:text-body-12', 'md:text-body-12', 'lg:text-body-12', 'text-body-12', 'sm:text-body-14', 'md:text-body-14', 'lg:text-body-14', 'text-body-14', 'sm:text-body-16', 'md:text-body-16', 'lg:text-body-16', 'text-body-16', 'sm:text-body-20', 'md:text-body-20', 'lg:text-body-20', 'text-body-20', 'sm:text-left', 'md:text-left', 'lg:text-left', 'text-left', 'sm:text-center', 'md:text-center', 'lg:text-center', 'text-center', 'sm:text-right', 'md:text-right', 'lg:text-right', 'text-right', 'sm:text-start', 'md:text-start', 'lg:text-start', 'text-start', 'sm:text-end', 'md:text-end', 'lg:text-end', 'text-end', 'sm:font-regular', 'md:font-regular', 'lg:font-regular', 'font-regular', 'sm:font-strong', 'md:font-strong', 'lg:font-strong', 'font-strong', 'sm:font-stronger', 'md:font-stronger', 'lg:font-stronger', 'font-stronger', 'sm:block', 'md:block', 'lg:block', 'block', 'sm:inline-block', 'md:inline-block', 'lg:inline-block', 'inline-block', 'sm:inline', 'md:inline', 'lg:inline', 'inline', 'sm:flex', 'md:flex', 'lg:flex', 'flex', 'sm:inline-flex', 'md:inline-flex', 'lg:inline-flex', 'inline-flex', 'sm:grid', 'md:grid', 'lg:grid', 'grid', 'sm:inline-grid', 'md:inline-grid', 'lg:inline-grid', 'inline-grid', 'sm:table', 'md:table', 'lg:table', 'table', 'sm:table-row', 'md:table-row', 'lg:table-row', 'table-row', 'sm:table-cell', 'md:table-cell', 'lg:table-cell', 'table-cell', 'sm:hidden', 'md:hidden', 'lg:hidden', 'hidden', 'sm:w-auto', 'md:w-auto', 'lg:w-auto', 'w-auto', 'sm:w-fit', 'md:w-fit', 'lg:w-fit', 'w-fit', 'sm:w-full', 'md:w-full', 'lg:w-full', 'w-full', 'sm:flex-row', 'md:flex-row', 'lg:flex-row', 'flex-row', 'sm:flex-col', 'md:flex-col', 'lg:flex-col', 'flex-col', 'focus-ring', 'no-focus-ring', 'scrollbar-hidden', 'shadow-10', 'break-words', 'line-clamp-1', 'min-h-screen'];

function getAnimationsConfig() {
  return {
    keyframes: {
      ...fadingAnimations.keyframes,
      ...loadingAnimations.keyframes,
      ...scaleAnimations.keyframes,
      ...sheetAnimations.keyframes,
      ...snackbarAnimations.keyframes,
      ...getProAnimations.keyframes
    },
    animation: {
      ...fadingAnimations.animations,
      ...loadingAnimations.animations,
      ...sheetAnimations.animation,
      ...getProAnimations.animations
    }
  };
}
const ANIMATION = 'cubic-bezier(0.22, 1, 0.36, 1)';
const sheetAnimations = {
  keyframes: {
    inLeft: {
      '0%': {
        transform: 'translateX(-100%)'
      },
      '100%': {
        transform: 'translateX(0)'
      }
    },
    outLeft: {
      '0%': {
        transform: 'translateX(0)'
      },
      '100%': {
        transform: 'translateX(-100%)'
      }
    },
    inRight: {
      '0%': {
        transform: 'translateX(100%)'
      },
      '100%': {
        transform: 'translateX(0)'
      }
    },
    outRight: {
      '0%': {
        transform: 'translateX(0)'
      },
      '100%': {
        transform: 'translateX(100%)'
      }
    },
    inTop: {
      '0%': {
        transform: 'translateY(-100%)'
      },
      '100%': {
        transform: 'translateY(0)'
      }
    },
    outTop: {
      '0%': {
        transform: 'translateY(0)'
      },
      '100%': {
        transform: 'translateY(-100%)'
      }
    },
    inBottom: {
      '0%': {
        transform: 'translateY(100%)'
      },
      '100%': {
        transform: 'translateY(0)'
      }
    },
    outBottom: {
      '0%': {
        transform: 'translateY(0)'
      },
      '100%': {
        transform: 'translateY(100%)'
      }
    }
  },
  animation: {
    'sheet-in-left': `inLeft 0.5s ${ANIMATION} forwards`,
    'sheet-out-left': `outLeft 0.5s ${ANIMATION} forwards`,
    'sheet-in-right': `inRight 0.5s ${ANIMATION} forwards`,
    'sheet-out-right': `outRight 0.5s ${ANIMATION} forwards`,
    'sheet-in-top': `inTop 0.5s ${ANIMATION} forwards`,
    'sheet-out-top': `outTop 0.5s ${ANIMATION} forwards`,
    'sheet-in-bottom': `inBottom 0.5s ${ANIMATION} forwards`,
    'sheet-out-bottom': `outBottom 0.5s ${ANIMATION} forwards`
  }
};
const loadingAnimations = {
  keyframes: {
    dash: {
      '0%': {
        'stroke-dasharray': '1, 150',
        'stroke-dashoffset': '0'
      },
      '50%': {
        'stroke-dasharray': '90, 150',
        'stroke-dashoffset': '-35'
      },
      '100%': {
        'stroke-dasharray': '90, 150',
        'stroke-dashoffset': '-124'
      }
    }
  },
  animations: {
    'loading-dash': 'dash 1.7s linear infinite',
    'loading-spin': 'spin 1.7s linear infinite'
  }
};
const snackbarAnimations = {
  keyframes: {
    /**
     * TODO: use this keyframe to define dedicated snackbar animation
     * to have simpler 'animate-...' utility class in the snackbar component
     */
    'snackbar-transition': {
      '0%': {
        opacity: '0',
        transform: 'scale(0.95)'
      },
      '100%': {
        opacity: '1',
        transform: 'scale(1)'
      }
    }
  }
};
const fadingAnimations = {
  keyframes: {
    fadeIn: {
      '0%': {
        opacity: '0'
      },
      '100%': {
        opacity: '1'
      }
    },
    fadeOut: {
      '0%': {
        opacity: '1'
      },
      '100%': {
        opacity: '0'
      }
    }
  },
  animations: {
    'fade-in': `fadeIn 0.3s ${ANIMATION} forwards`,
    'fade-out': `fadeOut 0.3s ${ANIMATION} forwards`
  }
};
const scaleAnimations = {
  keyframes: {
    scale: {
      '0%': {
        transform: 'scale(0.8)'
      },
      '100%': {
        transform: 'scale(1)'
      }
    }
  }
};
const getProAnimations = {
  keyframes: {
    slideUp: {
      '0%': {
        transform: 'translateY(0%)'
      },
      '100%': {
        transform: 'translateY(-100%)'
      }
    },
    slideIn: {
      '100%': {
        transform: 'translateY(0%)'
      }
    }
  },
  animations: {
    'getpro-slide-up': `slideUp 0.35s cubic-bezier(0, -0.02, 0.66, -0.56) forwards`,
    'getpro-slide-in': `slideIn 0.25s ease-out 0.15s forwards`
  }
};

function createColorConfig$1(themeKeys) {
  return Object.fromEntries(themeKeys.map(key => {
    const [_, ...rest] = key.split('-');
    return [rest.join('-'), `var(--${key})`];
  }));
}
const backgroundColors = createColorConfig$1(['background-accent-hover', 'background-accent-pressed', 'background-accent-secondary-hover', 'background-accent-secondary-pressed', 'background-accent-secondary', 'background-accent-tertiary-hover', 'background-accent-tertiary-pressed', 'background-accent-tertiary', 'background-accent', 'background-avatar-hover', 'background-avatar', 'background-calendar-disabled', 'background-calendar', 'background-canvas', 'background-canvas-secondary', 'background-canvas-tertiary', 'background-caution-hover', 'background-caution-pressed', 'background-caution-secondary', 'background-caution', 'background-critical-hover', 'background-critical-pressed', 'background-critical-secondary-hover', 'background-critical-secondary-pressed', 'background-critical-secondary', 'background-critical', 'background-inverse-hover', 'background-inverse-pressed', 'background-inverse-secondary', 'background-inverse-tertiary-hover', 'background-inverse-tertiary-pressed', 'background-inverse-tertiary', 'background-inverse', 'background-neutral-disabled', 'background-neutral-hover', 'background-neutral-pressed', 'background-neutral-active', 'background-neutral-secondary-hover', 'background-neutral-secondary-pressed', 'background-neutral-secondary', 'background-neutral-tertiary-hover', 'background-neutral-tertiary', 'background-neutral', 'background-positive-hover', 'background-positive-pressed', 'background-positive-secondary', 'background-positive-secondary-hover', 'background-positive-secondary-pressed', 'background-positive', 'background-menu', 'background-modal-overlay']);
const borderColors = createColorConfig$1(['border-accent', 'border-primary', 'border-calendar', 'border-focus', 'border-hover', 'border-input-active-hover', 'border-input-active-pressed', 'border-input-active', 'border-input-critical-hover', 'border-input-critical-pressed', 'border-input-critical', 'border-input-disabled', 'border-input-hover', 'border-input', 'border-secondary', 'border-tertiary']);
const iconColors = createColorConfig$1(['icon-accent', 'icon-critical', 'icon-critical-onPrimary', 'icon-onPrimary', 'icon-primary', 'icon-secondary', 'icon-tertiary', 'icon-caution', 'icon-positive', 'icon-positive-hover', 'icon-inverse']);
const textColors = createColorConfig$1(['text-accent-hover', 'text-accent-pressed', 'text-accent', 'text-caution-secondary', 'text-caution', 'text-critical-onPrimary', 'text-critical-secondary', 'text-critical', 'text-disabled', 'text-disabled-secondary', 'text-inverse-accent', 'text-inverse-caution', 'text-inverse-critical', 'text-inverse-positive', 'text-inverse-secondary', 'text-inverse', 'text-link-hover', 'text-link-pressed', 'text-link', 'text-onPrimary-disabled', 'text-onPrimary', 'text-positive-secondary', 'text-positive', 'text-primary', 'text-secondary-hover', 'text-secondary', 'text-tertiary']);
const iconTextColors = Object.fromEntries(Object.entries(createColorConfig$1(['text-inverse', 'text-inverse-critical', 'text-inverse-positive', 'text-inverse-secondary'])).map(([key, value]) => [`text-${key}`, value]));
const generalColors = createColorConfig$1(['general-constant-black', 'general-constant-white']);
const decorationColors = Object.fromEntries(Object.entries(createColorConfig$1(['decoration-brand', 'decoration-facebook', 'decoration-instagram', 'decoration-teleport', 'decoration-twitter', 'decoration-whatsapp', 'decoration-youtube'])).map(([key, value]) => [`decoration-${key}`, value]));
const statusColors = Object.fromEntries(Object.entries(createColorConfig$1(['status-available', 'status-away', 'status-busy', 'status-offline', 'status-icon', 'status-border'])).map(([key, value]) => [`status-${key}`, value]));
const chartColors = Object.fromEntries(Object.entries(createColorConfig$1(['chart-accent-100', 'chart-accent-200', 'chart-accent-300', 'chart-accent-400', 'chart-accent-500', 'chart-accent-600', 'chart-accent-700', 'chart-accent-800', 'chart-neutral-100', 'chart-neutral-200', 'chart-neutral-300', 'chart-neutral-400', 'chart-neutral-500', 'chart-neutral-600', 'chart-neutral-700', 'chart-neutral-800'])).map(([key, value]) => [`chart-${key}`, value]));
const paletteBackgroundColors = Object.fromEntries(Object.entries(createColorConfig$1(['palette-gray-background', 'palette-gray-background-hover', 'palette-gray-background-active', 'palette-dark-gray-background', 'palette-dark-gray-background-hover', 'palette-dark-gray-background-active', 'palette-light-pink-background', 'palette-light-pink-background-hover', 'palette-light-pink-background-active', 'palette-pink-background', 'palette-pink-background-hover', 'palette-pink-background-active', 'palette-red-background', 'palette-red-background-hover', 'palette-red-background-active', 'palette-maroon-background', 'palette-maroon-background-hover', 'palette-maroon-background-active', 'palette-orange-background', 'palette-orange-background-hover', 'palette-orange-background-active', 'palette-violet-background', 'palette-violet-background-hover', 'palette-violet-background-active', 'palette-yellow-background', 'palette-yellow-background-hover', 'palette-yellow-background-active', 'palette-green-background', 'palette-green-background-hover', 'palette-green-background-active', 'palette-dark-green-background', 'palette-dark-green-background-hover', 'palette-dark-green-background-active', 'palette-blue-background', 'palette-blue-background-hover', 'palette-blue-background-active', 'palette-dark-blue-background', 'palette-dark-blue-background-hover', 'palette-dark-blue-background-active'])).map(([key, value]) => [`palette-${key}`, value]));
const paletteBorderColors = Object.fromEntries(Object.entries(createColorConfig$1(['palette-gray-border', 'palette-dark-gray-border', 'palette-light-pink-border', 'palette-pink-border', 'palette-red-border', 'palette-maroon-border', 'palette-orange-border', 'palette-violet-border', 'palette-yellow-border', 'palette-green-border', 'palette-dark-green-border', 'palette-blue-border', 'palette-dark-blue-border'])).map(([key, value]) => [`palette-${key}`, value]));
const paletteTextColors = Object.fromEntries(Object.entries(createColorConfig$1(['palette-gray-text', 'palette-gray-text-active', 'palette-gray-text-secondary', 'palette-dark-gray-text', 'palette-dark-gray-text-active', 'palette-dark-gray-text-secondary', 'palette-light-pink-text', 'palette-light-pink-text-active', 'palette-light-pink-text-secondary', 'palette-pink-text', 'palette-pink-text-active', 'palette-pink-text-secondary', 'palette-red-text', 'palette-red-text-active', 'palette-red-text-secondary', 'palette-maroon-text', 'palette-maroon-text-active', 'palette-maroon-text-secondary', 'palette-orange-text', 'palette-orange-text-active', 'palette-orange-text-secondary', 'palette-violet-text', 'palette-violet-text-active', 'palette-violet-text-secondary', 'palette-yellow-text', 'palette-yellow-text-active', 'palette-yellow-text-secondary', 'palette-green-text', 'palette-green-text-active', 'palette-green-text-secondary', 'palette-dark-green-text', 'palette-dark-green-text-active', 'palette-dark-green-text-secondary', 'palette-blue-text', 'palette-blue-text-active', 'palette-blue-text-secondary', 'palette-dark-blue-text', 'palette-dark-blue-text-active', 'palette-dark-blue-text-secondary'])).map(([key, value]) => [`palette-${key}`, value]));

/**
 * Overrides and sets various things that aren't set in Tailwind's preflight
 */
function basePlugin({
  shouldExcludeCustomResets
}) {
  return plugin(({
    addBase
  }) => {
    if (!shouldExcludeCustomResets) {
      addBase({
        html: {
          lineHeight: 'normal',
          wordBreak: 'break-word'
        },
        'a, img, svg': {
          display: 'inline-block'
        },
        'a, button': {
          '-webkit-tap-highlight-color': 'transparent'
        },
        'img, svg': {
          verticalAlign: 'bottom'
        },
        button: {
          lineHeight: '1'
        },
        'td, th': {
          padding: '0'
        }
      });
    }
  });
}

function toCustomProperties(obj, prefix) {
  return Object.fromEntries(Object.entries(obj).map(([key, value]) => [`--${prefix}-${key}`, value]));
}

/**
 * Tailwind plugin that creates our custom box-shadows.
 *
 * @example
 * ```tsx
 * <a className="shadow-20">Click me</a>
 * ```
 */
function createBoxShadowPlugin(shadow, {
  shouldExcludeBaseStyles
}) {
  return plugin(({
    addBase,
    addUtilities
  }) => {
    if (!shouldExcludeBaseStyles) {
      addBase({
        ':root': {
          ...toCustomProperties(shadow, 'shadow')
        }
      });
    }
    addUtilities(Object.fromEntries(Object.entries(shadow).map(([key]) => [`.shadow-${key}`, {
      boxShadow: `var(--shadow-${key})`
    }])));
  });
}

/**
 * Applies the custom properties for our colour tokens to the `:root`
 * pseudo-element and classes.
 */
function createColorPlugin(colorSchemes, {
  shouldExcludeBaseStyles
}) {
  return plugin(({
    addBase
  }) => {
    if (!shouldExcludeBaseStyles) {
      const colors = getColors(colorSchemes);
      addBase({
        // Root
        ':root': {
          colorScheme: 'light dark',
          // Set color scheme property
          ...colors.light
        },
        '@media (prefers-color-scheme: dark)': {
          ':root': {
            colorScheme: 'dark',
            // Set color scheme property for dark mode
            ...colors.dark
          }
        },
        // Class
        '.light': {
          colorScheme: 'light',
          // Set color scheme property for light class
          ...colors.light
        },
        '.dark': {
          colorScheme: 'dark',
          // Set color scheme property for dark class
          ...colors.dark
        }
      });
    }
  });
}
function getColors({
  light,
  dark
}) {
  return {
    light: {
      ...toCustomProperties(light.background, 'background'),
      ...toCustomProperties(light.border, 'border'),
      ...toCustomProperties(light.icon, 'icon'),
      ...toCustomProperties(light.text, 'text'),
      ...toCustomProperties(light.status, 'status'),
      ...toCustomProperties(light.decoration, 'decoration'),
      ...toCustomProperties(light.general, 'general'),
      ...toCustomProperties(light.chart, 'chart'),
      ...toCustomProperties(light['palette'], 'palette')
    },
    dark: {
      ...toCustomProperties(dark.background, 'background'),
      ...toCustomProperties(dark.border, 'border'),
      ...toCustomProperties(dark.icon, 'icon'),
      ...toCustomProperties(dark.text, 'text'),
      ...toCustomProperties(dark.status, 'status'),
      ...toCustomProperties(dark.decoration, 'decoration'),
      ...toCustomProperties(dark.general, 'general'),
      ...toCustomProperties(light.chart, 'chart'),
      ...toCustomProperties(dark['palette'], 'palette')
    }
  };
}

/**
 * Adds or extends various component classes that can be overridden with utilities.
 */
const componentsPlugin = plugin(({
  addComponents,
  theme
}) => {
  // Adds a class for our custom focus-ring.
  addComponents({
    '.focus-ring': {
      outline: 'none',
      '--tw-ring-color': theme('borderColor.focus'),
      '--tw-ring-offset-color': theme('backgroundColor.neutral'),
      '--tw-ring-offset-width': theme('ringWidth.1'),
      '--tw-ring-offset-shadow': '0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color)',
      '--tw-ring-shadow': '0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color)',
      'box-shadow': 'var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)',
      '@media (-ms-high-contrast: active), (forced-colors: active)': {
        'outline-color': theme('outlineColor.transparent'),
        'outline-offset': theme('outlineOffset.2'),
        'outline-style': 'solid',
        'outline-width': theme('outlineWidth.2')
      }
    },
    '.no-focus-ring': {
      outline: 'revert',
      'box-shadow': 'revert',
      '@media (-ms-high-contrast: active), (forced-colors: active)': {
        'outline-color': 'revert',
        'outline-offset': 'revert',
        'outline-style': 'revert',
        'outline-width': 'revert'
      }
    },
    // Tailwind plugin that adds a custom class to hide scrollbars.
    // Caution should be used when applying this because users will not be aware that
    // the element is scrollable unless you provide another method of affordance.
    '.scrollbar-hidden': {
      scrollbarWidth: 'none',
      '&::-webkit-scrollbar': {
        display: 'none'
      }
    }
  });
});

/**
 * Adds cropper component classes to override
 * native css styles coming from this package:
 * https://fengyuanchen.github.io/cropperjs/
 */

function createCropperPlugin({
  shouldExcludeCropperStyles
}) {
  return plugin(({
    addComponents
  }) => {
    if (!shouldExcludeCropperStyles) {
      addComponents({
        '.cropper-container': {
          direction: 'ltr',
          fontSize: '0',
          lineHeight: '0',
          position: 'relative',
          touchAction: 'none',
          userSelect: 'none',
          borderRadius: '8px',
          overflow: 'hidden'
        },
        '.cropper-container img': {
          backfaceVisibility: 'hidden',
          display: 'block',
          height: '100%',
          imageOrientation: '0deg',
          maxHeight: 'none !important',
          maxWidth: 'none !important',
          minHeight: '0 !important',
          minWidth: '0 !important',
          width: '100%'
        },
        '.cropper-wrap-box, .cropper-canvas, .cropper-drag-box, .cropper-crop-box, .cropper-modal': {
          position: 'absolute',
          inset: '0'
        },
        '.cropper-wrap-box, .cropper-canvas': {
          overflow: 'hidden'
        },
        '.cropper-drag-box': {
          backgroundColor: '#fff',
          opacity: '0'
        },
        '.cropper-modal': {
          backgroundColor: '#000',
          opacity: '0.6'
        },
        '.cropper-view-box': {
          display: 'block',
          height: '100%',
          overflow: 'hidden',
          position: 'relative',
          width: '100%'
        },
        '.cropper-view-box::after': {
          content: '" "',
          display: 'block',
          position: 'absolute',
          inset: '0',
          border: '2px solid #007cea',
          zIndex: '1',
          pointerEvents: 'none'
        },
        '.cropper-dashed': {
          border: '0 dashed #eee',
          display: 'block',
          opacity: '0.5',
          position: 'absolute'
        },
        '.cropper-dashed.dashed-h': {
          borderBottomWidth: '1px',
          borderTopWidth: '1px',
          height: 'calc(100% / 3)',
          left: '0',
          top: 'calc(100% / 3)',
          width: '100%'
        },
        '.cropper-dashed.dashed-v': {
          borderLeftWidth: '1px',
          borderRightWidth: '1px',
          height: '100%',
          left: 'calc(100% / 3)',
          top: '0',
          width: 'calc(100% / 3)'
        },
        '.cropper-center': {
          display: 'none',
          height: '0',
          left: '50%',
          opacity: '0.75',
          position: 'absolute',
          top: '50%',
          width: '0'
        },
        '.cropper-center::before': {
          backgroundColor: '#eee',
          content: '" "',
          display: 'block',
          height: '1px',
          left: '-3px',
          position: 'absolute',
          top: '0',
          width: '7px'
        },
        '.cropper-center::after': {
          backgroundColor: '#eee',
          content: '" "',
          display: 'block',
          height: '7px',
          left: '0',
          position: 'absolute',
          top: '-3px',
          width: '1px'
        },
        '.cropper-face, .cropper-line, .cropper-point': {
          display: 'block',
          height: '100%',
          opacity: '0',
          position: 'absolute',
          width: '100%'
        },
        '.cropper-face': {
          backgroundColor: '#fff',
          left: '0',
          top: '0'
        },
        '.cropper-line': {
          backgroundColor: '#39f'
        },
        '.cropper-line.line-e': {
          cursor: 'ew-resize',
          right: '-3px',
          top: '0',
          width: '5px'
        },
        '.cropper-line.line-n': {
          cursor: 'ns-resize',
          height: '5px',
          left: '0',
          top: '-3px'
        },
        '.cropper-line.line-w': {
          cursor: 'ew-resize',
          left: '-3px',
          top: '0',
          width: '5px'
        },
        '.cropper-line.line-s': {
          bottom: '-3px',
          cursor: 'ns-resize',
          height: '5px',
          left: '0'
        },
        '.cropper-invisible': {
          opacity: '0'
        },
        '.cropper-bg': {
          backgroundColor: '#d9d9d9'
        },
        '.cropper-hide': {
          display: 'block',
          height: '0',
          position: 'absolute',
          width: '0'
        },
        '.cropper-hidden': {
          display: 'none !important'
        },
        '.cropper-move': {
          cursor: 'move'
        },
        '.cropper-crop': {
          cursor: 'crosshair'
        },
        '.cropper-disabled .cropper-drag-box, .cropper-disabled .cropper-face, .cropper-disabled .cropper-line, .cropper-disabled .cropper-point': {
          cursor: 'not-allowed'
        },
        '.cropper-circle-view-box .cropper-view-box': {
          borderRadius: '50%'
        },
        '.cropper-circle-view-box .cropper-view-box::after': {
          borderRadius: '50%'
        }
      });
    }
  });
}

/**
 * Adds a `high-contrast` variant that applies styles when the user has enabled
 * high contrast mode.
 *
 * @example ```tsx
 * <div className="disabled:high-contrast:border-dotted">
 * 	...
 * </div>
 * ```
 * In this example, the class `disabled:high-contrast:border-dotted` is used to
 * add a dotted border to the div element when it's in a "disabled" state.
 * The dotted border is used because low-contrast styles typically used to indicate
 * a disabled state will not be visible to users in high contrast mode.
 */
const highContrastPlugin = plugin(({
  addVariant
}) => {
  addVariant('high-contrast', '@media (-ms-high-contrast: active), (forced-colors: active)');
});

/**
 * Tailwind plugin that creates typography utility classes.
 * These utility classes bundle styles for font-family, font-size, font-weight,
 * line-height, and letter-spacing.
 *
 * @example
 * ```tsx
 * <h1 className="text-heading-32">Hello World</h1>
 * ```
 */
function createTypographyPlugin(typography, {
  shouldExcludeTypographyStyles
}) {
  return plugin(({
    addComponents,
    addUtilities
  }) => {
    const headingUtilities = Object.fromEntries(Object.entries(typography.heading).map(([key, value]) => [`.text-heading-${key}`, {
      fontFamily: [typography.fontFamily.heading, typography.fontFamily.fallback].join(', '),
      fontSize: value.fontSize,
      fontWeight: value.fontWeight,
      lineHeight: value.lineHeight,
      letterSpacing: value.letterSpacing
    }]));
    const bodyUtilities = Object.fromEntries(Object.entries(typography.body).map(([key, value]) => [`.text-body-${key}`, {
      fontFamily: [typography.fontFamily.body, typography.fontFamily.fallback].join(', '),
      fontSize: value.fontSize,
      fontWeight: value.fontWeight,
      lineHeight: value.lineHeight,
      letterSpacing: value.letterSpacing
    }]));
    if (!shouldExcludeTypographyStyles) {
      addComponents({
        ...headingUtilities,
        ...bodyUtilities
      });
      addUtilities({
        '.font-regular': {
          fontWeight: typography.fontWeight.regular
        },
        '.font-strong': {
          fontWeight: typography.fontWeight.strong
        },
        '.font-stronger': {
          fontWeight: typography.fontWeight.stronger
        }
      });
    }
  });
}

/**
 * Adds or extends various utilities.
 */
const utilitiesPlugin = plugin(({
  addUtilities
}) => {
  addUtilities({
    // Tailwind's overflow-wrap doesn't behave the same (often failing to break)
    '.break-words': {
      wordBreak: 'break-word'
    },
    // Overrides the built-in line-clamp utility for single-line text in order to
    // display more characters when text is truncated.
    '.line-clamp-1': {
      display: 'block',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap'
    },
    // Extend Tailwind's built-in class since 100dvh is preferred to 100vh
    // https://www.bram.us/2020/05/06/100vh-in-safari-on-ios/
    '.min-h-screen': {
      '@supports (min-height: 100dvh)': {
        minHeight: '100dvh'
      }
    }
  });
});

/**
 * Adds a `where` variant that targets specific classes with the `:where()`
 * pseudo-class to apply styles with lower specificity. This is useful for
 * applying styles conditionally, ensuring they can be overridden due to lower
 * specificity.
 *
 * @example
 * ```tsx
 * <div className="where:bg-accent ...">
 *   ...
 * </div>
 * ```
 * In this example, `where:bg-accent` applies `bg-accent` background color with
 * lower specificity by using a `:where()` pseudo-class.
 */
const wherePlugin = plugin(({
  addVariant
}) => {
  addVariant('where', ':where(&)');
});

function createPreset(tokens, {
  experimental_shouldExcludeBaseStyles: shouldExcludeBaseStyles = false,
  shouldExcludeCustomResets = false,
  shouldExcludeTypographyStyles = false,
  shouldExcludeCropperStyles = false,
  shouldUseTailwindBorderRadius = false,
  shouldUseTailwindBoxShadows = false,
  shouldUseTailwindColors = false,
  shouldUseTailwindFontSize = false,
  shouldUseTailwindFontWeight = false,
  shouldUseTailwindFuture = true
} = {}) {
  return {
    content: [],
    corePlugins: {
      boxShadow: shouldUseTailwindBoxShadows,
      boxShadowColor: shouldUseTailwindBoxShadows,
      fontSize: shouldUseTailwindFontSize,
      fontWeight: shouldUseTailwindFontWeight
    },
    theme: {
      ...defaultTheme,
      ...getBorderRadiusThemeConfig(tokens, {
        shouldUseTailwindBorderRadius
      }),
      ...getColorThemeConfig({
        shouldUseTailwindColors
      }),
      extend: {
        ...getAnimationsConfig()
      }
    },
    ...(shouldUseTailwindFuture ? {
      future: {
        /**
         * Disable hover effects for devices that don't support them.
         * https://github.com/tailwindlabs/tailwindcss/pull/8394
         * This should be revisit when tailwind v4 is released
         */
        hoverOnlyWhenSupported: true
      }
    } : undefined),
    plugins: [basePlugin({
      shouldExcludeCustomResets
    }), componentsPlugin, createBoxShadowPlugin(tokens.global.shadow, {
      shouldExcludeBaseStyles
    }), createColorPlugin(tokens.colorSchemes, {
      shouldExcludeBaseStyles
    }), createTypographyPlugin(tokens.global.typography, {
      shouldExcludeTypographyStyles
    }), highContrastPlugin, utilitiesPlugin, wherePlugin, createCropperPlugin({
      shouldExcludeCropperStyles
    })]
  };
}
function getBorderRadiusThemeConfig(tokens, {
  shouldUseTailwindBorderRadius
}) {
  return {
    borderRadius: {
      ...(shouldUseTailwindBorderRadius ? defaultTheme.borderRadius : undefined),
      ...tokens.global.radius
    }
  };
}
function getColorThemeConfig({
  shouldUseTailwindColors
}) {
  return {
    backgroundColor: createColorConfig({
      ...backgroundColors,
      ...decorationColors,
      ...statusColors,
      ...paletteBackgroundColors
    }, shouldUseTailwindColors),
    borderColor: createColorConfig({
      ...borderColors,
      ...statusColors,
      ...paletteBorderColors
    }, shouldUseTailwindColors),
    divideColor: ({
      theme
    }) => ({
      ...(shouldUseTailwindColors ? theme('borderColor') : undefined),
      ...borderColors
    }),
    fill: createColorConfig({
      ...iconColors,
      ...decorationColors,
      ...statusColors,
      ...iconTextColors,
      ...chartColors
    }, shouldUseTailwindColors),
    ringColor: createColorConfig(borderColors, shouldUseTailwindColors),
    stroke: createColorConfig({
      ...iconColors,
      ...decorationColors,
      ...statusColors,
      ...iconTextColors,
      ...chartColors
    }, shouldUseTailwindColors),
    textColor: createColorConfig({
      ...textColors,
      ...paletteTextColors
    }, shouldUseTailwindColors)
  };
}
function createColorConfig(customColors, useDefaultColors) {
  return ({
    theme
  }) => ({
    ...(useDefaultColors ? theme('colors') : undefined),
    current: 'currentColor',
    inherit: 'inherit',
    transparent: 'transparent',
    ...customColors,
    ...generalColors
  });
}

// Generated file - do not edit directly
const commonSafelist = ['flex', 'flex-1', 'flex-row', 'flex-row-reverse', 'flex-col', 'flex-wrap', 'flex-nowrap', 'justify-end', 'justify-center', 'justify-between', 'items-start', 'items-end', 'items-center', 'items-baseline', 'items-stretch', 'ps-0.5', 'ps-1', 'ps-1.5', 'ps-2', 'ps-3', 'ps-8', 'pe-0.5', 'pe-1', 'pe-1.5', 'pe-12', 'pe-2', 'pe-3', 'pb-0', 'pb-3', 'pb-6', 'pb-[calc(env(safe-area-inset-bottom)\+24px)]', 'pb-[calc(env(safe-area-inset-bottom)\\\+24px)]', 'pt-2', 'pt-4', 'pt-5', 'pt-9', 'mx-auto', 'my-0', 'my-0.5', 'my-1', 'my-10', 'mt-1', 'mt-2', 'mt-3', 'mt-4', 'mt-5', 'mt-[1px]', 'mt-[5px]', 'mb-1', 'mb-2', 'mb-4', 'm-4', 'm-5', 'm-auto', 'p-0', 'p-0.5', 'p-1', 'p-1.5', 'p-2', 'p-3', 'p-4', 'p-6', 'fill-accent', 'fill-caution', 'fill-critical', 'fill-critical-onPrimary', 'fill-current', 'fill-decoration-brand', 'fill-decoration-teleport', 'fill-inverse', 'fill-onPrimary', 'fill-positive', 'fill-primary', 'fill-secondary', 'fill-status-available', 'fill-status-away', 'fill-status-busy', 'fill-status-icon', 'fill-status-offline', 'fill-tertiary', 'fill-text-inverse', 'fill-text-inverse-critical', 'fill-text-inverse-positive', 'fill-transparent', 'stroke-accent', 'stroke-critical', 'stroke-critical-onPrimary', 'stroke-current', 'stroke-inverse', 'stroke-onPrimary', 'stroke-primary', 'stroke-secondary', 'stroke-tertiary', 'stroke-text-inverse-secondary', 'stroke-transparent', 'stroke-1', 'stroke-2', 'stroke-[2px]', 'stroke-[3px]', 'bg-[#D4F7E9]', 'bg-[red]', 'bg-accent', 'bg-accent-secondary', 'bg-avatar', 'bg-canvas', 'bg-canvas-secondary', 'bg-canvas-tertiary', 'bg-caution', 'bg-caution-secondary', 'bg-critical', 'bg-critical-hover', 'bg-critical-pressed', 'bg-critical-secondary', 'bg-inverse', 'bg-inverse-secondary', 'bg-inverse-tertiary', 'bg-modal-overlay', 'bg-neutral', 'bg-neutral-disabled', 'bg-neutral-secondary', 'bg-neutral-tertiary', 'bg-positive-secondary', 'bg-transparent', 'bg-gradient-to-r', 'bg-none', 'text-heading-12', 'text-heading-14', 'text-heading-16', 'text-heading-18', 'text-heading-20', 'text-heading-24', 'text-heading-28', 'text-heading-32', 'text-body-8', 'text-body-10', 'text-body-12', 'text-body-14', 'text-body-16', 'text-body-20', 'text-left', 'text-center', 'text-right', 'text-start', 'text-end', 'text-[#0D442E]', 'text-[#198057]', 'text-[orange]', 'text-accent', 'text-accent-hover', 'text-accent-pressed', 'text-caution', 'text-caution-secondary', 'text-constant-white', 'text-critical', 'text-critical-onPrimary', 'text-critical-secondary', 'text-disabled', 'text-disabled-secondary', 'text-inverse', 'text-inverse-accent', 'text-inverse-caution', 'text-inverse-critical', 'text-inverse-positive', 'text-inverse-secondary', 'text-link', 'text-link-hover', 'text-link-pressed', 'text-onPrimary', 'text-onPrimary-disabled', 'text-positive', 'text-positive-secondary', 'text-primary', 'text-secondary', 'text-secondary-hover', 'text-tertiary', 'text-transparent', 'font-regular', 'font-strong', 'font-stronger', 'rounded-12px', 'rounded-16px', 'rounded-4px', 'rounded-6px', 'rounded-8px', 'rounded-full', 'rounded-none', 'rounded-b-12px', 'rounded-b-none', 'rounded-l-16px', 'rounded-l-none', 'rounded-r-6px', 'rounded-r-none', 'rounded-t-4px', 'rounded-t-none', 'shadow-10', 'shadow-20', 'shadow-30', 'shadow-40', 'sm:text-heading-12', 'md:text-heading-12', 'lg:text-heading-12', 'text-heading-12', 'sm:text-heading-14', 'md:text-heading-14', 'lg:text-heading-14', 'text-heading-14', 'sm:text-heading-16', 'md:text-heading-16', 'lg:text-heading-16', 'text-heading-16', 'sm:text-heading-18', 'md:text-heading-18', 'lg:text-heading-18', 'text-heading-18', 'sm:text-heading-20', 'md:text-heading-20', 'lg:text-heading-20', 'text-heading-20', 'sm:text-heading-24', 'md:text-heading-24', 'lg:text-heading-24', 'text-heading-24', 'sm:text-heading-28', 'md:text-heading-28', 'lg:text-heading-28', 'text-heading-28', 'sm:text-heading-32', 'md:text-heading-32', 'lg:text-heading-32', 'text-heading-32', 'sm:text-body-8', 'md:text-body-8', 'lg:text-body-8', 'text-body-8', 'sm:text-body-10', 'md:text-body-10', 'lg:text-body-10', 'text-body-10', 'sm:text-body-12', 'md:text-body-12', 'lg:text-body-12', 'text-body-12', 'sm:text-body-14', 'md:text-body-14', 'lg:text-body-14', 'text-body-14', 'sm:text-body-16', 'md:text-body-16', 'lg:text-body-16', 'text-body-16', 'sm:text-body-20', 'md:text-body-20', 'lg:text-body-20', 'text-body-20', 'sm:text-left', 'md:text-left', 'lg:text-left', 'text-left', 'sm:text-center', 'md:text-center', 'lg:text-center', 'text-center', 'sm:text-right', 'md:text-right', 'lg:text-right', 'text-right', 'sm:text-start', 'md:text-start', 'lg:text-start', 'text-start', 'sm:text-end', 'md:text-end', 'lg:text-end', 'text-end', 'sm:font-regular', 'md:font-regular', 'lg:font-regular', 'font-regular', 'sm:font-strong', 'md:font-strong', 'lg:font-strong', 'font-strong', 'sm:font-stronger', 'md:font-stronger', 'lg:font-stronger', 'font-stronger', 'sm:block', 'md:block', 'lg:block', 'block', 'sm:inline-block', 'md:inline-block', 'lg:inline-block', 'inline-block', 'sm:inline', 'md:inline', 'lg:inline', 'inline', 'sm:flex', 'md:flex', 'lg:flex', 'flex', 'sm:inline-flex', 'md:inline-flex', 'lg:inline-flex', 'inline-flex', 'sm:grid', 'md:grid', 'lg:grid', 'grid', 'sm:inline-grid', 'md:inline-grid', 'lg:inline-grid', 'inline-grid', 'sm:table', 'md:table', 'lg:table', 'table', 'sm:table-row', 'md:table-row', 'lg:table-row', 'table-row', 'sm:table-cell', 'md:table-cell', 'lg:table-cell', 'table-cell', 'sm:hidden', 'md:hidden', 'lg:hidden', 'hidden', 'sm:w-auto', 'md:w-auto', 'lg:w-auto', 'w-auto', 'sm:w-fit', 'md:w-fit', 'lg:w-fit', 'w-fit', 'sm:w-full', 'md:w-full', 'lg:w-full', 'w-full', 'sm:flex-row', 'md:flex-row', 'lg:flex-row', 'flex-row', 'sm:flex-col', 'md:flex-col', 'lg:flex-col', 'flex-col', 'focus-ring', 'no-focus-ring', 'scrollbar-hidden', 'shadow-10', 'break-words', 'line-clamp-1', 'min-h-screen'];

const cropModalSafelist = [
// Base container and component classes
// These classes are used for the main structure of the cropper
'cropper-container', 'cropper-wrap-box', 'cropper-canvas', 'cropper-drag-box', 'cropper-crop-box', 'cropper-modal', 'cropper-view-box',
// Guide line classes
// Used for the dashed lines that help with alignment
'cropper-dashed', 'dashed-h', 'dashed-v',
// Center point classes
// Used for the central reference point
'cropper-center',
// Interface element classes
// Core interactive elements of the cropper
'cropper-face', 'cropper-line', 'cropper-point',
// Border line classes
// Used for the edges of the crop area
'line-e',
// east
'line-n',
// north
'line-w',
// west
'line-s',
// south

// Control point classes
// Used for the resize handles at corners and edges
'point-e',
// east
'point-n',
// north
'point-w',
// west
'point-s',
// south
'point-ne',
// northeast
'point-nw',
// northwest
'point-sw',
// southwest
'point-se',
// southeast

// State classes
// Used for different states of the cropper
'cropper-invisible',
// Hidden elements
'cropper-bg',
// Background
'cropper-hide',
// Temporarily hidden
'cropper-hidden',
// Permanently hidden
'cropper-move',
// Moving state
'cropper-crop',
// Cropping state
'cropper-disabled',
// Disabled state

// Circular view classes
// Used when cropping in circular mode
'cropper-circle-view-box'];

export { commonBlocklist, commonSafelist, createPreset, cropModalSafelist };
